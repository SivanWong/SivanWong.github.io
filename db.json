{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/alipay.jpg","path":"images/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/wechat-qcode.jpg","path":"images/wechat-qcode.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/love.js","path":"js/src/love.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1658472606936},{"_id":"source/.DS_Store","hash":"192c219507b835326f8d983664cf872069c3ca5a","modified":1658482933564},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1524821066000},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1524821066000},{"_id":"themes/next/.DS_Store","hash":"d5123441debc1069f274f8cc537d74fdd5dcfa52","modified":1635735730741},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1524821066000},{"_id":"themes/next/.gitignore","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1524821066000},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1524821066000},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1524821066000},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1524821066000},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1524821066000},{"_id":"themes/next/README.md","hash":"50abff86ffe4113051a409c1ed9261195d2aead0","modified":1524821066000},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1524821066000},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1524821066000},{"_id":"themes/next/README.cn.md","hash":"23e92a2599725db2f8dbd524fbef2087c6d11c7b","modified":1524821066000},{"_id":"themes/next/_config.yml","hash":"9dbc6f425395bea0b3d33f4de6f98171e9fe9e46","modified":1553678580000},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1524821066000},{"_id":"source/_posts/.DS_Store","hash":"c3d542d2787a73a071249db50508c83218a1578f","modified":1658482933565},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1524821066000},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1524821066000},{"_id":"source/about/index.md","hash":"06b881312dac26b8e0866f2450d5630b331e533f","modified":1658472606992},{"_id":"source/categories/index.md","hash":"bec8e393fbb6e037b3da97046bc849410500aa7d","modified":1658472606992},{"_id":"source/tags/index.md","hash":"2a841f1fac2f2256353c16b72bb5083b659fc8af","modified":1658472606993},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1524821066000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"a0a82dbfabdef9a9d7c17a08ceebfb4052d98d81","modified":1524821066000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1524821066000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1524821066000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1524821066000},{"_id":"themes/next/.git/config","hash":"8e94cc015a498d35202e9fd57e44b3c51e1e5634","modified":1524821066000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1524820572000},{"_id":"themes/next/.git/packed-refs","hash":"69237944e31c16fe545d1f47b0b1e5b1d99660da","modified":1524821066000},{"_id":"themes/next/.git/FETCH_HEAD","hash":"d5932b39c178826b7db21fb111fe59f356b4e644","modified":1636006733087},{"_id":"themes/next/.git/index","hash":"b4853b28324d7925312c809a655c0056d07a666f","modified":1635735998307},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1524821066000},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1524821066000},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1524821066000},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1524821066000},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1524821066000},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1524821066000},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1524821066000},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1524821066000},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1524821066000},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1524821066000},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1524821066000},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1524821066000},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1524821066000},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1524821066000},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1524821066000},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1524821066000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"66b9b42f143c3cb2f782a94abd4c4cbd5fd7f55f","modified":1524821066000},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1524821066000},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1524821066000},{"_id":"themes/next/source/.DS_Store","hash":"510deb0e95da9e9a156f2964f459f874d09c1818","modified":1635735714829},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1524821066000},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1524821066000},{"_id":"themes/next/layout/.DS_Store","hash":"3adc1e1c81707a352f0c8011d760de24c7bed897","modified":1635735790674},{"_id":"themes/next/layout/_layout.swig","hash":"b778a849035a0ade4dc01f68c81e57fbb83f29d9","modified":1525440550000},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1524821066000},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1524821066000},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1524821066000},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1524821066000},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1524821066000},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1524821066000},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1524821066000},{"_id":"source/_posts/CSS/CSS：BFC.md","hash":"02e06dda384d9d7ba4ec9cc57ee4848bdd51f5bc","modified":1658479360971},{"_id":"source/_posts/CSS/CSS：flex布局.md","hash":"5e233052e593d409fecbc4a3c0a6d16784f10ace","modified":1658479372302},{"_id":"source/_posts/CSS/CSS：line-height.md","hash":"6d7d1fd0867f49a53e07d1ef4ff670f4d9dd1ddf","modified":1658479384842},{"_id":"source/_posts/CSS/CSS：position.md","hash":"1f85387c1505b56612d7cd6e24b302fce7c25f05","modified":1658478631980},{"_id":"source/_posts/CSS/CSS：各种单位.md","hash":"da581022a552f8e2c522a7395d82964b88130282","modified":1658479235885},{"_id":"source/_posts/CSS/CSS：圣杯布局和双飞翼布局.md","hash":"fc798677c32970bd2af49d19a03921fb07db1737","modified":1658479272320},{"_id":"source/_posts/CSS/CSS：垂直水平居中.md","hash":"b98b580ff74f8681b325831515831fba74662b45","modified":1658478903688},{"_id":"source/_posts/CSS/CSS：模块化.md","hash":"158fccd9ae3d3377cceb943297d91e7229df2de1","modified":1658479256872},{"_id":"source/_posts/CSS/CSS：清除浮动.md","hash":"ec93484576e672811cf88e0da53e851641cb3d78","modified":1658479263801},{"_id":"source/_posts/CSS/CSS：盒模型.md","hash":"947c80fb79ef53eae4550050f76d7470e3ab775d","modified":1658479247748},{"_id":"source/_posts/CSS/CSS：等宽的三栏布局.md","hash":"05aa0dbbf5c2ea155e0f1bcc914f1a40df69bd57","modified":1658479226718},{"_id":"source/_posts/CSS/CSS：选择器.md","hash":"d12ade6ec74a0d15535cd061a56ad539d4eeed54","modified":1658479280675},{"_id":"source/_posts/CSS/CSS：隐藏元素.md","hash":"e383fecccf4772345a5aecce6f48fdbfb9176ad8","modified":1658479289404},{"_id":"source/_posts/CSS/CSS：margin塌陷和margin合并.md","hash":"ed6c9cc1972b32106f8f4b2ccb1a2ff55236eb64","modified":1658478855388},{"_id":"source/_posts/Cocos/Cocos Creator踩坑记.md","hash":"24ae1d6f274b46717068ece494a4c31c95a7e630","modified":1658480589558},{"_id":"source/_posts/Cocos/Cocos：Cocos接入react组件.md","hash":"cd464cbd209c6334bf7363e4663b01cdbc8f8df5","modified":1658480603547},{"_id":"source/_posts/Cocos/Cocos：事件机制.md","hash":"f1b3191f2a6da1fdcc97db6a7b666b01ec403150","modified":1658480598545},{"_id":"source/_posts/Cocos/Cocos：生命周期.md","hash":"c6d4944d9a85a4e443ff57a2105aca2b8fd4f2f6","modified":1658480594698},{"_id":"source/_posts/Cocos/Cocos：计时器.md","hash":"049dfd357109c67e4d1ffad57770236e05fafa30","modified":1658480580166},{"_id":"source/_posts/CSS/CSS：stylelint.md","hash":"0b505ca889a494354b928d21956e191348ff10c5","modified":1658479405571},{"_id":"source/_posts/ES6/ES6：apply、call和bind.md","hash":"99b1ab16ba607ce1a4367b9b95e15eff95f2b3f7","modified":1658479456069},{"_id":"source/_posts/ES6/ES6：let和const.md","hash":"c597fc2a6aebf8237f7dc84061789bfc752a7bdc","modified":1658479466196},{"_id":"source/_posts/ES6/ES6：promise.md","hash":"73626071eca45284b02b8ec75bffbac3c1ef8e7a","modified":1658479447693},{"_id":"source/_posts/ES6/ES6：箭头函数.md","hash":"dd368904b6fcbddae3ba724a90e866582e1364ac","modified":1658479416118},{"_id":"source/_posts/Git/Git：Git使用.md","hash":"c01cf8471e9d6460610df4c973811b4afd76a6a4","modified":1658480765515},{"_id":"source/_posts/Git/Git：git fetch和git pull.md","hash":"39461155e96c01b10e7951c911cb83be7ff83773","modified":1658480780930},{"_id":"source/_posts/Git/Git：关于回退版本的一些小技巧.md","hash":"3cb16f0e2910afdf5e65ef90690fedbb8e3be2bb","modified":1658480720245},{"_id":"source/_posts/Git/Git：分支管理之合并.md","hash":"3cfa54960721ff7bde031130a58af4c52e21550a","modified":1658480712358},{"_id":"source/_posts/Git/Git：将在master分支上做的修改提交到分支.md","hash":"62665fbd04cae5c81b9aed4e80c6a6312a61997d","modified":1658480801459},{"_id":"source/_posts/Git/Git：git stash.md","hash":"cc0c50e41a8ceebbe027f7c98d5e706e52e34143","modified":1658480770739},{"_id":"source/_posts/Git/Git：添加到远程github仓库的一个错误.md","hash":"e092e4cd328ceb441d9e17986ca3a8f9e02badc7","modified":1658480794077},{"_id":"source/_posts/Git/Git：git reset和git revert.md","hash":"2fbc3dc9e8ac88dbd381bc24a432f2613cf4d248","modified":1658480776109},{"_id":"source/_posts/Git/Git：查看克隆下来的代码的信息.md","hash":"efaad38cf4f5c55b295f506b599f5f3f473b15bf","modified":1658480705129},{"_id":"source/_posts/Git/npm：更换源.md","hash":"1c7ae7b45df21ffbbc44fbbb2935c7476e777214","modified":1658479945560},{"_id":"source/_posts/Git/Git：一些常用的命令.md","hash":"29d09964a21950174238859696848818191af8aa","modified":1658480789411},{"_id":"source/_posts/JS高级程序设计/DOM.md","hash":"f779af75bac78ca21060afefa58a19ffc90264f2","modified":1658480114067},{"_id":"source/_posts/JS高级程序设计/JSON与Ajax.md","hash":"38dac23d68129e3821df714f268e74c847bf7c0f","modified":1658480116658},{"_id":"source/_posts/JS高级程序设计/事件.md","hash":"3e4fd418648b6ab295eac38a2acd10a6563992ce","modified":1658480108464},{"_id":"source/_posts/JS高级程序设计/函数表达式.md","hash":"5f95ebdaf3b582c48acc02849881019362bd9108","modified":1658480103140},{"_id":"source/_posts/JS高级程序设计/引用类型.md","hash":"2211a625f29eb4d14be55e42e95162c66153e65e","modified":1658480147890},{"_id":"source/_posts/JS高级程序设计/面向对象的程序设计.md","hash":"fde25eeef773e258a1f7d452bbd6280255593cd1","modified":1658480133512},{"_id":"source/_posts/Git/npm：install 出错.md","hash":"582c61747e0c1bd19e5d0e8719750276f3ec7e46","modified":1658479980648},{"_id":"source/_posts/JS/JS：==和===.md","hash":"404f37ba85e257c613cfe1e207e33cb6779e6fcb","modified":1658483053832},{"_id":"source/_posts/JS/JS：AJAX.md","hash":"da03055799ecc9061016e305d326e3a4629b80d5","modified":1658483948972},{"_id":"source/_posts/Git/npm：清理缓存.md","hash":"2439ef18c7ad21c2a29393820bfb66ff9d25b963","modified":1658479967722},{"_id":"source/_posts/JS/JS：new一个函数发生了什么.md","hash":"92d3ad8989da28445f094091067ecfbec344170f","modified":1658484029611},{"_id":"source/_posts/JS/JS：__proto__和prototype.md","hash":"750024847ab793e23302fd4ec83b797765101fe5","modified":1658483058089},{"_id":"source/_posts/JS/JS：this指向.md","hash":"36667b09f730c34b67fc93fcdac2c3e2ef3d336b","modified":1658484047989},{"_id":"source/_posts/JS/JS：一些关于date的获取方法.md","hash":"8593acb5e8f842af72b1ff624a3625d649080db3","modified":1658483859017},{"_id":"source/_posts/JS/JS：不同类型之间的比较与运算.md","hash":"4c304f73a8961bfa39e36ac2129682aa7da3a46a","modified":1658483074119},{"_id":"source/_posts/JS/JS：Math的常用方法.md","hash":"93d9379175631f6fba1629a542138ec017e00046","modified":1658483971341},{"_id":"source/_posts/JS/JS：setTimeout和setInterval.md","hash":"325b175840264ff2709e6349591912c4bbee3e99","modified":1658484032597},{"_id":"source/_posts/JS/JS：事件委托.md","hash":"aba21141574a21d5cacb7ab49613e1f7dd039e90","modified":1658483504627},{"_id":"source/_posts/JS/JS：MJS.md","hash":"3c6ba77014d270549d74a96c55e590326643bbaf","modified":1658484326491},{"_id":"source/_posts/JS/JS：作用域.md","hash":"9fb299128f998cb60aab1b9c9f79034ad5ceffac","modified":1658483908522},{"_id":"source/_posts/JS/JS：关于闭包.md","hash":"4e911274ab6a1bd65375f15a090a7adc1bbbba47","modified":1658483223590},{"_id":"source/_posts/JS/JS：事件模型.md","hash":"ccb0d774d324c074694eccd2616dee564d0f96be","modified":1658483491957},{"_id":"source/_posts/JS/JS：为什么Array.forEach无法跳出循环.md","hash":"60182ce47eea344a3976eef3b36d0ed1355dacd8","modified":1658483786891},{"_id":"source/_posts/JS/JS：事件循环机制Event Loop.md","hash":"491f27b50cf65e968d12de55ffe719d828fc67e0","modified":1658483535851},{"_id":"source/_posts/JS/JS：判断一个空对象或空数组.md","hash":"191aa7a4dd293752889fe2afc9dd00766a4b97e0","modified":1658483317036},{"_id":"source/_posts/JS/JS：发布-订阅和观察者.md","hash":"7c9daad839f5757ec62b6d380f9d3cafa40ca97b","modified":1658483188186},{"_id":"source/_posts/JS/JS：图片预加载和懒加载.md","hash":"584a73ab99ab4e1da165708c9cf59e23cbb9c99c","modified":1658483758657},{"_id":"source/_posts/Git/Git：删除远程仓库文件但不删除本地.md","hash":"c2fcc98135fd7e83ecf45a37140394581e60a605","modified":1658480797674},{"_id":"source/_posts/JS/JS：字符串常用的方法.md","hash":"472140fcf0a7a6e973294506862b7a6c5e3bf118","modified":1658483889490},{"_id":"source/_posts/Git/Git：git branch -f.md","hash":"b626d88aa46c565a012dbe829aa07d054a82f1e4","modified":1658480785810},{"_id":"source/_posts/JS/JS：内存泄漏.md","hash":"c4b4f65b375f7c0e65a07cdef2619041a3584af2","modified":1658483297095},{"_id":"source/_posts/JS/JS：数组去重.md","hash":"1eb6e10c46e7ffa058b7708a59bcf3e60abb6fa4","modified":1658483742399},{"_id":"source/_posts/JS/JS：数组和链表.md","hash":"8c4aa8a3bb0a3a24986bfd38bd91824f12f54b6b","modified":1658483600794},{"_id":"source/_posts/JS/JS：基础类型和引用类型.md","hash":"ba88244569ff71747de53dd7df83e3bffd1ef73e","modified":1658483232323},{"_id":"source/_posts/JS/JS：数组的常用方法.md","hash":"7449501943de5b2d72fbb0b29504f43f4af17a68","modified":1658483573754},{"_id":"source/_posts/JS/JS：文件上传.md","hash":"d8355f476d47dbc1ff8490f55880d3ea36eb30fa","modified":1658483806828},{"_id":"source/_posts/JS/JS：时间复杂度.md","hash":"7d673c162318ce532e873fa5b90b3f2ca5296d41","modified":1658483361207},{"_id":"source/_posts/JS/JS：正则表达式.md","hash":"2ea46b0fcb434806e68c0941b64b6d4503fb0ca1","modified":1658483869224},{"_id":"source/_posts/JS/JS：浅拷贝与深拷贝.md","hash":"80b052291db5a090563d00c6ff8d73b737243811","modified":1658483348554},{"_id":"source/_posts/JS/JS：瀑布流布局.md","hash":"8d82219f8faf7d30ce393dfe398d838200e22124","modified":1658483334698},{"_id":"source/_posts/JS/JS：立即执行函数.md","hash":"2df93011124b4e67510d0d63c2418bccbf8d2ed5","modified":1658483286711},{"_id":"source/_posts/JS/JS：数据类型检测方式（typeof和instanceof）.md","hash":"884021fa2a4e4c05ca378cc6c3b3d6fa95d4573f","modified":1658483556815},{"_id":"source/_posts/JS/JS：简化运算.md","hash":"267af2a31867712b41be7d8e011ac95a12bffd07","modified":1658483245971},{"_id":"source/_posts/JS/JS：类数组对象.md","hash":"341b5ceba00606ab097f261a016fdfd96b5f9243","modified":1658483271567},{"_id":"source/_posts/JS/JS：递归和非递归实现中序遍历.md","hash":"be7d7a9bb3d025604cac601cf3e2785b01a9998b","modified":1658483172833},{"_id":"source/_posts/JS/JS：防抖和节流.md","hash":"5161c4453fb84dee257a1867402c60c9cbada027","modified":1658483207359},{"_id":"source/_posts/React/React-Native：开发指南.md","hash":"eab1f5a24fa84282dbb6e08bb665b5996512f8b6","modified":1658481118887},{"_id":"source/_posts/React/React：Antd组件踩坑记.md","hash":"db1e6abc07d2a4555dae5c48ac1b772540d961c3","modified":1658481529290},{"_id":"source/_posts/React/React：React Hooks.md","hash":"8de1b603a12320a5ac11956bc0c876a3af486921","modified":1658481532224},{"_id":"source/_posts/React/React：rematch.md","hash":"4044fe7fb6ff6ab06605fe732c5ab0ee4ef12c28","modified":1658481535423},{"_id":"source/_posts/React/React：useCallback、useMemo、memo.md","hash":"1c74790d9a1394f96536f85f59f42de1793bdbe2","modified":1658481537879},{"_id":"source/_posts/React/React：useLayoutEffect和useEffect的区别.md","hash":"11f9cf1493888deaa3a66cc759ecbe7ff1de6269","modified":1658481540438},{"_id":"source/_posts/React/React：useRef.md","hash":"092970a12631fd4b81fafe9b91c77cce825c94a7","modified":1658481543549},{"_id":"source/_posts/JS/JS：虚拟列表.md","hash":"cbd3b49698d013226e0549033f2e74c5b2d38c78","modified":1658483837328},{"_id":"source/_posts/React/React：一些知识点.md","hash":"ad16117e59517c7d3cbc98ad2806ad2bb56ba511","modified":1658481524816},{"_id":"source/_posts/JS/JS：纯函数.md","hash":"2fb272b0f94c2182686a3f8a90267589f241b95b","modified":1658483142588},{"_id":"source/_posts/React/React：初学React.md","hash":"7f289a276ffcc04caa75b0829164028ddb571d7d","modified":1658481511147},{"_id":"source/_posts/React/React：合成事件机制.md","hash":"54065250fd921704d9bb9a8789cbd31109529b69","modified":1658481179129},{"_id":"source/_posts/React/React：父子组件通信.md","hash":"b3416af20e502d9921c4dda05b7cb13b7fbf8ca5","modified":1658481514142},{"_id":"source/_posts/React/React：生命周期.md","hash":"b76b8b7eb2537b87b8bbdfac99d14830064c57bd","modified":1658481521035},{"_id":"source/_posts/React/React：踩坑记.md","hash":"33ed2cbbeef9166ef15c773e609436797009f2e7","modified":1658481504361},{"_id":"source/_posts/React/React：重定向Redirect.md","hash":"f7a2495edd66e60cc3dc38862c026c60d06a36f7","modified":1658481527021},{"_id":"source/_posts/React/ant-design：Form.list使用.md","hash":"f3c94465e8e8bc3e5bda88c754c51228548a91fb","modified":1658481084503},{"_id":"source/_posts/Vue/Vue+Axios解决文件上传问题.md","hash":"d3860bc6fd537226ec11ed6e9626800b8377617b","modified":1658481618778},{"_id":"source/_posts/Vue/Vue-cli脚手架.md","hash":"c27c0ef7c829311ab690f8b4741a1b5767ceadb7","modified":1658481619663},{"_id":"source/_posts/Vue/Vue：MVVM、MVC、MVP.md","hash":"441b952712a8998391310bcf731b85eae8d92084","modified":1658481617995},{"_id":"source/_posts/Vue/Vue：其他.md","hash":"31898edaddf0d880012af9455bf7010ab1c0b134","modified":1658481613833},{"_id":"source/_posts/Vue/Vue：数据双向绑定原理.md","hash":"5c51490e679617edbac55c0fa98fe1e74212f810","modified":1658481615528},{"_id":"source/_posts/Vue/Vue：生命周期.md","hash":"cd5ac49e6f5b976cf0a05a8972e04e51bd7d698e","modified":1658481614716},{"_id":"source/_posts/React/React：路由跳转.md","hash":"b23a4747ad7d23f584a3968c2d9d672857611322","modified":1658481518723},{"_id":"source/_posts/Vue/Vue：组件间的传值.md","hash":"b7efdda1ea08e76c91432410847b541176d568bd","modified":1658481617167},{"_id":"source/_posts/Vue/Vue：路由原理.md","hash":"5eadd20c113e33a2740a12070cff045c1fb1cfae","modified":1658481612783},{"_id":"source/_posts/其他/Electron进阶：打开新窗口.md","hash":"8792df9db85aac55e229d6d1587abd8ac42be41e","modified":1658476914408},{"_id":"source/_posts/其他/Electron：从零到完成一个桌面应用.md","hash":"f0423e4ee3ecdf295d256f90ba2fad460b39f43f","modified":1658476889533},{"_id":"source/_posts/其他/Electron：结合vue创建桌面应用.md","hash":"9a98d029bfd4504296fd74c98edc9c7e2c8c3d54","modified":1658476903293},{"_id":"source/_posts/Vue/Vue基础知识（一）.md","hash":"641bccbe2cf88e8ffacc5841fdb98c0d6cb8f2a5","modified":1658481610494},{"_id":"source/_posts/Vue/Vue：移动端适配.md","hash":"e1d6c20fd53ce7c7e05a2c371a815b399888b9b6","modified":1658481616345},{"_id":"source/_posts/其他/Hexo+Github 搭建属于自己的博客（基础）.md","hash":"ca2a35c9599940908117037a7afb8c2ada2806a9","modified":1658476779026},{"_id":"source/_posts/其他/Hexo+Github 搭建属于自己的博客（进阶）NexT主题.md","hash":"a432b9d7225ebe80adead505fc3454e30e2bb629","modified":1658476779025},{"_id":"source/_posts/其他/hello-world.md","hash":"a995294208536e887aff592058012aedc844ea36","modified":1658476779025},{"_id":"source/_posts/其他/安全：XSS和CSRF.md","hash":"5e48f4de8998bca4e627ec18a46412e8c3278b7a","modified":1658476767477},{"_id":"source/_posts/其他/安全：cookie和session.md","hash":"dcc56f880546b2624061b5f7469d598291526134","modified":1658476762122},{"_id":"source/_posts/其他/操作系统：进程、线程、程序.md","hash":"6d4206e0a0c5f2dae3b67f059215f8bb7c1be6e1","modified":1658476832238},{"_id":"source/_posts/其他/数据类型：json和xml.md","hash":"2c82290dd07a8b80436cf9d35208db8dbf69a04e","modified":1658476869122},{"_id":"source/_posts/其他/数据结构：树的深度遍历和广度遍历.md","hash":"3a5e6fb3a1ec82a76794820641dd8f088768ba3c","modified":1658476847133},{"_id":"source/_posts/前端/BOM和DOM.md","hash":"dbecf77dc35b486e096c29b5c01335bd4d70444e","modified":1658484664319},{"_id":"source/_posts/前端/WebSocket.md","hash":"2a9aedf04c9eea4327138a4d370a87fa13e5a943","modified":1658484689619},{"_id":"source/_posts/前端/canvas.md","hash":"bc5ba376569b959c6fc22568e500f906cadd6386","modified":1658484688785},{"_id":"source/_posts/前端/h5和css3的新特性.md","hash":"1138982a40933b60c6f8c8800329880d8c325fa9","modified":1658484685497},{"_id":"source/_posts/前端/web页面性能优化.md","hash":"d89092dc52a96ce3823b2bf9a63e99ab50e4c803","modified":1658484684572},{"_id":"source/_posts/前端/vite.md","hash":"5559393aec5d7a97afc8c11de28316f3016230fa","modified":1658484691253},{"_id":"source/_posts/前端/E2E测试.md","hash":"277e44f92df79b55326f32161663c2d54e2eca9b","modified":1658484744217},{"_id":"source/_posts/前端/一些调试小技巧.md","hash":"388397641d618394e816e9c5485db5e152c49052","modified":1658484686330},{"_id":"source/_posts/前端/前端SEO（搜索引擎优化）和语义化.md","hash":"0caa5f72b13aef3e01c7bae09f746b29cc9f665c","modified":1658484683583},{"_id":"source/_posts/前端/前端学习路线规划.md","hash":"b78df81e6384d7f10deaaab361c540789daae01e","modified":1658484729287},{"_id":"source/_posts/前端/whistle插件：whistle.script.md","hash":"ebf14fcd8dd21f1d9b3d3adfdce8ca3024452e65","modified":1658484697131},{"_id":"source/_posts/前端/回流（Reflow）和重绘（Repaint）.md","hash":"1b36ac73f068d2e134ffa94b012edf9caaf9e7c7","modified":1658484690419},{"_id":"source/_posts/前端/本地存储方式.md","hash":"d0ce2f3b6b8184072851ff569eafea092a3d3371","modified":1658484661094},{"_id":"source/_posts/前端/浏览器兼容问题.md","hash":"3eb2a1e565022b02d8c186863a3a9ce3b09487da","modified":1658484692881},{"_id":"source/_posts/前端/whistle：利用whistle mock 数据.md","hash":"f1ec7cce15a3b05dd05c9b33269167678b71219d","modified":1658484682563},{"_id":"source/_posts/前端/浏览器本地缓存.md","hash":"d22143b0ee748951752a43a563294acb534f616e","modified":1658484692052},{"_id":"source/_posts/前端/whistle：利用whistle操作WebSocket请求.md","hash":"f251add00f2cc790481e1aa58212771cc9ca0330","modified":1658484695380},{"_id":"source/_posts/前端/浏览器渲染机制.md","hash":"1d2caa86edec20b34b85101cf6d5890c57502def","modified":1658484687198},{"_id":"source/_posts/前端/渐进增强和优雅降级.md","hash":"f8b109fc5a3d5aaf0b018c363fe099644e95baa2","modified":1658484694481},{"_id":"source/_posts/前端/浏览器内核、渲染引擎、JS引擎.md","hash":"8f1ce8a6743dcbda6ba4efd8ae3747e9020e820c","modified":1658484681432},{"_id":"source/_posts/前端/虚拟dom.md","hash":"5dd05f7377c97da9f5b6f7f2f0f78d67db3e3a41","modified":1658484662969},{"_id":"source/_posts/前端/行内元素、块元素、行内块元素.md","hash":"01e1e0fa1b8906e8faf3f44f64a970ef7eebc1d3","modified":1658484688001},{"_id":"source/_posts/前端/页面渲染过程（输入一个url）.md","hash":"c059d694ed6c8e950c68db4c57de2cb0a0fc6235","modified":1658484736723},{"_id":"source/_posts/前端/移动端调试——Xcode.md","hash":"4669c25879bafc7d3d9825bd9c03a988dd9f6ecf","modified":1658484696282},{"_id":"source/_posts/算法/C：冒泡法和选择法.md","hash":"4d4e69015843f5f4e7153d69e41886f448ad2f51","modified":1658478430377},{"_id":"source/_posts/算法/LeetCode算法题（一）.md","hash":"5195ad7240f75b407f9beea46db9c53b492a60dd","modified":1658478430381},{"_id":"source/_posts/前端/调试神器whistle的安装使用.md","hash":"b76702f4dcb0773ab91049dc66d907a702b5035c","modified":1658484693635},{"_id":"source/_posts/算法/LeetCode：有效的括号.md","hash":"653df24512f2196d8f1e2132b1ecb76255198fb5","modified":1658478430377},{"_id":"source/_posts/算法/LeetCode：罗马数字转整数.md","hash":"723ced93003aaeace1449aaf2cd861a04436a661","modified":1658478430406},{"_id":"source/_posts/算法/LeetCode：验证回文串.md","hash":"4c9a6e268e1aa74a51ccbe557a1fc618d0ba2ae8","modified":1658478430406},{"_id":"source/_posts/算法/各种算法（一）.md","hash":"43e475bf853cebf87bd2c80aa09f6d29bbc67b1b","modified":1658478430406},{"_id":"source/_posts/算法/各种算法（三）.md","hash":"eaeaa968eb411287f5e442fefa3ccb294dbab765","modified":1658478430381},{"_id":"source/_posts/算法/各种算法（二）.md","hash":"3d6e425d7729d92bb6a7afba311f02c1489ef456","modified":1658478430377},{"_id":"source/_posts/算法/算法：二分查找.md","hash":"e5c6edd08b796b06113da9d82bb119eeb0001060","modified":1658478430381},{"_id":"source/_posts/算法/算法：二进制转十进制.md","hash":"b4dbe1e0927f0af8e9a9d434081959a6eba16a40","modified":1658478430406},{"_id":"source/_posts/算法/算法：多层数组转化为一层.md","hash":"091f4cbedf2a765e9e03981ac4498df05c9b3827","modified":1658478430406},{"_id":"source/_posts/算法/算法：如何找出单链表中的倒数第k个元素.md","hash":"bd8a94489082adcda02762a3c0b93a7c04167bf8","modified":1658478430406},{"_id":"source/_posts/算法/算法：快速排序.md","hash":"37cad1accc7bea0105749d26f69a8f0aee4d05bd","modified":1658478430406},{"_id":"source/_posts/算法/算法：把十六进制的ip地址转换为十进制的.md","hash":"b622b4df8bf9f37d127e478edc123f4a4ccfef3b","modified":1658478430405},{"_id":"source/_posts/算法/LeetCode：阶乘后的零.md","hash":"b627d73c8ff9791858bb4153d7a022f7af501665","modified":1658478430573},{"_id":"source/_posts/算法/算法：青蛙跳台阶和斐波那契数列.md","hash":"426432627d8aa25557751b07db098b316390646f","modified":1658478430424},{"_id":"source/_posts/算法/算法：实现给数字添加千分位符的方法.md","hash":"dd4e17ff3587f7fd041375713858c7db38b2849b","modified":1658483438865},{"_id":"source/_posts/计网/计网：TCP.md","hash":"4272939ad560108cb862d8fd520d1a599fd9579d","modified":1658476742298},{"_id":"source/_posts/算法/算法：n数之和.md","hash":"f33893f9e2b7324c9cf8667c8b91dce2cca2217a","modified":1658478430406},{"_id":"source/_posts/计网/计网：cdn.md","hash":"5bec334bbf5f6ee1a218a4fd8a1d8f721ba7f685","modified":1658476708552},{"_id":"source/_posts/计网/计网：http和https.md","hash":"9a05ab0d0079083165cc05fd9140900f8b23c117","modified":1658476552641},{"_id":"source/_posts/计网/计网：http报文结构.md","hash":"9ef0a6b4663eb796d0d1112304918958e4598e4d","modified":1658476669793},{"_id":"source/_posts/计网/计网：DNS查询过程.md","hash":"6519695a7f0b8e48ca9ff7fbf36e5ae749e0892a","modified":1658476609117},{"_id":"source/_posts/计网/计网：http的header字段.md","hash":"4734acd93c9b67cd9af806011323ec362834b963","modified":1658476656134},{"_id":"source/_posts/计网/计网：计算机网络体系结构.md","hash":"8ba9071e3f2523b68d6a675ca052a5f83a8405c4","modified":1658476697658},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524821066000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1524820572000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1524820572000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1524820572000},{"_id":"themes/next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1524820572000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1524820572000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1524820572000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1524820572000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1524820572000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1524820572000},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1524820572000},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1524820572000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1524820572000},{"_id":"themes/next/.git/logs/HEAD","hash":"32054c052436333fa4adc3a9fd1abb300cf10580","modified":1524821066000},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1524821066000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1524821066000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1524821066000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1524821066000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1524821066000},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1524821066000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1524821066000},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1524821066000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1524821066000},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1524821066000},{"_id":"themes/next/source/js/.DS_Store","hash":"a2e2b669823c1861709ca56e684ad32db155ae98","modified":1635735725733},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1524821066000},{"_id":"themes/next/source/images/alipay.jpg","hash":"fcb6d9fa1fd854704c4d05f08075dcf0d7be5794","modified":1553673804000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1524821066000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1524821066000},{"_id":"themes/next/source/images/avatar.jpg","hash":"d9e60786d78e4aef645e074ca96e6129213b12df","modified":1553673584000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1524821066000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1524821066000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1524821066000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1524821066000},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1524821066000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1524821066000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1524821066000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1524821066000},{"_id":"themes/next/source/images/favicon.ico","hash":"d9e60786d78e4aef645e074ca96e6129213b12df","modified":1553673622000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1524821066000},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1524821066000},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1524821066000},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1524821066000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1524821066000},{"_id":"themes/next/source/images/wechat-qcode.jpg","hash":"7832c859090367020320581690625c021d428b56","modified":1524832808000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1524821066000},{"_id":"themes/next/source/images/wechatpay.jpg","hash":"04437df4744747f13578f4aa5fe8dda336dfa98b","modified":1524832666000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1524821066000},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1524821066000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1524821066000},{"_id":"themes/next/layout/_macro/passage-end-tag.swig","hash":"396feef13c2f0a2241d70b28a304e6583d3d32f8","modified":1525441032000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1524821066000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1553677364000},{"_id":"themes/next/layout/_macro/post.swig","hash":"c96b1734c9f762b682302227fec158354b065aca","modified":1525441168000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1524821066000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9c7343fd470e0943ebd75f227a083a980816290b","modified":1524821066000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1524821066000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1524821066000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"b07155fed9c90367f0487ec81a1d534a077a42fd","modified":1525441564000},{"_id":"themes/next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1524821066000},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1524821066000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1524821066000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1524821066000},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1524821066000},{"_id":"themes/next/layout/_third-party/.DS_Store","hash":"9313b8f35704d6a0c2c96138cd265d4b4fd86725","modified":1635735740848},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1524821066000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1524821066000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1524821066000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1524821066000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1524821066000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1524821066000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1524821066000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1524821066000},{"_id":"themes/next/layout/_scripts/.DS_Store","hash":"eb0656dbc0003237354a8880ff3583a7978d052e","modified":1635735747249},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1524821066000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1524821066000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524821066000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524821066000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524821066000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524821066000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524821066000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524821066000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524821066000},{"_id":"themes/next/.git/objects/fa/97eb73d5e4dee0f61dc04676321802f13de754","hash":"feac9de689be7f8687f6b1122430b6eb0848ba8b","modified":1635736482825},{"_id":"themes/next/.git/objects/62/0b1e829eb8b6fd72426f3009866b79d8ee2e7b","hash":"f4b4e5001d6fa2046e1fb648056389ef28c8a7f5","modified":1635736482821},{"_id":"themes/next/.git/objects/d6/0ac946d7b9c5ec7bf8a97f0b52cc2b7b848207","hash":"da1f2f115796cb4bce46f20a197b4280cdd436bb","modified":1635736482823},{"_id":"themes/next/.git/objects/a2/02b7efed7817b2a729d64f453994c720d3332b","hash":"2437ede73ad98f191710572f57418bfb0c5142c2","modified":1635736482822},{"_id":"themes/next/.git/refs/heads/master","hash":"7999da428ebb87e5a2b27315d8d5123c1ccdfaa5","modified":1524821066000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1524821066000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1524821066000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1524821066000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1524821066000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1524821066000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1524821066000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1524821066000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1524821066000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1524821066000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1524821066000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1524821066000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1524821066000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1524821066000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1524821066000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1524821066000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1524821066000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1524821066000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1524821066000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1524821066000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1524821066000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1524821066000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1524821066000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1524821066000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1524821066000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1524821066000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1524821066000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1524821066000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1524821066000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1524821066000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1524821066000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1524821066000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1524821066000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1524821066000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1524821066000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1524821066000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1524821066000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1524821066000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1524821066000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1524821066000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1524821066000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1524821066000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1524821066000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1524821066000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1524821066000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1524821066000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1524821066000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1524821066000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1524821066000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1524821066000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1524821066000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1524821066000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1524821066000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1524821066000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1524821066000},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1524821066000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1524821066000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1524821066000},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1524821066000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1524821066000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1524821066000},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1524821066000},{"_id":"themes/next/source/js/src/love.js","hash":"e8e69e9107c0d32d77094915ec8f2c21c80ad4dd","modified":1524831410000},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1524821066000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1524821066000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1524821066000},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1524821066000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1524821066000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1524821066000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1524821066000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1524821066000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1524821066000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1524821066000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1524821066000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1524821066000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1524821066000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1524821066000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1524821066000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1524821066000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1524821066000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1524821066000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1524821066000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1524821066000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1524821066000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1524821066000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1524821066000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1524821066000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1524821066000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1524821066000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1524821066000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1524821066000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1524821066000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1524821066000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1524821066000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1524821066000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1524821066000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1524821066000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1524821066000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1524821066000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1524821066000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1524821066000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1524821066000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1524821066000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1524821066000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1524821066000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1524821066000},{"_id":"themes/next/.git/refs/remotes/origin/master","hash":"3c959678e3fe6e51e935526c19927d21443a3be3","modified":1635736482836},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"32054c052436333fa4adc3a9fd1abb300cf10580","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1524821066000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1524821066000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1524821066000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1524821066000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1524821066000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1524821066000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1524821066000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1524821066000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1524821066000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1524821066000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1524821066000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1524821066000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1524821066000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1524821066000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1524821066000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1524821066000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1524821066000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1524821066000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1524821066000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1524821066000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1524821066000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1524821066000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1524821066000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1524821066000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1524821066000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1524821066000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1524821066000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1524821066000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1524821066000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1524821066000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1524821066000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1524821066000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1524821066000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1524821066000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1524821066000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1524821066000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1524821066000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1524821066000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1524821066000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1524821066000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1524821066000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1524821066000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1524821066000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1524821066000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1524821066000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1524821066000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1524821066000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1524821066000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1524821066000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1524821066000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1524821066000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1524821066000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1524821066000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1524821066000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"32054c052436333fa4adc3a9fd1abb300cf10580","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1524821066000},{"_id":"themes/next/.git/logs/refs/remotes/origin/master","hash":"812301045c56481807c18e63fb6c5d420632299c","modified":1635736482837},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1524821066000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1524821066000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1524821066000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1524821066000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1524821066000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1524821066000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1524821066000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1524821066000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1524821066000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1524821066000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1524821066000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1524821066000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1524821066000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1524821066000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1524821066000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1524821066000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1524821066000},{"_id":"themes/next/.git/objects/pack/pack-d258fa1f2c5e7883ae4ad56137897435c083f34c.idx","hash":"3bf4e7a7818532e249eb3076a1cf03e01e1c58ae","modified":1524821066000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1524821066000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1524821066000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1524821066000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1524821066000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1524821066000},{"_id":"themes/next/.git/objects/pack/pack-d258fa1f2c5e7883ae4ad56137897435c083f34c.pack","hash":"942c4f76bc16782c1ca1f7d358236acb6111014c","modified":1524821066000},{"_id":"source/_posts/SDK/SDK：SDK框架搭建.md","hash":"9ed0ea3ccdf5d9da264fda190c97b39b4c0f1f8d","modified":1658485230431},{"_id":"source/_posts/SDK/SDK：反作弊SDK实现.md","hash":"36c33995173da5177d8d85f52d6194820305a828","modified":1658485269619},{"_id":"public/search.xml","hash":"190ab2108b25fcf8980732f99cdbf6f4763f6750","modified":1658485654612},{"_id":"public/categories/index.html","hash":"57c0a9e6faf8764fd0d43f1d313059b2ff61314c","modified":1658485656207},{"_id":"public/about/index.html","hash":"7fa237bcfde45b294c957af3767e306d9ee6f6e7","modified":1658485656222},{"_id":"public/tags/index.html","hash":"70d85e14c174ed361c523842133862bd09a5797a","modified":1658485656222},{"_id":"public/2020/05/14/其他/安全：XSS和CSRF/index.html","hash":"0c5c7d522b4e66eec092f8171ed0f8a7433b117c","modified":1658485656222},{"_id":"public/2020/05/14/其他/安全：cookie和session/index.html","hash":"ed4c0526af171e193bf3017c42c92440e93b8a4f","modified":1658485656222},{"_id":"public/2020/05/14/前端/web页面性能优化/index.html","hash":"0fadf61a44e4fa94abada8f5739d7170b4444268","modified":1658485656222},{"_id":"public/2020/05/14/前端/浏览器本地缓存/index.html","hash":"67d2e9ca00e723ab47315d8121291a8eeb48b302","modified":1658485656222},{"_id":"public/2020/05/14/前端/浏览器渲染机制/index.html","hash":"6aa3f22366f4e6d1845a59fd4813fa72b92368cb","modified":1658485656222},{"_id":"public/2020/05/14/计网/计网：TCP/index.html","hash":"6c8d146abcd74a5b1c3ae36285e9b0006a2eb260","modified":1658485656222},{"_id":"public/2020/05/14/计网/计网：http和https/index.html","hash":"bb4017e14e2838ef44c81b55f93ee49fea682f54","modified":1658485656223},{"_id":"public/2020/03/17/算法/算法：青蛙跳台阶和斐波那契数列/index.html","hash":"bdb72f7b0e1b24ced8b37e564565b7a35b3bea0f","modified":1658485656223},{"_id":"public/2020/02/23/计网/计网：http报文结构/index.html","hash":"f4d1e7ebec7d95e0c801d10c70cb1ac47cbfbd20","modified":1658485656223},{"_id":"public/2019/11/16/计网/计网：cdn/index.html","hash":"0cd76e15ee0dbc56123ef5a59e42ad97e274fe4f","modified":1658485656223},{"_id":"public/2019/04/22/计网/计网：DNS查询过程/index.html","hash":"14ff92a1ec9a8fb5b4d1b8a119b545226062f86b","modified":1658485656223},{"_id":"public/2019/04/12/计网/计网：http的header字段/index.html","hash":"eaae9d7cd637b83c7ef1863bde15719d3d78dfd3","modified":1658485656223},{"_id":"public/2019/04/12/计网/计网：计算机网络体系结构/index.html","hash":"e264e418a3766a9ac9e540c80c8573a36cf191e9","modified":1658485656223},{"_id":"public/2018/05/04/其他/Hexo+Github 搭建属于自己的博客（进阶）NexT主题/index.html","hash":"d7421209906c844b12dcace5bec979ff9b4e24ac","modified":1658485656223},{"_id":"public/2018/05/03/其他/Hexo+Github 搭建属于自己的博客（基础）/index.html","hash":"816ed58cde63a765b3c8a337fcbdd758c7f94e5b","modified":1658485656223},{"_id":"public/2018/05/03/其他/hello-world/index.html","hash":"25016a816a9d1648a84a7d68f0e570da66012bd2","modified":1658485656223},{"_id":"public/archives/index.html","hash":"899c7b5161d59dcce1c2499cceab62d8daac3371","modified":1658485656223},{"_id":"public/archives/page/2/index.html","hash":"3429f5fb513622d36f930e62dc8edf5e9987203a","modified":1658485656223},{"_id":"public/archives/page/3/index.html","hash":"b18fca30c8517a22a13b3858c93133d1fbeef998","modified":1658485656223},{"_id":"public/archives/page/4/index.html","hash":"b7693bddf3301b16a499cdfd3add27ef451cb135","modified":1658485656223},{"_id":"public/archives/page/5/index.html","hash":"e10528c36849191b9d16db67d81b3fbee727e089","modified":1658485656224},{"_id":"public/archives/page/6/index.html","hash":"89ffd49f7f46882f626f9827f6fa090a0929582a","modified":1658485656224},{"_id":"public/archives/page/7/index.html","hash":"ffebff62256a28120ebe706acbf5a9bf650870ab","modified":1658485656224},{"_id":"public/archives/2018/index.html","hash":"dc59275fc0f520fb4d46a009504fb11e8d4b4c69","modified":1658485656224},{"_id":"public/archives/2018/05/index.html","hash":"f788a1e1d8fc60516e178e8eef2c99f8efb16f43","modified":1658485656224},{"_id":"public/archives/2019/index.html","hash":"86ec0c10f9f7c16b5bd11938827524f5865cbc81","modified":1658485656224},{"_id":"public/archives/2019/page/2/index.html","hash":"5878a083f3e2ea9627cc2e3e24ebaf84d2cea7bd","modified":1658485656224},{"_id":"public/archives/2019/page/3/index.html","hash":"44a1f56cb8a8d2623f4078b6efee9f2bce84acea","modified":1658485656224},{"_id":"public/archives/2019/03/index.html","hash":"4780d2dfc8cc12682f2fff21f4a9d50e68580c0e","modified":1658485656224},{"_id":"public/archives/2019/04/index.html","hash":"e99e0eaacb305feca6541554a91f7c6d7b688dab","modified":1658485656224},{"_id":"public/archives/2019/04/page/2/index.html","hash":"22b0478764a80bfb5168ef1917c667d9df79ffb9","modified":1658485656224},{"_id":"public/archives/2019/11/index.html","hash":"7c18fe43b171ef9244dbe789ec2a9d70f2b5b5f3","modified":1658485656224},{"_id":"public/archives/2020/index.html","hash":"b2d165c21ce4d53624d2b8fbfd52ce863cc6e40e","modified":1658485656224},{"_id":"public/archives/2020/page/2/index.html","hash":"f2e01ebae087ad25f6e8053626009b06989f997b","modified":1658485656224},{"_id":"public/archives/2020/02/index.html","hash":"ee5d2d313483a56fa7a7b2ff9680511c0386a3e1","modified":1658485656224},{"_id":"public/archives/2020/03/index.html","hash":"4fee582cf66f4fef49f764a0c170ccc183ea58b0","modified":1658485656224},{"_id":"public/archives/2020/05/index.html","hash":"fc7571e408b469e45d8aa1f3550e7f633fb44837","modified":1658485656224},{"_id":"public/archives/2022/index.html","hash":"62e6f6dd625459159aee6ba7910435bf3142fcc1","modified":1658485656224},{"_id":"public/archives/2022/04/index.html","hash":"57250a59c62f9a6a7123d7bb814916f04670eaea","modified":1658485656224},{"_id":"public/categories/Electron/index.html","hash":"bf610083326608b633a4695092c58aa428bf265c","modified":1658485656224},{"_id":"public/categories/博客搭建/index.html","hash":"0cc31d65663a6a7c1f4efb23701db75bc76cc3c1","modified":1658485656224},{"_id":"public/categories/安全/index.html","hash":"c7075fe7a3860cfb442123e35eef154b04e04edd","modified":1658485656224},{"_id":"public/categories/demo/index.html","hash":"193c351b577bd4072d1a778490cbd83e35aaae0f","modified":1658485656224},{"_id":"public/categories/操作系统/index.html","hash":"6083ae4d7d7a663ac48f455a790bb04f54aeccf4","modified":1658485656224},{"_id":"public/categories/数据结构/index.html","hash":"c938266d49c5f9af46981135223584c2715dfed5","modified":1658485656225},{"_id":"public/categories/数据类型/index.html","hash":"f67a0265812a07d8aa82b2bd6c18347fa57cb40f","modified":1658485656225},{"_id":"public/categories/前端/index.html","hash":"54dc50bf3802a5f8b8d9c0e21e016fd4735e2ffd","modified":1658485656225},{"_id":"public/categories/前端/page/2/index.html","hash":"fc53799b4be3c91fa04b0f1dfbbe17f83040f7a2","modified":1658485656225},{"_id":"public/categories/算法/index.html","hash":"fbd59c7ab617335bf405b127d9b62196dfe64a64","modified":1658485656225},{"_id":"public/categories/算法/page/2/index.html","hash":"dc6859e586331f3542b0043afdbbf8eaebdb5c3d","modified":1658485656225},{"_id":"public/categories/计网/index.html","hash":"2f25ffe132346fb10c33e622612c8f06293e8fea","modified":1658485656225},{"_id":"public/index.html","hash":"9bd7e571b7744744a6bc7f6c86ac34a75bea4484","modified":1658485656225},{"_id":"public/page/2/index.html","hash":"d1115156ce27e460cc25b854fe5517fe07f68f52","modified":1658485656225},{"_id":"public/page/3/index.html","hash":"e6dd0eaf88b7a0e06ebfbfe25daec5a1a16302e6","modified":1658485656225},{"_id":"public/page/4/index.html","hash":"e75496f9d37231ce134624cf993397ec84c02f6b","modified":1658485656225},{"_id":"public/page/5/index.html","hash":"43d72a04d34c137171ec5b5c687b3dd7ddfe505f","modified":1658485656225},{"_id":"public/page/6/index.html","hash":"7e75d60c217f55854fc98912a0d4fac60ee40935","modified":1658485656225},{"_id":"public/page/7/index.html","hash":"996b8effab11b738000d486f3d96456d75ce418c","modified":1658485656225},{"_id":"public/tags/Electron/index.html","hash":"977c8e86e1e064a33c587ee8599fe9d75b6e5013","modified":1658485656225},{"_id":"public/tags/博客搭建/index.html","hash":"9aa9520e8509096ac3ac16c985b89f6ffc236589","modified":1658485656225},{"_id":"public/tags/安全/index.html","hash":"c39041069cf662358607bbe6e33752cab441d7d2","modified":1658485656225},{"_id":"public/tags/demo/index.html","hash":"3a0fe9f85ccb11f9b3c82af0140a43efef031904","modified":1658485656225},{"_id":"public/tags/操作系统/index.html","hash":"202ec99f74048db1cff049bed27f3149e9e1ea6e","modified":1658485656225},{"_id":"public/tags/数据结构/index.html","hash":"ffa4fc923e6f14ea72e97fa572c47705517cfc9d","modified":1658485656226},{"_id":"public/tags/数据类型/index.html","hash":"353b53d9c2aaf5b6a936a7c7f6b866c8b78dd4ed","modified":1658485656226},{"_id":"public/tags/前端/index.html","hash":"35d6f2fb66d51d8c19731ec94cd437e4433f6855","modified":1658485656226},{"_id":"public/tags/前端/page/2/index.html","hash":"48ec23b32ee6a4bbdb4f73bedd30c4beef65b068","modified":1658485656226},{"_id":"public/tags/算法/index.html","hash":"64599d5efd1640c440049fcd20950e9759848fa2","modified":1658485656226},{"_id":"public/tags/算法/page/2/index.html","hash":"542f6efa02a26b5170f684255afbb704d35a2270","modified":1658485656226},{"_id":"public/tags/计网/index.html","hash":"4474487264c61a67bee70f04da94c1734a324109","modified":1658485656226},{"_id":"public/2022/04/26/前端/vite/index.html","hash":"a7109fa993ec7aed6aa8f7909826d263532f266d","modified":1658485656232},{"_id":"public/2022/04/26/前端/whistle：利用whistle操作WebSocket请求/index.html","hash":"8fe27633a05326377c24ae7bb69023437ca13e7f","modified":1658485656232},{"_id":"public/2022/04/26/前端/移动端调试——Xcode/index.html","hash":"3a2374badd75e09a7993cbd1f642e39541851bb8","modified":1658485656232},{"_id":"public/2022/02/15/前端/E2E测试/index.html","hash":"fb09890f818c5f031adee37998452a7bf41aa7db","modified":1658485656232},{"_id":"public/2021/02/20/前端/whistle插件：whistle.script/index.html","hash":"27938be79c27d529518f10981202c943c2d9c796","modified":1658485656232},{"_id":"public/2021/02/20/前端/浏览器内核、渲染引擎、JS引擎/index.html","hash":"45130693584b8f94d99b50dfd4798ecf5819efd7","modified":1658485656232},{"_id":"public/2021/02/20/前端/调试神器whistle的安装使用/index.html","hash":"0b37e0e01c51cd6bd78d3f54a013100caf8dc2b1","modified":1658485656232},{"_id":"public/2020/10/16/算法/LeetCode：阶乘后的零/index.html","hash":"2d115dfa7e6dd81cbeb05bd50a257a09853c3164","modified":1658485656232},{"_id":"public/2020/08/10/算法/算法：n数之和/index.html","hash":"178d87d8447b10eade172b53af52028f732ff437","modified":1658485656232},{"_id":"public/2020/07/17/前端/whistle：利用whistle mock 数据/index.html","hash":"8ab5f9c51f5e569b901e8cc325e8b44273eedd06","modified":1658485656233},{"_id":"public/2020/02/23/前端/前端SEO（搜索引擎优化）和语义化/index.html","hash":"15441ccea16413aecc0d5101bda3624198fcf285","modified":1658485656233},{"_id":"public/2020/02/23/算法/算法：二进制转十进制/index.html","hash":"82b5038b732196a0e092106282bc8b19f7a23d79","modified":1658485656233},{"_id":"public/2020/02/22/前端/行内元素、块元素、行内块元素/index.html","hash":"f933b1794fb246143d8233957c473d9f6e382f82","modified":1658485656233},{"_id":"public/2020/02/15/前端/WebSocket/index.html","hash":"15239e7c3fac660219c81ffe54abe0c666f0207f","modified":1658485656233},{"_id":"public/2020/02/15/前端/回流（Reflow）和重绘（Repaint）/index.html","hash":"dffba030c792e68cbe7cc146da1e63337998bf29","modified":1658485656233},{"_id":"public/2020/02/13/前端/页面渲染过程（输入一个url）/index.html","hash":"ff9daf5e74f3bdcdfeaacd3df1c8cafe370d2423","modified":1658485656233},{"_id":"public/2020/01/14/算法/算法：多层数组转化为一层/index.html","hash":"449b7c90462d731cfca8bf9811ff448fe50f1ce1","modified":1658485656233},{"_id":"public/2019/12/19/算法/LeetCode：验证回文串/index.html","hash":"ce0f8874ad220038bec76c967dc84d9f12bbde31","modified":1658485656233},{"_id":"public/2019/12/06/算法/LeetCode：有效的括号/index.html","hash":"72d8dc51403cd6ddc893ec62a294502f3785d3be","modified":1658485656233},{"_id":"public/2019/12/06/算法/LeetCode：罗马数字转整数/index.html","hash":"87cb772ea85feaa4ac1ee4527933b6c9add99e33","modified":1658485656233},{"_id":"public/2019/07/29/前端/一些调试小技巧/index.html","hash":"65302bed809b599f6f24c35a05bf5a01fde7f97c","modified":1658485656233},{"_id":"public/2019/04/25/前端/浏览器兼容问题/index.html","hash":"a6bc2690b70d1a33b801eb6ddf8b0a4d3f7746af","modified":1658485656233},{"_id":"public/2019/04/25/前端/渐进增强和优雅降级/index.html","hash":"ae8a6a61573f5ccf53f0e17b384d834a4d718e81","modified":1658485656233},{"_id":"public/2019/04/25/算法/算法：如何找出单链表中的倒数第k个元素/index.html","hash":"827610df3e6a089855187a4551270dba9acdfe2b","modified":1658485656233},{"_id":"public/2019/04/22/其他/数据结构：树的深度遍历和广度遍历/index.html","hash":"d4e57949b9b9d147f898e94649af1f00ac8c0278","modified":1658485656234},{"_id":"public/2019/04/21/算法/LeetCode算法题（一）/index.html","hash":"2f926af5cd5ca2e12df883709ba8a746d60260db","modified":1658485656234},{"_id":"public/2019/04/18/前端/canvas/index.html","hash":"400bd56d464a64646bdd4217d1eeac44c0022cea","modified":1658485656234},{"_id":"public/2019/04/12/其他/操作系统：进程、线程、程序/index.html","hash":"1d5d0e3692e521aa289ecb3499833e5f9779c327","modified":1658485656234},{"_id":"public/2019/04/10/算法/算法：把十六进制的ip地址转换为十进制的/index.html","hash":"6ebf5290c28c74970f1268656f50c088d1eeb006","modified":1658485656234},{"_id":"public/2019/04/09/算法/算法：快速排序/index.html","hash":"2cd86eb7776e4328937600c21ff7876d8b718c4f","modified":1658485656234},{"_id":"public/2019/03/29/其他/数据类型：json和xml/index.html","hash":"4bdf155e0d0bc5a375aa7ca2fa25082275583707","modified":1658485656234},{"_id":"public/2019/03/28/前端/BOM和DOM/index.html","hash":"2960283bcb4a2517f16aad8651cfcd76e5a3c0ae","modified":1658485656234},{"_id":"public/2019/03/28/算法/算法：二分查找/index.html","hash":"cdd59f08bff1d637b7a9bc1b07bf17ab82df8f7a","modified":1658485656234},{"_id":"public/2019/03/20/前端/虚拟dom/index.html","hash":"f3eaa36f90815405ccdb72ae94fe7af1fc5536ea","modified":1658485656234},{"_id":"public/2019/03/19/算法/各种算法（三）/index.html","hash":"4ce0df4924faa177daa7baf5a2712213864c050d","modified":1658485656235},{"_id":"public/2019/03/19/算法/各种算法（二）/index.html","hash":"c4db5420a2796bace06cd7e72c49e1a5cae65fd4","modified":1658485656235},{"_id":"public/2019/03/17/算法/各种算法（一）/index.html","hash":"b131ffbff40009d3f1eba407d050437b9e0927be","modified":1658485656235},{"_id":"public/2019/03/16/算法/算法：实现给数字添加千分位符的方法/index.html","hash":"377af7b56ad0387e4657dca3d12d802d5dc658f1","modified":1658485656235},{"_id":"public/2019/03/06/前端/h5和css3的新特性/index.html","hash":"002311117e7ae0af8dd5da35426a7b1c32bfbbf5","modified":1658485656235},{"_id":"public/2019/03/05/前端/本地存储方式/index.html","hash":"0989c3f3b3c5c69d1951462f01015ac8347dc723","modified":1658485656235},{"_id":"public/2018/12/05/算法/C：冒泡法和选择法/index.html","hash":"3f8926590520cb0a2628569d1a90906c5221c500","modified":1658485656235},{"_id":"public/2018/11/14/其他/Electron进阶：打开新窗口/index.html","hash":"f967310132e822c7351cfee6682f6a4a1b967134","modified":1658485656235},{"_id":"public/2018/11/14/其他/Electron：结合vue创建桌面应用/index.html","hash":"f417a95e8ee44a3428e917e97ca9b156a18be028","modified":1658485656235},{"_id":"public/2018/10/20/其他/Electron：从零到完成一个桌面应用/index.html","hash":"39db6fef0f9b82c755d43b9b8ccd9118655889d6","modified":1658485656235},{"_id":"public/2018/01/23/前端/前端学习路线规划/index.html","hash":"0e700f7cfc4cd8e63c9e852a11af4eee499dc681","modified":1658485656235},{"_id":"public/archives/2018/01/index.html","hash":"2ebe7cc5c67523612f9211d29daf05feb9268783","modified":1658485656235},{"_id":"public/archives/2018/10/index.html","hash":"bbf47de854bd6b740a76b995d56852ee8363ce71","modified":1658485656236},{"_id":"public/archives/2018/11/index.html","hash":"90f6d4255c4c11684c5894e3fd74cd6a7348ddc9","modified":1658485656236},{"_id":"public/archives/2018/12/index.html","hash":"3c0329413e3303c0bd33863dc7eaaf8e2671eb8c","modified":1658485656236},{"_id":"public/archives/2019/07/index.html","hash":"b06c755c473d057bb732b641e5c1ad1edddac658","modified":1658485656236},{"_id":"public/archives/2019/12/index.html","hash":"27fa43cae188ea41c84fe32049be6026329ee8f0","modified":1658485656236},{"_id":"public/archives/2020/01/index.html","hash":"72a058a53b74d92cd22bbd2ecdd6cf865cee97f4","modified":1658485656236},{"_id":"public/archives/2020/07/index.html","hash":"c330065a6d9a5a8dc449538bceda029d61a8f2bb","modified":1658485656236},{"_id":"public/archives/2020/08/index.html","hash":"e8c1b1b811c51abcfb985699acd093ce20b6ab23","modified":1658485656236},{"_id":"public/archives/2020/10/index.html","hash":"e58d60a17664b7b2d15fc1f7d4d3b4d2cbf8dd00","modified":1658485656236},{"_id":"public/archives/2021/index.html","hash":"7ebce5219e151a575f05bc5fbba9ffe9fb4fdb41","modified":1658485656236},{"_id":"public/archives/2021/02/index.html","hash":"4bfb782aef9269f0af680f9ef4d56c33be5391d5","modified":1658485656236},{"_id":"public/archives/2022/02/index.html","hash":"fc613af9adb3c5b255ec5d0f46445187bece6313","modified":1658485656236},{"_id":"public/categories/前端/page/3/index.html","hash":"2e9cb7f0ce0a79395051b1d917db7c0eb3fe1048","modified":1658485656236},{"_id":"public/tags/前端/page/3/index.html","hash":"5f201a8ddf38d4e9b7b916719863d1d19f8e54c7","modified":1658485656236}],"Category":[{"name":"CSS","_id":"cl5wb2yib0005cj38ki2ocnzh"},{"name":"Cocos","_id":"cl5wb2yj10017cj38biqm0trx"},{"name":"ES6","_id":"cl5wb2yja001wcj38s173piqv"},{"name":"Git","_id":"cl5wb2yjj002lcj38iygissmi"},{"name":"红宝书","_id":"cl5wb2yjy003ncj38y3tviavc"},{"name":"npm","_id":"cl5wb2yk2003vcj38ixcyddqz"},{"name":"JS","_id":"cl5wb2ykc004rcj381q9o5gwf"},{"name":"React","_id":"cl5wb2yll007scj38szrykpvk"},{"name":"Vue","_id":"cl5wb2ym6009ecj38npptnb99"},{"name":"Electron","_id":"cl5wb2ymg00abcj38vdw4bxxz"},{"name":"博客搭建","_id":"cl5wb2ymp00b1cj382kn36zcf"},{"name":"安全","_id":"cl5wb2ymt00bicj385nuuo5a6"},{"name":"demo","_id":"cl5wb2ymv00bqcj38afhofge8"},{"name":"操作系统","_id":"cl5wb2ymx00bycj386yq10jaf"},{"name":"数据结构","_id":"cl5wb2yn100cbcj386uwgapv7"},{"name":"数据类型","_id":"cl5wb2yn300cicj383jhajsmf"},{"name":"前端","_id":"cl5wb2yn400cocj38p30exwqp"},{"name":"算法","_id":"cl5wb2ynz00fhcj38tr4j0j2s"},{"name":"计网","_id":"cl5wb2yom00hmcj388fd0hv1s"},{"name":"SDK","_id":"cl5wbchu00002ml38ewnelm5n"}],"Data":[],"Page":[{"title":"categories","date":"2017-08-03T11:43:20.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-08-03 19:43:20\ntype: \"categories\"\n---\n","updated":"2022-07-22T06:50:06.992Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cl5wb2ydt0000cj386bzy3p6o","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2018-05-02T16:00:00.000Z","_content":"\n##关于我\n\n\n一只学习前端的小菜鸟，欢迎分享知识\n\nFrom Sivan\n\nQQ：1014270057\nEmail：1014270057@qq.com","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-05-03\n---\n\n##关于我\n\n\n一只学习前端的小菜鸟，欢迎分享知识\n\nFrom Sivan\n\nQQ：1014270057\nEmail：1014270057@qq.com","updated":"2022-07-22T06:50:06.992Z","path":"about/index.html","comments":1,"layout":"page","_id":"cl5wb2ydu0001cj38z49r73uq","content":"<p>##关于我</p>\n<p>一只学习前端的小菜鸟，欢迎分享知识</p>\n<p>From Sivan</p>\n<p>QQ：1014270057<br>Email：<a href=\"mailto:1014270057@qq.com\" target=\"_blank\" rel=\"noopener\">1014270057@qq.com</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>##关于我</p>\n<p>一只学习前端的小菜鸟，欢迎分享知识</p>\n<p>From Sivan</p>\n<p>QQ：1014270057<br>Email：<a href=\"mailto:1014270057@qq.com\" target=\"_blank\" rel=\"noopener\">1014270057@qq.com</a></p>\n"},{"title":"tags","date":"2017-08-03T11:41:49.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-08-03 19:41:49\ntype: \"tags\"\n---\n","updated":"2022-07-22T06:50:06.993Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cl5wb2yi50002cj38sbnc5b0j","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Electron进阶：打开新窗口","date":"2018-11-13T16:00:00.000Z","comments":1,"_content":"\n## 标签实现新窗口打开\n- 增加 target=\"_blank\"属性\n- router-link标签只有tag=”a”模式下 target=”_blank” 属性才会生效（vue2）\n\n## 编程式导航\n\n```\nlet routeData = this.$router.resolve({ \nname: \"searchGoods\", \nquery: params, \nparams:{catId:params.catId} \n}); \nwindow.open(routeData.href, '_blank');\n```\n\n","source":"_posts/其他/Electron进阶：打开新窗口.md","raw":"---\ntitle: Electron进阶：打开新窗口\ndate: 2018-11-14\ntags: [Electron]\ncategories: Electron\ncomments: true\n---\n\n## 标签实现新窗口打开\n- 增加 target=\"_blank\"属性\n- router-link标签只有tag=”a”模式下 target=”_blank” 属性才会生效（vue2）\n\n## 编程式导航\n\n```\nlet routeData = this.$router.resolve({ \nname: \"searchGoods\", \nquery: params, \nparams:{catId:params.catId} \n}); \nwindow.open(routeData.href, '_blank');\n```\n\n","slug":"其他/Electron进阶：打开新窗口","published":1,"updated":"2022-07-22T08:01:54.408Z","layout":"post","photos":[],"link":"","_id":"cl5wb2yme00a6cj38tgrgo6mu","content":"<h2 id=\"标签实现新窗口打开\"><a href=\"#标签实现新窗口打开\" class=\"headerlink\" title=\"标签实现新窗口打开\"></a>标签实现新窗口打开</h2><ul>\n<li>增加 target=”_blank”属性</li>\n<li>router-link标签只有tag=”a”模式下 target=”_blank” 属性才会生效（vue2）</li>\n</ul>\n<h2 id=\"编程式导航\"><a href=\"#编程式导航\" class=\"headerlink\" title=\"编程式导航\"></a>编程式导航</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let routeData = this.$router.resolve(&#123; </span><br><span class=\"line\">name: &quot;searchGoods&quot;, </span><br><span class=\"line\">query: params, </span><br><span class=\"line\">params:&#123;catId:params.catId&#125; </span><br><span class=\"line\">&#125;); </span><br><span class=\"line\">window.open(routeData.href, &apos;_blank&apos;);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"标签实现新窗口打开\"><a href=\"#标签实现新窗口打开\" class=\"headerlink\" title=\"标签实现新窗口打开\"></a>标签实现新窗口打开</h2><ul>\n<li>增加 target=”_blank”属性</li>\n<li>router-link标签只有tag=”a”模式下 target=”_blank” 属性才会生效（vue2）</li>\n</ul>\n<h2 id=\"编程式导航\"><a href=\"#编程式导航\" class=\"headerlink\" title=\"编程式导航\"></a>编程式导航</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let routeData = this.$router.resolve(&#123; </span><br><span class=\"line\">name: &quot;searchGoods&quot;, </span><br><span class=\"line\">query: params, </span><br><span class=\"line\">params:&#123;catId:params.catId&#125; </span><br><span class=\"line\">&#125;); </span><br><span class=\"line\">window.open(routeData.href, &apos;_blank&apos;);</span><br></pre></td></tr></table></figure>\n"},{"title":"Electron：从零到完成一个桌面应用","date":"2018-10-19T16:00:00.000Z","comments":1,"_content":"\nElectron\n## 开发环境\n- 安装node\n- 安装cnpm（或者npm）\n- 安装electron\n- 安装打包工具\n\n```\nnpm install -g electron-packager\n```\n\n## 经典例子\n### electron-quick-start\n一个简约的记事本\n```\n//克隆这仓库\n git clone https://github.com/electron/electron-quick-start\n//进入仓库\n cd electron-quick-start\n//安装依赖库\n cnpm install\n//运行应用，也可以用： cnpm run start\n cnpm start \n```\n### electron-api-demos\n介绍了主要的一些功能及实现代码\n\n```\n git clone https://github.com/electron/electron-api-demos\n cd electron-api-demos\n cnpm install\n cnpm start\n```\n## 开始开发\n### 安装electron\n推荐的安装方法是把electron作为您 app 中的开发依赖项，使您可以在不同的 app 中使用不同的 Electron 版本   \n\n在根目录下运行\n\n```\nnpm install --save-dev electron\n```\n当然，也可以在 $PATH 中全局安装\n```\nnpm install electron -g\n```\n\n### 创建Electron简单文件结构  \n在根目录下创建package.json文件，内容如下\n\n```\n{\n\t\"name\": \"test\",\n\t\"version\": \"0.1.0\",\n\t\"main\": \"main.js\",\n\t\"scripts\": {\n\t\t\"start\": \"electron .\"\n\t},\n\t\"devDependencies\": {\n\t\t\"electron\": \"^3.0.4\"\n\t}\n}\n```\n在根目录下创建main.js，内容如下\n\n```\nconst { app, BrowserWindow } = require('electron')\n  \n  // Keep a global reference of the window object, if you don't, the window will\n  // be closed automatically when the JavaScript object is garbage collected.\n  let win\n  \n  function createWindow () {\n    // 创建浏览器窗口。\n    win = new BrowserWindow({ width: 800, height: 600 })\n  \n    // 然后加载应用的 index.html。\n    win.loadFile('index.html')\n  \n    // 打开开发者工具\n    win.webContents.openDevTools()\n  \n    // 当 window 被关闭，这个事件会被触发。\n    win.on('closed', () => {\n      // 取消引用 window 对象，如果你的应用支持多窗口的话，\n      // 通常会把多个 window 对象存放在一个数组里面，\n      // 与此同时，你应该删除相应的元素。\n      win = null\n    })\n  }\n  \n  // Electron 会在初始化后并准备\n  // 创建浏览器窗口时，调用这个函数。\n  // 部分 API 在 ready 事件触发后才能使用。\n  app.on('ready', createWindow)\n  \n  // 当全部窗口关闭时退出。\n  app.on('window-all-closed', () => {\n    // 在 macOS 上，除非用户用 Cmd + Q 确定地退出，\n    // 否则绝大部分应用及其菜单栏会保持激活。\n    if (process.platform !== 'darwin') {\n      app.quit()\n    }\n  })\n  \n  app.on('activate', () => {\n    // 在macOS上，当单击dock图标并且没有其他窗口打开时，\n    // 通常在应用程序中重新创建一个窗口。\n    if (win === null) {\n      createWindow()\n    }\n  })\n  \n  // 在这个文件中，你可以续写应用剩下主进程代码。\n  // 也可以拆分成几个文件，然后用 require 导入。\n```\n然后创建index.html文件，内容如下\n\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\" /> \n    <title>TEST</title>\n</head>\n<body>\n    <span style=\"color:#fff;\">Hello World</span>\n</body>\n</html>\n```\n\n### 启动app\n\n```\nnpm start\n```\n或者在package.json中配置\n```\n\"scripts\": {\"start\": \"electron .\"}\n```\n则可以输入一下命令启动\n```\nelectron .\n```\n## 打包\n全局安装electron-packager\n\n\n","source":"_posts/其他/Electron：从零到完成一个桌面应用.md","raw":"---\ntitle: Electron：从零到完成一个桌面应用\ndate: 2018-10-20\ntags: [Electron]\ncategories: Electron\ncomments: true\n---\n\nElectron\n## 开发环境\n- 安装node\n- 安装cnpm（或者npm）\n- 安装electron\n- 安装打包工具\n\n```\nnpm install -g electron-packager\n```\n\n## 经典例子\n### electron-quick-start\n一个简约的记事本\n```\n//克隆这仓库\n git clone https://github.com/electron/electron-quick-start\n//进入仓库\n cd electron-quick-start\n//安装依赖库\n cnpm install\n//运行应用，也可以用： cnpm run start\n cnpm start \n```\n### electron-api-demos\n介绍了主要的一些功能及实现代码\n\n```\n git clone https://github.com/electron/electron-api-demos\n cd electron-api-demos\n cnpm install\n cnpm start\n```\n## 开始开发\n### 安装electron\n推荐的安装方法是把electron作为您 app 中的开发依赖项，使您可以在不同的 app 中使用不同的 Electron 版本   \n\n在根目录下运行\n\n```\nnpm install --save-dev electron\n```\n当然，也可以在 $PATH 中全局安装\n```\nnpm install electron -g\n```\n\n### 创建Electron简单文件结构  \n在根目录下创建package.json文件，内容如下\n\n```\n{\n\t\"name\": \"test\",\n\t\"version\": \"0.1.0\",\n\t\"main\": \"main.js\",\n\t\"scripts\": {\n\t\t\"start\": \"electron .\"\n\t},\n\t\"devDependencies\": {\n\t\t\"electron\": \"^3.0.4\"\n\t}\n}\n```\n在根目录下创建main.js，内容如下\n\n```\nconst { app, BrowserWindow } = require('electron')\n  \n  // Keep a global reference of the window object, if you don't, the window will\n  // be closed automatically when the JavaScript object is garbage collected.\n  let win\n  \n  function createWindow () {\n    // 创建浏览器窗口。\n    win = new BrowserWindow({ width: 800, height: 600 })\n  \n    // 然后加载应用的 index.html。\n    win.loadFile('index.html')\n  \n    // 打开开发者工具\n    win.webContents.openDevTools()\n  \n    // 当 window 被关闭，这个事件会被触发。\n    win.on('closed', () => {\n      // 取消引用 window 对象，如果你的应用支持多窗口的话，\n      // 通常会把多个 window 对象存放在一个数组里面，\n      // 与此同时，你应该删除相应的元素。\n      win = null\n    })\n  }\n  \n  // Electron 会在初始化后并准备\n  // 创建浏览器窗口时，调用这个函数。\n  // 部分 API 在 ready 事件触发后才能使用。\n  app.on('ready', createWindow)\n  \n  // 当全部窗口关闭时退出。\n  app.on('window-all-closed', () => {\n    // 在 macOS 上，除非用户用 Cmd + Q 确定地退出，\n    // 否则绝大部分应用及其菜单栏会保持激活。\n    if (process.platform !== 'darwin') {\n      app.quit()\n    }\n  })\n  \n  app.on('activate', () => {\n    // 在macOS上，当单击dock图标并且没有其他窗口打开时，\n    // 通常在应用程序中重新创建一个窗口。\n    if (win === null) {\n      createWindow()\n    }\n  })\n  \n  // 在这个文件中，你可以续写应用剩下主进程代码。\n  // 也可以拆分成几个文件，然后用 require 导入。\n```\n然后创建index.html文件，内容如下\n\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\" /> \n    <title>TEST</title>\n</head>\n<body>\n    <span style=\"color:#fff;\">Hello World</span>\n</body>\n</html>\n```\n\n### 启动app\n\n```\nnpm start\n```\n或者在package.json中配置\n```\n\"scripts\": {\"start\": \"electron .\"}\n```\n则可以输入一下命令启动\n```\nelectron .\n```\n## 打包\n全局安装electron-packager\n\n\n","slug":"其他/Electron：从零到完成一个桌面应用","published":1,"updated":"2022-07-22T08:01:29.533Z","layout":"post","photos":[],"link":"","_id":"cl5wb2ymf00a9cj38sgjan4j9","content":"<p>Electron</p>\n<h2 id=\"开发环境\"><a href=\"#开发环境\" class=\"headerlink\" title=\"开发环境\"></a>开发环境</h2><ul>\n<li>安装node</li>\n<li>安装cnpm（或者npm）</li>\n<li>安装electron</li>\n<li>安装打包工具</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g electron-packager</span><br></pre></td></tr></table></figure>\n<h2 id=\"经典例子\"><a href=\"#经典例子\" class=\"headerlink\" title=\"经典例子\"></a>经典例子</h2><h3 id=\"electron-quick-start\"><a href=\"#electron-quick-start\" class=\"headerlink\" title=\"electron-quick-start\"></a>electron-quick-start</h3><p>一个简约的记事本<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//克隆这仓库</span><br><span class=\"line\"> git clone https://github.com/electron/electron-quick-start</span><br><span class=\"line\">//进入仓库</span><br><span class=\"line\"> cd electron-quick-start</span><br><span class=\"line\">//安装依赖库</span><br><span class=\"line\"> cnpm install</span><br><span class=\"line\">//运行应用，也可以用： cnpm run start</span><br><span class=\"line\"> cnpm start</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"electron-api-demos\"><a href=\"#electron-api-demos\" class=\"headerlink\" title=\"electron-api-demos\"></a>electron-api-demos</h3><p>介绍了主要的一些功能及实现代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/electron/electron-api-demos</span><br><span class=\"line\">cd electron-api-demos</span><br><span class=\"line\">cnpm install</span><br><span class=\"line\">cnpm start</span><br></pre></td></tr></table></figure>\n<h2 id=\"开始开发\"><a href=\"#开始开发\" class=\"headerlink\" title=\"开始开发\"></a>开始开发</h2><h3 id=\"安装electron\"><a href=\"#安装electron\" class=\"headerlink\" title=\"安装electron\"></a>安装electron</h3><p>推荐的安装方法是把electron作为您 app 中的开发依赖项，使您可以在不同的 app 中使用不同的 Electron 版本   </p>\n<p>在根目录下运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev electron</span><br></pre></td></tr></table></figure>\n<p>当然，也可以在 $PATH 中全局安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install electron -g</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"创建Electron简单文件结构\"><a href=\"#创建Electron简单文件结构\" class=\"headerlink\" title=\"创建Electron简单文件结构\"></a>创建Electron简单文件结构</h3><p>在根目录下创建package.json文件，内容如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;name&quot;: &quot;test&quot;,</span><br><span class=\"line\">\t&quot;version&quot;: &quot;0.1.0&quot;,</span><br><span class=\"line\">\t&quot;main&quot;: &quot;main.js&quot;,</span><br><span class=\"line\">\t&quot;scripts&quot;: &#123;</span><br><span class=\"line\">\t\t&quot;start&quot;: &quot;electron .&quot;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&quot;devDependencies&quot;: &#123;</span><br><span class=\"line\">\t\t&quot;electron&quot;: &quot;^3.0.4&quot;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在根目录下创建main.js，内容如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const &#123; app, BrowserWindow &#125; = require(&apos;electron&apos;)</span><br><span class=\"line\">  </span><br><span class=\"line\">  // Keep a global reference of the window object, if you don&apos;t, the window will</span><br><span class=\"line\">  // be closed automatically when the JavaScript object is garbage collected.</span><br><span class=\"line\">  let win</span><br><span class=\"line\">  </span><br><span class=\"line\">  function createWindow () &#123;</span><br><span class=\"line\">    // 创建浏览器窗口。</span><br><span class=\"line\">    win = new BrowserWindow(&#123; width: 800, height: 600 &#125;)</span><br><span class=\"line\">  </span><br><span class=\"line\">    // 然后加载应用的 index.html。</span><br><span class=\"line\">    win.loadFile(&apos;index.html&apos;)</span><br><span class=\"line\">  </span><br><span class=\"line\">    // 打开开发者工具</span><br><span class=\"line\">    win.webContents.openDevTools()</span><br><span class=\"line\">  </span><br><span class=\"line\">    // 当 window 被关闭，这个事件会被触发。</span><br><span class=\"line\">    win.on(&apos;closed&apos;, () =&gt; &#123;</span><br><span class=\"line\">      // 取消引用 window 对象，如果你的应用支持多窗口的话，</span><br><span class=\"line\">      // 通常会把多个 window 对象存放在一个数组里面，</span><br><span class=\"line\">      // 与此同时，你应该删除相应的元素。</span><br><span class=\"line\">      win = null</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  // Electron 会在初始化后并准备</span><br><span class=\"line\">  // 创建浏览器窗口时，调用这个函数。</span><br><span class=\"line\">  // 部分 API 在 ready 事件触发后才能使用。</span><br><span class=\"line\">  app.on(&apos;ready&apos;, createWindow)</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 当全部窗口关闭时退出。</span><br><span class=\"line\">  app.on(&apos;window-all-closed&apos;, () =&gt; &#123;</span><br><span class=\"line\">    // 在 macOS 上，除非用户用 Cmd + Q 确定地退出，</span><br><span class=\"line\">    // 否则绝大部分应用及其菜单栏会保持激活。</span><br><span class=\"line\">    if (process.platform !== &apos;darwin&apos;) &#123;</span><br><span class=\"line\">      app.quit()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  </span><br><span class=\"line\">  app.on(&apos;activate&apos;, () =&gt; &#123;</span><br><span class=\"line\">    // 在macOS上，当单击dock图标并且没有其他窗口打开时，</span><br><span class=\"line\">    // 通常在应用程序中重新创建一个窗口。</span><br><span class=\"line\">    if (win === null) &#123;</span><br><span class=\"line\">      createWindow()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 在这个文件中，你可以续写应用剩下主进程代码。</span><br><span class=\"line\">  // 也可以拆分成几个文件，然后用 require 导入。</span><br></pre></td></tr></table></figure>\n<p>然后创建index.html文件，内容如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!doctype html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;utf-8&quot; /&gt; </span><br><span class=\"line\">    &lt;title&gt;TEST&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;span style=&quot;color:#fff;&quot;&gt;Hello World&lt;/span&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动app\"><a href=\"#启动app\" class=\"headerlink\" title=\"启动app\"></a>启动app</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm start</span><br></pre></td></tr></table></figure>\n<p>或者在package.json中配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;&quot;start&quot;: &quot;electron .&quot;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>则可以输入一下命令启动<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">electron .</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a>打包</h2><p>全局安装electron-packager</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Electron</p>\n<h2 id=\"开发环境\"><a href=\"#开发环境\" class=\"headerlink\" title=\"开发环境\"></a>开发环境</h2><ul>\n<li>安装node</li>\n<li>安装cnpm（或者npm）</li>\n<li>安装electron</li>\n<li>安装打包工具</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g electron-packager</span><br></pre></td></tr></table></figure>\n<h2 id=\"经典例子\"><a href=\"#经典例子\" class=\"headerlink\" title=\"经典例子\"></a>经典例子</h2><h3 id=\"electron-quick-start\"><a href=\"#electron-quick-start\" class=\"headerlink\" title=\"electron-quick-start\"></a>electron-quick-start</h3><p>一个简约的记事本<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//克隆这仓库</span><br><span class=\"line\"> git clone https://github.com/electron/electron-quick-start</span><br><span class=\"line\">//进入仓库</span><br><span class=\"line\"> cd electron-quick-start</span><br><span class=\"line\">//安装依赖库</span><br><span class=\"line\"> cnpm install</span><br><span class=\"line\">//运行应用，也可以用： cnpm run start</span><br><span class=\"line\"> cnpm start</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"electron-api-demos\"><a href=\"#electron-api-demos\" class=\"headerlink\" title=\"electron-api-demos\"></a>electron-api-demos</h3><p>介绍了主要的一些功能及实现代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/electron/electron-api-demos</span><br><span class=\"line\">cd electron-api-demos</span><br><span class=\"line\">cnpm install</span><br><span class=\"line\">cnpm start</span><br></pre></td></tr></table></figure>\n<h2 id=\"开始开发\"><a href=\"#开始开发\" class=\"headerlink\" title=\"开始开发\"></a>开始开发</h2><h3 id=\"安装electron\"><a href=\"#安装electron\" class=\"headerlink\" title=\"安装electron\"></a>安装electron</h3><p>推荐的安装方法是把electron作为您 app 中的开发依赖项，使您可以在不同的 app 中使用不同的 Electron 版本   </p>\n<p>在根目录下运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev electron</span><br></pre></td></tr></table></figure>\n<p>当然，也可以在 $PATH 中全局安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install electron -g</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"创建Electron简单文件结构\"><a href=\"#创建Electron简单文件结构\" class=\"headerlink\" title=\"创建Electron简单文件结构\"></a>创建Electron简单文件结构</h3><p>在根目录下创建package.json文件，内容如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;name&quot;: &quot;test&quot;,</span><br><span class=\"line\">\t&quot;version&quot;: &quot;0.1.0&quot;,</span><br><span class=\"line\">\t&quot;main&quot;: &quot;main.js&quot;,</span><br><span class=\"line\">\t&quot;scripts&quot;: &#123;</span><br><span class=\"line\">\t\t&quot;start&quot;: &quot;electron .&quot;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&quot;devDependencies&quot;: &#123;</span><br><span class=\"line\">\t\t&quot;electron&quot;: &quot;^3.0.4&quot;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在根目录下创建main.js，内容如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const &#123; app, BrowserWindow &#125; = require(&apos;electron&apos;)</span><br><span class=\"line\">  </span><br><span class=\"line\">  // Keep a global reference of the window object, if you don&apos;t, the window will</span><br><span class=\"line\">  // be closed automatically when the JavaScript object is garbage collected.</span><br><span class=\"line\">  let win</span><br><span class=\"line\">  </span><br><span class=\"line\">  function createWindow () &#123;</span><br><span class=\"line\">    // 创建浏览器窗口。</span><br><span class=\"line\">    win = new BrowserWindow(&#123; width: 800, height: 600 &#125;)</span><br><span class=\"line\">  </span><br><span class=\"line\">    // 然后加载应用的 index.html。</span><br><span class=\"line\">    win.loadFile(&apos;index.html&apos;)</span><br><span class=\"line\">  </span><br><span class=\"line\">    // 打开开发者工具</span><br><span class=\"line\">    win.webContents.openDevTools()</span><br><span class=\"line\">  </span><br><span class=\"line\">    // 当 window 被关闭，这个事件会被触发。</span><br><span class=\"line\">    win.on(&apos;closed&apos;, () =&gt; &#123;</span><br><span class=\"line\">      // 取消引用 window 对象，如果你的应用支持多窗口的话，</span><br><span class=\"line\">      // 通常会把多个 window 对象存放在一个数组里面，</span><br><span class=\"line\">      // 与此同时，你应该删除相应的元素。</span><br><span class=\"line\">      win = null</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  // Electron 会在初始化后并准备</span><br><span class=\"line\">  // 创建浏览器窗口时，调用这个函数。</span><br><span class=\"line\">  // 部分 API 在 ready 事件触发后才能使用。</span><br><span class=\"line\">  app.on(&apos;ready&apos;, createWindow)</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 当全部窗口关闭时退出。</span><br><span class=\"line\">  app.on(&apos;window-all-closed&apos;, () =&gt; &#123;</span><br><span class=\"line\">    // 在 macOS 上，除非用户用 Cmd + Q 确定地退出，</span><br><span class=\"line\">    // 否则绝大部分应用及其菜单栏会保持激活。</span><br><span class=\"line\">    if (process.platform !== &apos;darwin&apos;) &#123;</span><br><span class=\"line\">      app.quit()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  </span><br><span class=\"line\">  app.on(&apos;activate&apos;, () =&gt; &#123;</span><br><span class=\"line\">    // 在macOS上，当单击dock图标并且没有其他窗口打开时，</span><br><span class=\"line\">    // 通常在应用程序中重新创建一个窗口。</span><br><span class=\"line\">    if (win === null) &#123;</span><br><span class=\"line\">      createWindow()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 在这个文件中，你可以续写应用剩下主进程代码。</span><br><span class=\"line\">  // 也可以拆分成几个文件，然后用 require 导入。</span><br></pre></td></tr></table></figure>\n<p>然后创建index.html文件，内容如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!doctype html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;utf-8&quot; /&gt; </span><br><span class=\"line\">    &lt;title&gt;TEST&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;span style=&quot;color:#fff;&quot;&gt;Hello World&lt;/span&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动app\"><a href=\"#启动app\" class=\"headerlink\" title=\"启动app\"></a>启动app</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm start</span><br></pre></td></tr></table></figure>\n<p>或者在package.json中配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;&quot;start&quot;: &quot;electron .&quot;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>则可以输入一下命令启动<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">electron .</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a>打包</h2><p>全局安装electron-packager</p>\n"},{"title":"Electron：结合vue创建桌面应用","date":"2018-11-13T16:00:00.000Z","comments":1,"_content":"\n## 首先\n创建项目并安装好依赖\n```\nvue init webpack test-electron\ncd test-electron\nnpm install\nnpm install electron --save-dev\nnpm install electron-packager --save-dev\n```\n## 其次\n将零基础中的main.js拷贝到新建项目的build目录下，并更名为electron.js\n\n按照实际项目路径更改electron.js中的路径\n\n```\n mainWindow.loadURL(url.format({\n    pathname: path.join(__dirname, '../dist/index.html'),\n    protocol: 'file:',\n    slashes: true\n  }))\n```\n## 最后\n在新建项目package.json文件中增加一条指令\n\n```\n \"scripts\": \n { ... \n \"lint\": \"eslint --ext .js,.vue src test/unit/specs test/e2e/specs\", \n \"build\": \"node build/build.js\", \n  //增加这条,JSON文件不支持注释，引用时请清除 \n \"electron_dev\": \"npm run build && electron build/electron.js\" \n },\n```\n## 启动\n\n```\nnpm run build //生成dist目录\nnpm run electron_dev //启动electron\n```\n\n> PS 打包前：更改config/index.js中生产模式下（build）的assetsPublicPth, 原本为 /, 改为 ./ 。","source":"_posts/其他/Electron：结合vue创建桌面应用.md","raw":"---\ntitle: Electron：结合vue创建桌面应用\ndate: 2018-11-14\ntags: [Electron]\ncategories: Electron\ncomments: true\n---\n\n## 首先\n创建项目并安装好依赖\n```\nvue init webpack test-electron\ncd test-electron\nnpm install\nnpm install electron --save-dev\nnpm install electron-packager --save-dev\n```\n## 其次\n将零基础中的main.js拷贝到新建项目的build目录下，并更名为electron.js\n\n按照实际项目路径更改electron.js中的路径\n\n```\n mainWindow.loadURL(url.format({\n    pathname: path.join(__dirname, '../dist/index.html'),\n    protocol: 'file:',\n    slashes: true\n  }))\n```\n## 最后\n在新建项目package.json文件中增加一条指令\n\n```\n \"scripts\": \n { ... \n \"lint\": \"eslint --ext .js,.vue src test/unit/specs test/e2e/specs\", \n \"build\": \"node build/build.js\", \n  //增加这条,JSON文件不支持注释，引用时请清除 \n \"electron_dev\": \"npm run build && electron build/electron.js\" \n },\n```\n## 启动\n\n```\nnpm run build //生成dist目录\nnpm run electron_dev //启动electron\n```\n\n> PS 打包前：更改config/index.js中生产模式下（build）的assetsPublicPth, 原本为 /, 改为 ./ 。","slug":"其他/Electron：结合vue创建桌面应用","published":1,"updated":"2022-07-22T08:01:43.293Z","layout":"post","photos":[],"link":"","_id":"cl5wb2ymg00aecj38pwid6nvc","content":"<h2 id=\"首先\"><a href=\"#首先\" class=\"headerlink\" title=\"首先\"></a>首先</h2><p>创建项目并安装好依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue init webpack test-electron</span><br><span class=\"line\">cd test-electron</span><br><span class=\"line\">npm install</span><br><span class=\"line\">npm install electron --save-dev</span><br><span class=\"line\">npm install electron-packager --save-dev</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"其次\"><a href=\"#其次\" class=\"headerlink\" title=\"其次\"></a>其次</h2><p>将零基础中的main.js拷贝到新建项目的build目录下，并更名为electron.js</p>\n<p>按照实际项目路径更改electron.js中的路径</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mainWindow.loadURL(url.format(&#123;</span><br><span class=\"line\">   pathname: path.join(__dirname, &apos;../dist/index.html&apos;),</span><br><span class=\"line\">   protocol: &apos;file:&apos;,</span><br><span class=\"line\">   slashes: true</span><br><span class=\"line\"> &#125;))</span><br></pre></td></tr></table></figure>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>在新建项目package.json文件中增加一条指令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: </span><br><span class=\"line\">&#123; ... </span><br><span class=\"line\">&quot;lint&quot;: &quot;eslint --ext .js,.vue src test/unit/specs test/e2e/specs&quot;, </span><br><span class=\"line\">&quot;build&quot;: &quot;node build/build.js&quot;, </span><br><span class=\"line\"> //增加这条,JSON文件不支持注释，引用时请清除 </span><br><span class=\"line\">&quot;electron_dev&quot;: &quot;npm run build &amp;&amp; electron build/electron.js&quot; </span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build //生成dist目录</span><br><span class=\"line\">npm run electron_dev //启动electron</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>PS 打包前：更改config/index.js中生产模式下（build）的assetsPublicPth, 原本为 /, 改为 ./ 。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"首先\"><a href=\"#首先\" class=\"headerlink\" title=\"首先\"></a>首先</h2><p>创建项目并安装好依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue init webpack test-electron</span><br><span class=\"line\">cd test-electron</span><br><span class=\"line\">npm install</span><br><span class=\"line\">npm install electron --save-dev</span><br><span class=\"line\">npm install electron-packager --save-dev</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"其次\"><a href=\"#其次\" class=\"headerlink\" title=\"其次\"></a>其次</h2><p>将零基础中的main.js拷贝到新建项目的build目录下，并更名为electron.js</p>\n<p>按照实际项目路径更改electron.js中的路径</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mainWindow.loadURL(url.format(&#123;</span><br><span class=\"line\">   pathname: path.join(__dirname, &apos;../dist/index.html&apos;),</span><br><span class=\"line\">   protocol: &apos;file:&apos;,</span><br><span class=\"line\">   slashes: true</span><br><span class=\"line\"> &#125;))</span><br></pre></td></tr></table></figure>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>在新建项目package.json文件中增加一条指令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: </span><br><span class=\"line\">&#123; ... </span><br><span class=\"line\">&quot;lint&quot;: &quot;eslint --ext .js,.vue src test/unit/specs test/e2e/specs&quot;, </span><br><span class=\"line\">&quot;build&quot;: &quot;node build/build.js&quot;, </span><br><span class=\"line\"> //增加这条,JSON文件不支持注释，引用时请清除 </span><br><span class=\"line\">&quot;electron_dev&quot;: &quot;npm run build &amp;&amp; electron build/electron.js&quot; </span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build //生成dist目录</span><br><span class=\"line\">npm run electron_dev //启动electron</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>PS 打包前：更改config/index.js中生产模式下（build）的assetsPublicPth, 原本为 /, 改为 ./ 。</p>\n</blockquote>\n"},{"title":"Hexo+Github 搭建属于自己的博客（进阶）NexT主题","date":"2018-05-03T16:00:00.000Z","comments":1,"_content":"\n# 主题安装\n### 安装NexT\n在站点目录下（hexo），输入命令：\n\n```\n$ git clone https://github.com/iissnan/hexo-theme-next themes/next\n```\n### 启用主题\n在站点目录中（blog），打开配置文件_config.yml，修改\n```\ntheme：next\n```\n### 验证主题\n\n```\n$ hexo s\n```\n# 主题设定\n以下所有设置注意格式\n### NexT主题设定\n可以在next主题目录下的_config.yml文件中修改\n\n```\n# Schemes\nscheme: Muse\n#scheme: Mist\n#scheme: Pisces\n#scheme: Gemini\n```\n### 基础设置\n在站点目录下的配置文件_cofig.yml中修改\n\n```\n# Site\ntitle: your blog title\nsubtitle:\ndescription: describe yourself\nkeywords:\nauthor: yourname\nlanguage: zh-Hans //简体中文\ntimezone:\n```\n### 修改菜单项\n在主题目录下修改配置文件_cofig.yml中的menu\n\n```\nmenu:\n  home: / || home\n  about: /about/ || user\n  tags: /tags/ || tags\n  categories: /categories/ || th\n  archives: /archives/ || archive\n  #schedule: /schedule/ || calendar\n  #sitemap: /sitemap.xml || sitemap\n  #commonweal: /404/ || heartbeat\n```\n这些配置都要与你主题目录下的languages文件中对应的yml文档里配置相关联\n\n```\nmenu:\n  home: 首页\n  archives: 归档\n  categories: 分类\n  tags: 标签\n  about: 关于\n  search: 搜索\n  schedule: 日程表\n  sitemap: 站点地图\n  commonweal: 公益404\n```\n### 限定主页文章高度\n修改主题目录下的值\n\n```\nauto_excerpt:\n  enable: true\n  length: 150\n```\n### 设置头像\n\n修改主题目录下Sidebar Avatar的avatar值\n```\n# Sidebar Avatar\n# in theme directory(source/images): /images/avatar.gif\n# in site  directory(source/uploads): /uploads/avatar.gif\navatar: /images/avatar.jpg\n```\n\n\n地址可以是网络地址，也可以是本地地址（放置在source/images/ 目录下）\n\n### 添加标签页面\n点击标签，跳转的页面会显示page not found\n\n此时需要在站点目录的source文件夹里新建tags文件夹，并新建index.md，添加：\n\n```\n---\ntitle: tags\ndate: \ntype: \"tags\"\n---\n```\n当要为某一篇文章添加标签，只需在blog/source/_post目录下的具体文章的tags中添加标签即可\n\n### 实现点击出现桃心效果\n将代码copy到/themes/next/source/js/src里面新建的love.js中\n\n```\n! function(e, t, a) {\n    function n() {\n        c(\".heart{width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);}.heart:after,.heart:before{content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;}.heart:after{top: -5px;}.heart:before{left: -5px;}\"), o(), r()\n    }\n\n    function r() {\n        for (var e = 0; e < d.length; e++) d[e].alpha <= 0 ? (t.body.removeChild(d[e].el), d.splice(e, 1)) : (d[e].y--, d[e].scale += .004, d[e].alpha -= .013, d[e].el.style.cssText = \"left:\" + d[e].x + \"px;top:\" + d[e].y + \"px;opacity:\" + d[e].alpha + \";transform:scale(\" + d[e].scale + \",\" + d[e].scale + \") rotate(45deg);background:\" + d[e].color + \";z-index:99999\");\n        requestAnimationFrame(r)\n    }\n\n    function o() {\n        var t = \"function\" == typeof e.onclick && e.onclick;\n        e.onclick = function(e) {\n            t && t(), i(e)\n        }\n    }\n\n    function i(e) {\n        var a = t.createElement(\"div\");\n        a.className = \"heart\", d.push({\n            el: a,\n            x: e.clientX - 5,\n            y: e.clientY - 5,\n            scale: 1,\n            alpha: 1,\n            color: s()\n        }), t.body.appendChild(a)\n    }\n\n    function c(e) {\n        var a = t.createElement(\"style\");\n        a.type = \"text/css\";\n        try {\n            a.appendChild(t.createTextNode(e))\n        } catch (t) {\n            a.styleSheet.cssText = e\n        }\n        t.getElementsByTagName(\"head\")[0].appendChild(a)\n    }\n\n    function s() {\n        return \"rgb(\" + ~~(255 * Math.random()) + \",\" + ~~(255 * Math.random()) + \",\" + ~~(255 * Math.random()) + \")\"\n    }\n    var d = [];\n    e.requestAnimationFrame = function() {\n        return e.requestAnimationFrame || e.webkitRequestAnimationFrame || e.mozRequestAnimationFrame || e.oRequestAnimationFrame || e.msRequestAnimationFrame || function(e) {\n            setTimeout(e, 1e3 / 60)\n        }\n    }(), n()\n}(window, document);\n```\n打开\\themes\\next\\layout\\_layout.swig文件,在末尾（在前面引用会出现找不到的bug） ，引用love.js\n\n```\n<script src=\"/js/src/love.js\" type=\"text/javascript\"></script>\n```\n\n### 添加动态背景\n打开\\themes\\next\\layout\\_layout.swig文件，\n在 </body>之前添加代码(注意不要放在< /head>的后面)\n\n```\n{% if theme.canvas_nest %}\n<script type=\"text/javascript\" src=\"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js\"></script>\n{% endif %}\n```\n打开开\\themes\\next\\_config.yml,在里面修改为如下代码\n\n```\ncanvas_nest: true\n```\n\n\n### 在网站底部加上访问量\n打开\\themes\\next\\layout\\_partials\\footer.swig文件,在类copyright前加上这段代码：\n\n```\n<script async src=\"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\"></script>\n```\n然后在合适的位置添加显示统计的代码：\n\n```\n<div class=\"powered-by\">\n<i class=\"fa fa-user-md\"></i><span id=\"busuanzi_container_site_uv\">\n  本站访客数:<span id=\"busuanzi_value_site_uv\"></span>\n</span>\n</div>\n```\n\n### 在每篇文章末尾添加“本文结束”标记\n在路径 \\themes\\next\\layout\\_macro 中新建 passage-end-tag.swig 文件,并添加以下内容\n\n```\n<div>\n    {% if not is_index %}\n        <div style=\"text-align:center;color: #ccc;font-size:14px;\">-------------本文结束<i class=\"fa fa-paw\"></i>感谢您的阅读-------------</div>\n    {% endif %}\n</div>\n```\n接着打开\\themes\\next\\layout\\_macro\\post.swig文件，在post-body 之后， post-footer 之前添加如下代码\n\n```\n<div>\n  {% if not is_index %}\n    {% include 'passage-end-tag.swig' %}\n  {% endif %}\n</div>\n```\n打开主题配置文件,在末尾添加\n\n```\n# 文章末尾添加“本文结束”标记\npassage_end_tag:\n  enabled: true\n```\n\n### 侧边栏社交链接\n在主题配置文件中修改：\n\n```\n# Social links\nsocial:\n  GitHub: https://github.com/your-user-name\n  Twitter: https://twitter.com/your-user-name\n  微博: http://weibo.com/your-user-name\n\n# Social Icons\nsocial_icons:\n  enable: true\n  # Icon Mappings\n  GitHub: github\n  Twitter: twitter\n  微博: weibo\n```\n###  添加小图标\n在主题配置文件中修改：\n\n```\nfavicon:\n  #small: /images/favicon.ico\n  medium: /images/favicon.ico\n```\n\n\n> [NexT主题美化](http://theme-next.iissnan.com/getting-started.html#avatar-setting)\n\n除了NexT还有很多其他好看的主题，百度会有很多方法的","source":"_posts/其他/Hexo+Github 搭建属于自己的博客（进阶）NexT主题.md","raw":"---\ntitle: Hexo+Github 搭建属于自己的博客（进阶）NexT主题\ndate: 2018-05-04\ntags: [博客搭建]\ncategories: 博客搭建\ncomments: true\n---\n\n# 主题安装\n### 安装NexT\n在站点目录下（hexo），输入命令：\n\n```\n$ git clone https://github.com/iissnan/hexo-theme-next themes/next\n```\n### 启用主题\n在站点目录中（blog），打开配置文件_config.yml，修改\n```\ntheme：next\n```\n### 验证主题\n\n```\n$ hexo s\n```\n# 主题设定\n以下所有设置注意格式\n### NexT主题设定\n可以在next主题目录下的_config.yml文件中修改\n\n```\n# Schemes\nscheme: Muse\n#scheme: Mist\n#scheme: Pisces\n#scheme: Gemini\n```\n### 基础设置\n在站点目录下的配置文件_cofig.yml中修改\n\n```\n# Site\ntitle: your blog title\nsubtitle:\ndescription: describe yourself\nkeywords:\nauthor: yourname\nlanguage: zh-Hans //简体中文\ntimezone:\n```\n### 修改菜单项\n在主题目录下修改配置文件_cofig.yml中的menu\n\n```\nmenu:\n  home: / || home\n  about: /about/ || user\n  tags: /tags/ || tags\n  categories: /categories/ || th\n  archives: /archives/ || archive\n  #schedule: /schedule/ || calendar\n  #sitemap: /sitemap.xml || sitemap\n  #commonweal: /404/ || heartbeat\n```\n这些配置都要与你主题目录下的languages文件中对应的yml文档里配置相关联\n\n```\nmenu:\n  home: 首页\n  archives: 归档\n  categories: 分类\n  tags: 标签\n  about: 关于\n  search: 搜索\n  schedule: 日程表\n  sitemap: 站点地图\n  commonweal: 公益404\n```\n### 限定主页文章高度\n修改主题目录下的值\n\n```\nauto_excerpt:\n  enable: true\n  length: 150\n```\n### 设置头像\n\n修改主题目录下Sidebar Avatar的avatar值\n```\n# Sidebar Avatar\n# in theme directory(source/images): /images/avatar.gif\n# in site  directory(source/uploads): /uploads/avatar.gif\navatar: /images/avatar.jpg\n```\n\n\n地址可以是网络地址，也可以是本地地址（放置在source/images/ 目录下）\n\n### 添加标签页面\n点击标签，跳转的页面会显示page not found\n\n此时需要在站点目录的source文件夹里新建tags文件夹，并新建index.md，添加：\n\n```\n---\ntitle: tags\ndate: \ntype: \"tags\"\n---\n```\n当要为某一篇文章添加标签，只需在blog/source/_post目录下的具体文章的tags中添加标签即可\n\n### 实现点击出现桃心效果\n将代码copy到/themes/next/source/js/src里面新建的love.js中\n\n```\n! function(e, t, a) {\n    function n() {\n        c(\".heart{width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);}.heart:after,.heart:before{content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;}.heart:after{top: -5px;}.heart:before{left: -5px;}\"), o(), r()\n    }\n\n    function r() {\n        for (var e = 0; e < d.length; e++) d[e].alpha <= 0 ? (t.body.removeChild(d[e].el), d.splice(e, 1)) : (d[e].y--, d[e].scale += .004, d[e].alpha -= .013, d[e].el.style.cssText = \"left:\" + d[e].x + \"px;top:\" + d[e].y + \"px;opacity:\" + d[e].alpha + \";transform:scale(\" + d[e].scale + \",\" + d[e].scale + \") rotate(45deg);background:\" + d[e].color + \";z-index:99999\");\n        requestAnimationFrame(r)\n    }\n\n    function o() {\n        var t = \"function\" == typeof e.onclick && e.onclick;\n        e.onclick = function(e) {\n            t && t(), i(e)\n        }\n    }\n\n    function i(e) {\n        var a = t.createElement(\"div\");\n        a.className = \"heart\", d.push({\n            el: a,\n            x: e.clientX - 5,\n            y: e.clientY - 5,\n            scale: 1,\n            alpha: 1,\n            color: s()\n        }), t.body.appendChild(a)\n    }\n\n    function c(e) {\n        var a = t.createElement(\"style\");\n        a.type = \"text/css\";\n        try {\n            a.appendChild(t.createTextNode(e))\n        } catch (t) {\n            a.styleSheet.cssText = e\n        }\n        t.getElementsByTagName(\"head\")[0].appendChild(a)\n    }\n\n    function s() {\n        return \"rgb(\" + ~~(255 * Math.random()) + \",\" + ~~(255 * Math.random()) + \",\" + ~~(255 * Math.random()) + \")\"\n    }\n    var d = [];\n    e.requestAnimationFrame = function() {\n        return e.requestAnimationFrame || e.webkitRequestAnimationFrame || e.mozRequestAnimationFrame || e.oRequestAnimationFrame || e.msRequestAnimationFrame || function(e) {\n            setTimeout(e, 1e3 / 60)\n        }\n    }(), n()\n}(window, document);\n```\n打开\\themes\\next\\layout\\_layout.swig文件,在末尾（在前面引用会出现找不到的bug） ，引用love.js\n\n```\n<script src=\"/js/src/love.js\" type=\"text/javascript\"></script>\n```\n\n### 添加动态背景\n打开\\themes\\next\\layout\\_layout.swig文件，\n在 </body>之前添加代码(注意不要放在< /head>的后面)\n\n```\n{% if theme.canvas_nest %}\n<script type=\"text/javascript\" src=\"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js\"></script>\n{% endif %}\n```\n打开开\\themes\\next\\_config.yml,在里面修改为如下代码\n\n```\ncanvas_nest: true\n```\n\n\n### 在网站底部加上访问量\n打开\\themes\\next\\layout\\_partials\\footer.swig文件,在类copyright前加上这段代码：\n\n```\n<script async src=\"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\"></script>\n```\n然后在合适的位置添加显示统计的代码：\n\n```\n<div class=\"powered-by\">\n<i class=\"fa fa-user-md\"></i><span id=\"busuanzi_container_site_uv\">\n  本站访客数:<span id=\"busuanzi_value_site_uv\"></span>\n</span>\n</div>\n```\n\n### 在每篇文章末尾添加“本文结束”标记\n在路径 \\themes\\next\\layout\\_macro 中新建 passage-end-tag.swig 文件,并添加以下内容\n\n```\n<div>\n    {% if not is_index %}\n        <div style=\"text-align:center;color: #ccc;font-size:14px;\">-------------本文结束<i class=\"fa fa-paw\"></i>感谢您的阅读-------------</div>\n    {% endif %}\n</div>\n```\n接着打开\\themes\\next\\layout\\_macro\\post.swig文件，在post-body 之后， post-footer 之前添加如下代码\n\n```\n<div>\n  {% if not is_index %}\n    {% include 'passage-end-tag.swig' %}\n  {% endif %}\n</div>\n```\n打开主题配置文件,在末尾添加\n\n```\n# 文章末尾添加“本文结束”标记\npassage_end_tag:\n  enabled: true\n```\n\n### 侧边栏社交链接\n在主题配置文件中修改：\n\n```\n# Social links\nsocial:\n  GitHub: https://github.com/your-user-name\n  Twitter: https://twitter.com/your-user-name\n  微博: http://weibo.com/your-user-name\n\n# Social Icons\nsocial_icons:\n  enable: true\n  # Icon Mappings\n  GitHub: github\n  Twitter: twitter\n  微博: weibo\n```\n###  添加小图标\n在主题配置文件中修改：\n\n```\nfavicon:\n  #small: /images/favicon.ico\n  medium: /images/favicon.ico\n```\n\n\n> [NexT主题美化](http://theme-next.iissnan.com/getting-started.html#avatar-setting)\n\n除了NexT还有很多其他好看的主题，百度会有很多方法的","slug":"其他/Hexo+Github 搭建属于自己的博客（进阶）NexT主题","published":1,"updated":"2022-07-22T07:59:39.025Z","layout":"post","photos":[],"link":"","_id":"cl5wb2ymk00apcj38002ww6sz","content":"<h1 id=\"主题安装\"><a href=\"#主题安装\" class=\"headerlink\" title=\"主题安装\"></a>主题安装</h1><h3 id=\"安装NexT\"><a href=\"#安装NexT\" class=\"headerlink\" title=\"安装NexT\"></a>安装NexT</h3><p>在站点目录下（hexo），输入命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n<h3 id=\"启用主题\"><a href=\"#启用主题\" class=\"headerlink\" title=\"启用主题\"></a>启用主题</h3><p>在站点目录中（blog），打开配置文件_config.yml，修改<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">theme：next</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"验证主题\"><a href=\"#验证主题\" class=\"headerlink\" title=\"验证主题\"></a>验证主题</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo s</span><br></pre></td></tr></table></figure>\n<h1 id=\"主题设定\"><a href=\"#主题设定\" class=\"headerlink\" title=\"主题设定\"></a>主题设定</h1><p>以下所有设置注意格式</p>\n<h3 id=\"NexT主题设定\"><a href=\"#NexT主题设定\" class=\"headerlink\" title=\"NexT主题设定\"></a>NexT主题设定</h3><p>可以在next主题目录下的_config.yml文件中修改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Schemes</span><br><span class=\"line\">scheme: Muse</span><br><span class=\"line\">#scheme: Mist</span><br><span class=\"line\">#scheme: Pisces</span><br><span class=\"line\">#scheme: Gemini</span><br></pre></td></tr></table></figure>\n<h3 id=\"基础设置\"><a href=\"#基础设置\" class=\"headerlink\" title=\"基础设置\"></a>基础设置</h3><p>在站点目录下的配置文件_cofig.yml中修改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Site</span><br><span class=\"line\">title: your blog title</span><br><span class=\"line\">subtitle:</span><br><span class=\"line\">description: describe yourself</span><br><span class=\"line\">keywords:</span><br><span class=\"line\">author: yourname</span><br><span class=\"line\">language: zh-Hans //简体中文</span><br><span class=\"line\">timezone:</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改菜单项\"><a href=\"#修改菜单项\" class=\"headerlink\" title=\"修改菜单项\"></a>修改菜单项</h3><p>在主题目录下修改配置文件_cofig.yml中的menu</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">menu:</span><br><span class=\"line\">  home: / || home</span><br><span class=\"line\">  about: /about/ || user</span><br><span class=\"line\">  tags: /tags/ || tags</span><br><span class=\"line\">  categories: /categories/ || th</span><br><span class=\"line\">  archives: /archives/ || archive</span><br><span class=\"line\">  #schedule: /schedule/ || calendar</span><br><span class=\"line\">  #sitemap: /sitemap.xml || sitemap</span><br><span class=\"line\">  #commonweal: /404/ || heartbeat</span><br></pre></td></tr></table></figure>\n<p>这些配置都要与你主题目录下的languages文件中对应的yml文档里配置相关联</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">menu:</span><br><span class=\"line\">  home: 首页</span><br><span class=\"line\">  archives: 归档</span><br><span class=\"line\">  categories: 分类</span><br><span class=\"line\">  tags: 标签</span><br><span class=\"line\">  about: 关于</span><br><span class=\"line\">  search: 搜索</span><br><span class=\"line\">  schedule: 日程表</span><br><span class=\"line\">  sitemap: 站点地图</span><br><span class=\"line\">  commonweal: 公益404</span><br></pre></td></tr></table></figure>\n<h3 id=\"限定主页文章高度\"><a href=\"#限定主页文章高度\" class=\"headerlink\" title=\"限定主页文章高度\"></a>限定主页文章高度</h3><p>修改主题目录下的值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">auto_excerpt:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  length: 150</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置头像\"><a href=\"#设置头像\" class=\"headerlink\" title=\"设置头像\"></a>设置头像</h3><p>修改主题目录下Sidebar Avatar的avatar值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Sidebar Avatar</span><br><span class=\"line\"># in theme directory(source/images): /images/avatar.gif</span><br><span class=\"line\"># in site  directory(source/uploads): /uploads/avatar.gif</span><br><span class=\"line\">avatar: /images/avatar.jpg</span><br></pre></td></tr></table></figure></p>\n<p>地址可以是网络地址，也可以是本地地址（放置在source/images/ 目录下）</p>\n<h3 id=\"添加标签页面\"><a href=\"#添加标签页面\" class=\"headerlink\" title=\"添加标签页面\"></a>添加标签页面</h3><p>点击标签，跳转的页面会显示page not found</p>\n<p>此时需要在站点目录的source文件夹里新建tags文件夹，并新建index.md，添加：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: tags</span><br><span class=\"line\">date: </span><br><span class=\"line\">type: &quot;tags&quot;</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>当要为某一篇文章添加标签，只需在blog/source/_post目录下的具体文章的tags中添加标签即可</p>\n<h3 id=\"实现点击出现桃心效果\"><a href=\"#实现点击出现桃心效果\" class=\"headerlink\" title=\"实现点击出现桃心效果\"></a>实现点击出现桃心效果</h3><p>将代码copy到/themes/next/source/js/src里面新建的love.js中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">! function(e, t, a) &#123;</span><br><span class=\"line\">    function n() &#123;</span><br><span class=\"line\">        c(&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &apos;&apos;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;), o(), r()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function r() &#123;</span><br><span class=\"line\">        for (var e = 0; e &lt; d.length; e++) d[e].alpha &lt;= 0 ? (t.body.removeChild(d[e].el), d.splice(e, 1)) : (d[e].y--, d[e].scale += .004, d[e].alpha -= .013, d[e].el.style.cssText = &quot;left:&quot; + d[e].x + &quot;px;top:&quot; + d[e].y + &quot;px;opacity:&quot; + d[e].alpha + &quot;;transform:scale(&quot; + d[e].scale + &quot;,&quot; + d[e].scale + &quot;) rotate(45deg);background:&quot; + d[e].color + &quot;;z-index:99999&quot;);</span><br><span class=\"line\">        requestAnimationFrame(r)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function o() &#123;</span><br><span class=\"line\">        var t = &quot;function&quot; == typeof e.onclick &amp;&amp; e.onclick;</span><br><span class=\"line\">        e.onclick = function(e) &#123;</span><br><span class=\"line\">            t &amp;&amp; t(), i(e)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function i(e) &#123;</span><br><span class=\"line\">        var a = t.createElement(&quot;div&quot;);</span><br><span class=\"line\">        a.className = &quot;heart&quot;, d.push(&#123;</span><br><span class=\"line\">            el: a,</span><br><span class=\"line\">            x: e.clientX - 5,</span><br><span class=\"line\">            y: e.clientY - 5,</span><br><span class=\"line\">            scale: 1,</span><br><span class=\"line\">            alpha: 1,</span><br><span class=\"line\">            color: s()</span><br><span class=\"line\">        &#125;), t.body.appendChild(a)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function c(e) &#123;</span><br><span class=\"line\">        var a = t.createElement(&quot;style&quot;);</span><br><span class=\"line\">        a.type = &quot;text/css&quot;;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            a.appendChild(t.createTextNode(e))</span><br><span class=\"line\">        &#125; catch (t) &#123;</span><br><span class=\"line\">            a.styleSheet.cssText = e</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function s() &#123;</span><br><span class=\"line\">        return &quot;rgb(&quot; + ~~(255 * Math.random()) + &quot;,&quot; + ~~(255 * Math.random()) + &quot;,&quot; + ~~(255 * Math.random()) + &quot;)&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var d = [];</span><br><span class=\"line\">    e.requestAnimationFrame = function() &#123;</span><br><span class=\"line\">        return e.requestAnimationFrame || e.webkitRequestAnimationFrame || e.mozRequestAnimationFrame || e.oRequestAnimationFrame || e.msRequestAnimationFrame || function(e) &#123;</span><br><span class=\"line\">            setTimeout(e, 1e3 / 60)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;(), n()</span><br><span class=\"line\">&#125;(window, document);</span><br></pre></td></tr></table></figure>\n<p>打开\\themes\\next\\layout_layout.swig文件,在末尾（在前面引用会出现找不到的bug） ，引用love.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;/js/src/love.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加动态背景\"><a href=\"#添加动态背景\" class=\"headerlink\" title=\"添加动态背景\"></a>添加动态背景</h3><p>打开\\themes\\next\\layout_layout.swig文件，<br>在 之前添加代码(注意不要放在&lt; /head&gt;的后面)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% if theme.canvas_nest %&#125;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>\n<p>打开开\\themes\\next_config.yml,在里面修改为如下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">canvas_nest: true</span><br></pre></td></tr></table></figure>\n<h3 id=\"在网站底部加上访问量\"><a href=\"#在网站底部加上访问量\" class=\"headerlink\" title=\"在网站底部加上访问量\"></a>在网站底部加上访问量</h3><p>打开\\themes\\next\\layout_partials\\footer.swig文件,在类copyright前加上这段代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script async src=&quot;https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>然后在合适的位置添加显示统计的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;powered-by&quot;&gt;</span><br><span class=\"line\">&lt;i class=&quot;fa fa-user-md&quot;&gt;&lt;/i&gt;&lt;span id=&quot;busuanzi_container_site_uv&quot;&gt;</span><br><span class=\"line\">  本站访客数:&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;</span><br><span class=\"line\">&lt;/span&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"在每篇文章末尾添加“本文结束”标记\"><a href=\"#在每篇文章末尾添加“本文结束”标记\" class=\"headerlink\" title=\"在每篇文章末尾添加“本文结束”标记\"></a>在每篇文章末尾添加“本文结束”标记</h3><p>在路径 \\themes\\next\\layout_macro 中新建 passage-end-tag.swig 文件,并添加以下内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &#123;% if not is_index %&#125;</span><br><span class=\"line\">        &lt;div style=&quot;text-align:center;color: #ccc;font-size:14px;&quot;&gt;-------------本文结束&lt;i class=&quot;fa fa-paw&quot;&gt;&lt;/i&gt;感谢您的阅读-------------&lt;/div&gt;</span><br><span class=\"line\">    &#123;% endif %&#125;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>接着打开\\themes\\next\\layout_macro\\post.swig文件，在post-body 之后， post-footer 之前添加如下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &#123;% if not is_index %&#125;</span><br><span class=\"line\">    &#123;% include &apos;passage-end-tag.swig&apos; %&#125;</span><br><span class=\"line\">  &#123;% endif %&#125;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>打开主题配置文件,在末尾添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 文章末尾添加“本文结束”标记</span><br><span class=\"line\">passage_end_tag:</span><br><span class=\"line\">  enabled: true</span><br></pre></td></tr></table></figure>\n<h3 id=\"侧边栏社交链接\"><a href=\"#侧边栏社交链接\" class=\"headerlink\" title=\"侧边栏社交链接\"></a>侧边栏社交链接</h3><p>在主题配置文件中修改：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Social links</span><br><span class=\"line\">social:</span><br><span class=\"line\">  GitHub: https://github.com/your-user-name</span><br><span class=\"line\">  Twitter: https://twitter.com/your-user-name</span><br><span class=\"line\">  微博: http://weibo.com/your-user-name</span><br><span class=\"line\"></span><br><span class=\"line\"># Social Icons</span><br><span class=\"line\">social_icons:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  # Icon Mappings</span><br><span class=\"line\">  GitHub: github</span><br><span class=\"line\">  Twitter: twitter</span><br><span class=\"line\">  微博: weibo</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加小图标\"><a href=\"#添加小图标\" class=\"headerlink\" title=\"添加小图标\"></a>添加小图标</h3><p>在主题配置文件中修改：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">favicon:</span><br><span class=\"line\">  #small: /images/favicon.ico</span><br><span class=\"line\">  medium: /images/favicon.ico</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"http://theme-next.iissnan.com/getting-started.html#avatar-setting\" target=\"_blank\" rel=\"noopener\">NexT主题美化</a></p>\n</blockquote>\n<p>除了NexT还有很多其他好看的主题，百度会有很多方法的</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"主题安装\"><a href=\"#主题安装\" class=\"headerlink\" title=\"主题安装\"></a>主题安装</h1><h3 id=\"安装NexT\"><a href=\"#安装NexT\" class=\"headerlink\" title=\"安装NexT\"></a>安装NexT</h3><p>在站点目录下（hexo），输入命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n<h3 id=\"启用主题\"><a href=\"#启用主题\" class=\"headerlink\" title=\"启用主题\"></a>启用主题</h3><p>在站点目录中（blog），打开配置文件_config.yml，修改<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">theme：next</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"验证主题\"><a href=\"#验证主题\" class=\"headerlink\" title=\"验证主题\"></a>验证主题</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo s</span><br></pre></td></tr></table></figure>\n<h1 id=\"主题设定\"><a href=\"#主题设定\" class=\"headerlink\" title=\"主题设定\"></a>主题设定</h1><p>以下所有设置注意格式</p>\n<h3 id=\"NexT主题设定\"><a href=\"#NexT主题设定\" class=\"headerlink\" title=\"NexT主题设定\"></a>NexT主题设定</h3><p>可以在next主题目录下的_config.yml文件中修改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Schemes</span><br><span class=\"line\">scheme: Muse</span><br><span class=\"line\">#scheme: Mist</span><br><span class=\"line\">#scheme: Pisces</span><br><span class=\"line\">#scheme: Gemini</span><br></pre></td></tr></table></figure>\n<h3 id=\"基础设置\"><a href=\"#基础设置\" class=\"headerlink\" title=\"基础设置\"></a>基础设置</h3><p>在站点目录下的配置文件_cofig.yml中修改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Site</span><br><span class=\"line\">title: your blog title</span><br><span class=\"line\">subtitle:</span><br><span class=\"line\">description: describe yourself</span><br><span class=\"line\">keywords:</span><br><span class=\"line\">author: yourname</span><br><span class=\"line\">language: zh-Hans //简体中文</span><br><span class=\"line\">timezone:</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改菜单项\"><a href=\"#修改菜单项\" class=\"headerlink\" title=\"修改菜单项\"></a>修改菜单项</h3><p>在主题目录下修改配置文件_cofig.yml中的menu</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">menu:</span><br><span class=\"line\">  home: / || home</span><br><span class=\"line\">  about: /about/ || user</span><br><span class=\"line\">  tags: /tags/ || tags</span><br><span class=\"line\">  categories: /categories/ || th</span><br><span class=\"line\">  archives: /archives/ || archive</span><br><span class=\"line\">  #schedule: /schedule/ || calendar</span><br><span class=\"line\">  #sitemap: /sitemap.xml || sitemap</span><br><span class=\"line\">  #commonweal: /404/ || heartbeat</span><br></pre></td></tr></table></figure>\n<p>这些配置都要与你主题目录下的languages文件中对应的yml文档里配置相关联</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">menu:</span><br><span class=\"line\">  home: 首页</span><br><span class=\"line\">  archives: 归档</span><br><span class=\"line\">  categories: 分类</span><br><span class=\"line\">  tags: 标签</span><br><span class=\"line\">  about: 关于</span><br><span class=\"line\">  search: 搜索</span><br><span class=\"line\">  schedule: 日程表</span><br><span class=\"line\">  sitemap: 站点地图</span><br><span class=\"line\">  commonweal: 公益404</span><br></pre></td></tr></table></figure>\n<h3 id=\"限定主页文章高度\"><a href=\"#限定主页文章高度\" class=\"headerlink\" title=\"限定主页文章高度\"></a>限定主页文章高度</h3><p>修改主题目录下的值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">auto_excerpt:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  length: 150</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置头像\"><a href=\"#设置头像\" class=\"headerlink\" title=\"设置头像\"></a>设置头像</h3><p>修改主题目录下Sidebar Avatar的avatar值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Sidebar Avatar</span><br><span class=\"line\"># in theme directory(source/images): /images/avatar.gif</span><br><span class=\"line\"># in site  directory(source/uploads): /uploads/avatar.gif</span><br><span class=\"line\">avatar: /images/avatar.jpg</span><br></pre></td></tr></table></figure></p>\n<p>地址可以是网络地址，也可以是本地地址（放置在source/images/ 目录下）</p>\n<h3 id=\"添加标签页面\"><a href=\"#添加标签页面\" class=\"headerlink\" title=\"添加标签页面\"></a>添加标签页面</h3><p>点击标签，跳转的页面会显示page not found</p>\n<p>此时需要在站点目录的source文件夹里新建tags文件夹，并新建index.md，添加：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: tags</span><br><span class=\"line\">date: </span><br><span class=\"line\">type: &quot;tags&quot;</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>当要为某一篇文章添加标签，只需在blog/source/_post目录下的具体文章的tags中添加标签即可</p>\n<h3 id=\"实现点击出现桃心效果\"><a href=\"#实现点击出现桃心效果\" class=\"headerlink\" title=\"实现点击出现桃心效果\"></a>实现点击出现桃心效果</h3><p>将代码copy到/themes/next/source/js/src里面新建的love.js中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">! function(e, t, a) &#123;</span><br><span class=\"line\">    function n() &#123;</span><br><span class=\"line\">        c(&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &apos;&apos;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;), o(), r()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function r() &#123;</span><br><span class=\"line\">        for (var e = 0; e &lt; d.length; e++) d[e].alpha &lt;= 0 ? (t.body.removeChild(d[e].el), d.splice(e, 1)) : (d[e].y--, d[e].scale += .004, d[e].alpha -= .013, d[e].el.style.cssText = &quot;left:&quot; + d[e].x + &quot;px;top:&quot; + d[e].y + &quot;px;opacity:&quot; + d[e].alpha + &quot;;transform:scale(&quot; + d[e].scale + &quot;,&quot; + d[e].scale + &quot;) rotate(45deg);background:&quot; + d[e].color + &quot;;z-index:99999&quot;);</span><br><span class=\"line\">        requestAnimationFrame(r)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function o() &#123;</span><br><span class=\"line\">        var t = &quot;function&quot; == typeof e.onclick &amp;&amp; e.onclick;</span><br><span class=\"line\">        e.onclick = function(e) &#123;</span><br><span class=\"line\">            t &amp;&amp; t(), i(e)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function i(e) &#123;</span><br><span class=\"line\">        var a = t.createElement(&quot;div&quot;);</span><br><span class=\"line\">        a.className = &quot;heart&quot;, d.push(&#123;</span><br><span class=\"line\">            el: a,</span><br><span class=\"line\">            x: e.clientX - 5,</span><br><span class=\"line\">            y: e.clientY - 5,</span><br><span class=\"line\">            scale: 1,</span><br><span class=\"line\">            alpha: 1,</span><br><span class=\"line\">            color: s()</span><br><span class=\"line\">        &#125;), t.body.appendChild(a)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function c(e) &#123;</span><br><span class=\"line\">        var a = t.createElement(&quot;style&quot;);</span><br><span class=\"line\">        a.type = &quot;text/css&quot;;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            a.appendChild(t.createTextNode(e))</span><br><span class=\"line\">        &#125; catch (t) &#123;</span><br><span class=\"line\">            a.styleSheet.cssText = e</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function s() &#123;</span><br><span class=\"line\">        return &quot;rgb(&quot; + ~~(255 * Math.random()) + &quot;,&quot; + ~~(255 * Math.random()) + &quot;,&quot; + ~~(255 * Math.random()) + &quot;)&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var d = [];</span><br><span class=\"line\">    e.requestAnimationFrame = function() &#123;</span><br><span class=\"line\">        return e.requestAnimationFrame || e.webkitRequestAnimationFrame || e.mozRequestAnimationFrame || e.oRequestAnimationFrame || e.msRequestAnimationFrame || function(e) &#123;</span><br><span class=\"line\">            setTimeout(e, 1e3 / 60)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;(), n()</span><br><span class=\"line\">&#125;(window, document);</span><br></pre></td></tr></table></figure>\n<p>打开\\themes\\next\\layout_layout.swig文件,在末尾（在前面引用会出现找不到的bug） ，引用love.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;/js/src/love.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加动态背景\"><a href=\"#添加动态背景\" class=\"headerlink\" title=\"添加动态背景\"></a>添加动态背景</h3><p>打开\\themes\\next\\layout_layout.swig文件，<br>在 之前添加代码(注意不要放在&lt; /head&gt;的后面)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% if theme.canvas_nest %&#125;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>\n<p>打开开\\themes\\next_config.yml,在里面修改为如下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">canvas_nest: true</span><br></pre></td></tr></table></figure>\n<h3 id=\"在网站底部加上访问量\"><a href=\"#在网站底部加上访问量\" class=\"headerlink\" title=\"在网站底部加上访问量\"></a>在网站底部加上访问量</h3><p>打开\\themes\\next\\layout_partials\\footer.swig文件,在类copyright前加上这段代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script async src=&quot;https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>然后在合适的位置添加显示统计的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;powered-by&quot;&gt;</span><br><span class=\"line\">&lt;i class=&quot;fa fa-user-md&quot;&gt;&lt;/i&gt;&lt;span id=&quot;busuanzi_container_site_uv&quot;&gt;</span><br><span class=\"line\">  本站访客数:&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;</span><br><span class=\"line\">&lt;/span&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"在每篇文章末尾添加“本文结束”标记\"><a href=\"#在每篇文章末尾添加“本文结束”标记\" class=\"headerlink\" title=\"在每篇文章末尾添加“本文结束”标记\"></a>在每篇文章末尾添加“本文结束”标记</h3><p>在路径 \\themes\\next\\layout_macro 中新建 passage-end-tag.swig 文件,并添加以下内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &#123;% if not is_index %&#125;</span><br><span class=\"line\">        &lt;div style=&quot;text-align:center;color: #ccc;font-size:14px;&quot;&gt;-------------本文结束&lt;i class=&quot;fa fa-paw&quot;&gt;&lt;/i&gt;感谢您的阅读-------------&lt;/div&gt;</span><br><span class=\"line\">    &#123;% endif %&#125;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>接着打开\\themes\\next\\layout_macro\\post.swig文件，在post-body 之后， post-footer 之前添加如下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &#123;% if not is_index %&#125;</span><br><span class=\"line\">    &#123;% include &apos;passage-end-tag.swig&apos; %&#125;</span><br><span class=\"line\">  &#123;% endif %&#125;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>打开主题配置文件,在末尾添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 文章末尾添加“本文结束”标记</span><br><span class=\"line\">passage_end_tag:</span><br><span class=\"line\">  enabled: true</span><br></pre></td></tr></table></figure>\n<h3 id=\"侧边栏社交链接\"><a href=\"#侧边栏社交链接\" class=\"headerlink\" title=\"侧边栏社交链接\"></a>侧边栏社交链接</h3><p>在主题配置文件中修改：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Social links</span><br><span class=\"line\">social:</span><br><span class=\"line\">  GitHub: https://github.com/your-user-name</span><br><span class=\"line\">  Twitter: https://twitter.com/your-user-name</span><br><span class=\"line\">  微博: http://weibo.com/your-user-name</span><br><span class=\"line\"></span><br><span class=\"line\"># Social Icons</span><br><span class=\"line\">social_icons:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  # Icon Mappings</span><br><span class=\"line\">  GitHub: github</span><br><span class=\"line\">  Twitter: twitter</span><br><span class=\"line\">  微博: weibo</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加小图标\"><a href=\"#添加小图标\" class=\"headerlink\" title=\"添加小图标\"></a>添加小图标</h3><p>在主题配置文件中修改：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">favicon:</span><br><span class=\"line\">  #small: /images/favicon.ico</span><br><span class=\"line\">  medium: /images/favicon.ico</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"http://theme-next.iissnan.com/getting-started.html#avatar-setting\" target=\"_blank\" rel=\"noopener\">NexT主题美化</a></p>\n</blockquote>\n<p>除了NexT还有很多其他好看的主题，百度会有很多方法的</p>\n"},{"title":"Hexo+Github 搭建属于自己的博客（基础）","date":"2018-05-02T16:00:00.000Z","comments":1,"_content":"\n# 搭建环境准备\n### Node.js 的安装和准备\n\n```\n$ node -v\n$ npm -v\n```\n###  git的安装和准备\n\n```\n$ git --version\n```\n\n### github账户的配置\n\n- github账户注册\n- 创建新仓库\n\n![image](http://ww4.sinaimg.cn/large/9fe4afa0gw1faljv7hoqhj20p40fz0vo.jpg)\n\n注意：仓库名称一定为  github用户名.github.io\n\n- 仓库设置\n\n![image](http://ww1.sinaimg.cn/large/9fe4afa0gw1falk4end8ij20kg0cbtbl.jpg)\n\n接下来开启github pages功能 ，点击界面右侧的 Settings，你将会打开这个库的settings页面，向下拖动，直到看见GitHub Pages\n\n![image](http://ww3.sinaimg.cn/large/9fe4afa0gw1falk1s5xq7j20q204kq3o.jpg)\n\n\n\n![image](http://upload-images.jianshu.io/upload_images/1244124-5e0f79282ae8140c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500)\n\n\n# 安装hexo \n在任意一个地方创建文件夹hexo，进入到该目录输入：\n\n```\n$ npm install hexo-cli -g\n```\n然后可能会看到一个WARN，并不会影响操作，继续输入：\n\n```\n$ npm install hexo --save\n```\n\n```\n$ hexo -v\n```\n### hexo的相关配置\n\n- 初始化hexo\n\n```\n$ hexo init <新文件夹> \n$ cd <新文件夹>\n```\n\n- 首次体验hexo\n\n```\n$ hexo g\n$ hexo s  //若一直无法跳转，则是端口被占用\n$ hexo server -p 5000 //改变端口号\n```\n\n### 配置Git个人信息\n如果之前已经配置好git个人信息，请跳过这一个步骤\n- 设置Git的user name和email\n\n```\n$ git config --global user.name \"yourusername\"\n$ git config --global user.email \"youremail\"\n```\n- 生成密钥\n\n\n```\n$  ssh-keygen -t rsa -C \"youremail\"\n```\n\n### 配置Deployment\n\n在_config.yml文件中，找到Deployment，然后按照如下修改：\n\n```\ndeploy:\n  type: git\n  repo: https://github.com/yourname/yourname.github.io.git\n  branch: master\n  \n```\n\n# 写博客、发布新文章\n\n- 新建一篇博客\n\n```\n$ hexo new post \"article title\"\n```\n用MarDown编辑器打开就可以编辑文章了\n\n- 生成、部署\n\n```\n$ hexo g   // 生成\n$ hexo s   // 本地预览\n$ hexo d   // 部署\n```\n\n```\n$ hexo d -g //在部署前先生成\n```\n\n- 踩坑提醒\n\n注意需要提前安装一个扩展\n\n```\nnpm install hexo-deployer-git --save\n```\n> 如果没有执行这行命令，将会提醒\n\n    deloyer not found:git\n\n","source":"_posts/其他/Hexo+Github 搭建属于自己的博客（基础）.md","raw":"---\ntitle: Hexo+Github 搭建属于自己的博客（基础）\ndate: 2018-05-03\ntags: [博客搭建]\ncategories: 博客搭建\ncomments: true\n---\n\n# 搭建环境准备\n### Node.js 的安装和准备\n\n```\n$ node -v\n$ npm -v\n```\n###  git的安装和准备\n\n```\n$ git --version\n```\n\n### github账户的配置\n\n- github账户注册\n- 创建新仓库\n\n![image](http://ww4.sinaimg.cn/large/9fe4afa0gw1faljv7hoqhj20p40fz0vo.jpg)\n\n注意：仓库名称一定为  github用户名.github.io\n\n- 仓库设置\n\n![image](http://ww1.sinaimg.cn/large/9fe4afa0gw1falk4end8ij20kg0cbtbl.jpg)\n\n接下来开启github pages功能 ，点击界面右侧的 Settings，你将会打开这个库的settings页面，向下拖动，直到看见GitHub Pages\n\n![image](http://ww3.sinaimg.cn/large/9fe4afa0gw1falk1s5xq7j20q204kq3o.jpg)\n\n\n\n![image](http://upload-images.jianshu.io/upload_images/1244124-5e0f79282ae8140c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500)\n\n\n# 安装hexo \n在任意一个地方创建文件夹hexo，进入到该目录输入：\n\n```\n$ npm install hexo-cli -g\n```\n然后可能会看到一个WARN，并不会影响操作，继续输入：\n\n```\n$ npm install hexo --save\n```\n\n```\n$ hexo -v\n```\n### hexo的相关配置\n\n- 初始化hexo\n\n```\n$ hexo init <新文件夹> \n$ cd <新文件夹>\n```\n\n- 首次体验hexo\n\n```\n$ hexo g\n$ hexo s  //若一直无法跳转，则是端口被占用\n$ hexo server -p 5000 //改变端口号\n```\n\n### 配置Git个人信息\n如果之前已经配置好git个人信息，请跳过这一个步骤\n- 设置Git的user name和email\n\n```\n$ git config --global user.name \"yourusername\"\n$ git config --global user.email \"youremail\"\n```\n- 生成密钥\n\n\n```\n$  ssh-keygen -t rsa -C \"youremail\"\n```\n\n### 配置Deployment\n\n在_config.yml文件中，找到Deployment，然后按照如下修改：\n\n```\ndeploy:\n  type: git\n  repo: https://github.com/yourname/yourname.github.io.git\n  branch: master\n  \n```\n\n# 写博客、发布新文章\n\n- 新建一篇博客\n\n```\n$ hexo new post \"article title\"\n```\n用MarDown编辑器打开就可以编辑文章了\n\n- 生成、部署\n\n```\n$ hexo g   // 生成\n$ hexo s   // 本地预览\n$ hexo d   // 部署\n```\n\n```\n$ hexo d -g //在部署前先生成\n```\n\n- 踩坑提醒\n\n注意需要提前安装一个扩展\n\n```\nnpm install hexo-deployer-git --save\n```\n> 如果没有执行这行命令，将会提醒\n\n    deloyer not found:git\n\n","slug":"其他/Hexo+Github 搭建属于自己的博客（基础）","published":1,"updated":"2022-07-22T07:59:39.026Z","layout":"post","photos":[],"link":"","_id":"cl5wb2yml00ascj38hui4yiqq","content":"<h1 id=\"搭建环境准备\"><a href=\"#搭建环境准备\" class=\"headerlink\" title=\"搭建环境准备\"></a>搭建环境准备</h1><h3 id=\"Node-js-的安装和准备\"><a href=\"#Node-js-的安装和准备\" class=\"headerlink\" title=\"Node.js 的安装和准备\"></a>Node.js 的安装和准备</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node -v</span><br><span class=\"line\">$ npm -v</span><br></pre></td></tr></table></figure>\n<h3 id=\"git的安装和准备\"><a href=\"#git的安装和准备\" class=\"headerlink\" title=\"git的安装和准备\"></a>git的安装和准备</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git --version</span><br></pre></td></tr></table></figure>\n<h3 id=\"github账户的配置\"><a href=\"#github账户的配置\" class=\"headerlink\" title=\"github账户的配置\"></a>github账户的配置</h3><ul>\n<li>github账户注册</li>\n<li>创建新仓库</li>\n</ul>\n<p><img src=\"http://ww4.sinaimg.cn/large/9fe4afa0gw1faljv7hoqhj20p40fz0vo.jpg\" alt=\"image\"></p>\n<p>注意：仓库名称一定为  github用户名.github.io</p>\n<ul>\n<li>仓库设置</li>\n</ul>\n<p><img src=\"http://ww1.sinaimg.cn/large/9fe4afa0gw1falk4end8ij20kg0cbtbl.jpg\" alt=\"image\"></p>\n<p>接下来开启github pages功能 ，点击界面右侧的 Settings，你将会打开这个库的settings页面，向下拖动，直到看见GitHub Pages</p>\n<p><img src=\"http://ww3.sinaimg.cn/large/9fe4afa0gw1falk1s5xq7j20q204kq3o.jpg\" alt=\"image\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1244124-5e0f79282ae8140c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500\" alt=\"image\"></p>\n<h1 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h1><p>在任意一个地方创建文件夹hexo，进入到该目录输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure>\n<p>然后可能会看到一个WARN，并不会影响操作，继续输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo --save</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo -v</span><br></pre></td></tr></table></figure>\n<h3 id=\"hexo的相关配置\"><a href=\"#hexo的相关配置\" class=\"headerlink\" title=\"hexo的相关配置\"></a>hexo的相关配置</h3><ul>\n<li>初始化hexo</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init &lt;新文件夹&gt; </span><br><span class=\"line\">$ cd &lt;新文件夹&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>首次体验hexo</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo s  //若一直无法跳转，则是端口被占用</span><br><span class=\"line\">$ hexo server -p 5000 //改变端口号</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置Git个人信息\"><a href=\"#配置Git个人信息\" class=\"headerlink\" title=\"配置Git个人信息\"></a>配置Git个人信息</h3><p>如果之前已经配置好git个人信息，请跳过这一个步骤</p>\n<ul>\n<li>设置Git的user name和email</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name &quot;yourusername&quot;</span><br><span class=\"line\">$ git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>生成密钥</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  ssh-keygen -t rsa -C &quot;youremail&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置Deployment\"><a href=\"#配置Deployment\" class=\"headerlink\" title=\"配置Deployment\"></a>配置Deployment</h3><p>在_config.yml文件中，找到Deployment，然后按照如下修改：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https://github.com/yourname/yourname.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<h1 id=\"写博客、发布新文章\"><a href=\"#写博客、发布新文章\" class=\"headerlink\" title=\"写博客、发布新文章\"></a>写博客、发布新文章</h1><ul>\n<li>新建一篇博客</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new post &quot;article title&quot;</span><br></pre></td></tr></table></figure>\n<p>用MarDown编辑器打开就可以编辑文章了</p>\n<ul>\n<li>生成、部署</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g   // 生成</span><br><span class=\"line\">$ hexo s   // 本地预览</span><br><span class=\"line\">$ hexo d   // 部署</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo d -g //在部署前先生成</span><br></pre></td></tr></table></figure>\n<ul>\n<li>踩坑提醒</li>\n</ul>\n<p>注意需要提前安装一个扩展</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果没有执行这行命令，将会提醒</p>\n</blockquote>\n<pre><code>deloyer not found:git\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"搭建环境准备\"><a href=\"#搭建环境准备\" class=\"headerlink\" title=\"搭建环境准备\"></a>搭建环境准备</h1><h3 id=\"Node-js-的安装和准备\"><a href=\"#Node-js-的安装和准备\" class=\"headerlink\" title=\"Node.js 的安装和准备\"></a>Node.js 的安装和准备</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node -v</span><br><span class=\"line\">$ npm -v</span><br></pre></td></tr></table></figure>\n<h3 id=\"git的安装和准备\"><a href=\"#git的安装和准备\" class=\"headerlink\" title=\"git的安装和准备\"></a>git的安装和准备</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git --version</span><br></pre></td></tr></table></figure>\n<h3 id=\"github账户的配置\"><a href=\"#github账户的配置\" class=\"headerlink\" title=\"github账户的配置\"></a>github账户的配置</h3><ul>\n<li>github账户注册</li>\n<li>创建新仓库</li>\n</ul>\n<p><img src=\"http://ww4.sinaimg.cn/large/9fe4afa0gw1faljv7hoqhj20p40fz0vo.jpg\" alt=\"image\"></p>\n<p>注意：仓库名称一定为  github用户名.github.io</p>\n<ul>\n<li>仓库设置</li>\n</ul>\n<p><img src=\"http://ww1.sinaimg.cn/large/9fe4afa0gw1falk4end8ij20kg0cbtbl.jpg\" alt=\"image\"></p>\n<p>接下来开启github pages功能 ，点击界面右侧的 Settings，你将会打开这个库的settings页面，向下拖动，直到看见GitHub Pages</p>\n<p><img src=\"http://ww3.sinaimg.cn/large/9fe4afa0gw1falk1s5xq7j20q204kq3o.jpg\" alt=\"image\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1244124-5e0f79282ae8140c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500\" alt=\"image\"></p>\n<h1 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h1><p>在任意一个地方创建文件夹hexo，进入到该目录输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure>\n<p>然后可能会看到一个WARN，并不会影响操作，继续输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo --save</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo -v</span><br></pre></td></tr></table></figure>\n<h3 id=\"hexo的相关配置\"><a href=\"#hexo的相关配置\" class=\"headerlink\" title=\"hexo的相关配置\"></a>hexo的相关配置</h3><ul>\n<li>初始化hexo</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init &lt;新文件夹&gt; </span><br><span class=\"line\">$ cd &lt;新文件夹&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>首次体验hexo</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo s  //若一直无法跳转，则是端口被占用</span><br><span class=\"line\">$ hexo server -p 5000 //改变端口号</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置Git个人信息\"><a href=\"#配置Git个人信息\" class=\"headerlink\" title=\"配置Git个人信息\"></a>配置Git个人信息</h3><p>如果之前已经配置好git个人信息，请跳过这一个步骤</p>\n<ul>\n<li>设置Git的user name和email</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name &quot;yourusername&quot;</span><br><span class=\"line\">$ git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>生成密钥</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  ssh-keygen -t rsa -C &quot;youremail&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置Deployment\"><a href=\"#配置Deployment\" class=\"headerlink\" title=\"配置Deployment\"></a>配置Deployment</h3><p>在_config.yml文件中，找到Deployment，然后按照如下修改：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https://github.com/yourname/yourname.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<h1 id=\"写博客、发布新文章\"><a href=\"#写博客、发布新文章\" class=\"headerlink\" title=\"写博客、发布新文章\"></a>写博客、发布新文章</h1><ul>\n<li>新建一篇博客</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new post &quot;article title&quot;</span><br></pre></td></tr></table></figure>\n<p>用MarDown编辑器打开就可以编辑文章了</p>\n<ul>\n<li>生成、部署</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g   // 生成</span><br><span class=\"line\">$ hexo s   // 本地预览</span><br><span class=\"line\">$ hexo d   // 部署</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo d -g //在部署前先生成</span><br></pre></td></tr></table></figure>\n<ul>\n<li>踩坑提醒</li>\n</ul>\n<p>注意需要提前安装一个扩展</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果没有执行这行命令，将会提醒</p>\n</blockquote>\n<pre><code>deloyer not found:git\n</code></pre>"},{"title":"安全：XSS和CSRF","date":"2020-05-13T16:00:00.000Z","comments":1,"_content":"\n## XSS攻击（跨站脚本攻击）\n### 原理\n恶意攻击者往web页面里插入恶意可执行网页脚本代码，当用户浏览该页面时，嵌入其中web里面的脚本代码会被执行，从而达到攻击者盗取用户信息或其他侵犯用户安全隐私的目的。\n### 分类\n- 存储型XSS   \n恶意代码存储在数据库中\n- 反射型XSS   \n恶意代码存储在url中\n- DOM型XSS   \n取出和执行恶意代码都是浏览器端完成\n### 防御\n#### 开启CSP\n建立白名单，明确告诉浏览器哪些外部资源可以加载和执行。\n- 设置http header中的Content-Security-Policy\n- 设置meta标签\n```\n<meta http-equiv=\"Content-Security-Policy\">\n```\n\n#### 输入输出过滤\n前端负责，后端也要做相同的过滤检查，因为攻击者完全可以绕过正常的输入流程，直接利用相关接口向服务器发送设置。\n#### 转义字符\n转义输入输出的内容，对于引号、尖括号、斜杠进行转义。\n\n#### cookie\nweb应用程序在设置cookie时，将其属性设为HttpOnly，这样设置的cookie，js就无法进行读写，就可以预防XSS攻击窃取用户cookie，保护用户cookie信息。\n\n## CSRF攻击（跨站请求伪造）\n### 原理\n攻击者通过一些技术手段欺骗用户的浏览器去訪问一个自己以前认证过的站点并运行一些操作。\n\n利用用户已登录的身份，在用户毫不知情的情况下，以用户的名义完成非法操作。可以这么理解：攻击者盗用了你的身份，以你的名义发送恶意请求。\n\n一般发起攻击的是第三方网站。是利用用户的登录凭证，冒用用户信息，不能获取用户的数据。    \n\nCSRF攻击是源于WEB的隐式身份验证机制。WEB的身份验证机制虽然可以保证一个请求是来自于某个用户的浏览器，但却无法保证该请求是用户批准发送的。\n\n\n\n### 分类\n- get类型  \n可以将get请求嵌入img标签，打开页面自动发送请求。\n- post类型  \n可以利用自动提交的form表单，访问页面就会自动提交。\n- 链接型  \n需要用户点击链接才会触发。\n### 防御\n#### post\n尽量使用post请求，避免get请求。\n\n#### cookie\n对cookie设置SameSite属性。该属性表示cookie不随跨域请求发送，可以很大程度减少csrf攻击。\n\n#### token\n\n1. 用户访问某个表单页面。\n2. 服务端生成一个Token，放在用户的Session或者浏览器的Cookie中。\n3. 在页面表单附带上Token参数。\n4. 用户发送请求时以参数的形式带上本次页面中生成的token，服务端验证表单中的Token是否与用户Session（或Cookies）中的Token一致，一致为合法请求，不是则非法请求。\n> 仅仅用来防御csrf攻击，当加上xss攻击时，无用\n\n#### 验证码\n\n### xss和csrf\n- 通常来说csrf是由xss引起的\n- xss是代码注入问题，csrf是http问题\n\n### 同源策略\n同源策略是浏览器的一个安全功能，不同源的客户端脚本在没有明确授权的情况下，不能读写对方资源。所以a.com下的js脚本采用ajax读取b.com里面的文件数据是会报错的。\n\n不受同源策略限制的：\n- 页面中的链接，重定向以及表单提交是不会受到同源策略限制的。\n- 跨域资源的引入是可以的。但是js不能读写加载的内容。如嵌入到页面中的script标签的src属性、img标签、link标签、iframe标签等。\n- 通过标签的方式发起的请求不受同源策略的限制。且发送请求时浏览器会携带对应的cookie。\n\n## SQL注入\n### 原理\n通过传入一些特殊字符，从而达到欺骗服务器执行恶意的SQL命令的目的。\n\n如输入特殊的用户名\n\n```\n//理想中的输入：admin  password\nSELECT * FROM user WHERE username='admin' AND psw='password'\n\n//特殊用户名：admin' --\nSELECT * FROM user WHERE username='admin' --' AND psw='xxxx'\n//在SQL中，--是注释后面的内容的意思\n```\n\n### 防御\n- 严格限制web应用的数据库的操作权限。\n- 后端代码检查输入的数据是否符合预期。\n- 对特殊字符进行转义处理。","source":"_posts/其他/安全：XSS和CSRF.md","raw":"---\ntitle: 安全：XSS和CSRF\ndate: 2020-05-14\ntags: [安全]\ncategories: 安全\ncomments: true\n---\n\n## XSS攻击（跨站脚本攻击）\n### 原理\n恶意攻击者往web页面里插入恶意可执行网页脚本代码，当用户浏览该页面时，嵌入其中web里面的脚本代码会被执行，从而达到攻击者盗取用户信息或其他侵犯用户安全隐私的目的。\n### 分类\n- 存储型XSS   \n恶意代码存储在数据库中\n- 反射型XSS   \n恶意代码存储在url中\n- DOM型XSS   \n取出和执行恶意代码都是浏览器端完成\n### 防御\n#### 开启CSP\n建立白名单，明确告诉浏览器哪些外部资源可以加载和执行。\n- 设置http header中的Content-Security-Policy\n- 设置meta标签\n```\n<meta http-equiv=\"Content-Security-Policy\">\n```\n\n#### 输入输出过滤\n前端负责，后端也要做相同的过滤检查，因为攻击者完全可以绕过正常的输入流程，直接利用相关接口向服务器发送设置。\n#### 转义字符\n转义输入输出的内容，对于引号、尖括号、斜杠进行转义。\n\n#### cookie\nweb应用程序在设置cookie时，将其属性设为HttpOnly，这样设置的cookie，js就无法进行读写，就可以预防XSS攻击窃取用户cookie，保护用户cookie信息。\n\n## CSRF攻击（跨站请求伪造）\n### 原理\n攻击者通过一些技术手段欺骗用户的浏览器去訪问一个自己以前认证过的站点并运行一些操作。\n\n利用用户已登录的身份，在用户毫不知情的情况下，以用户的名义完成非法操作。可以这么理解：攻击者盗用了你的身份，以你的名义发送恶意请求。\n\n一般发起攻击的是第三方网站。是利用用户的登录凭证，冒用用户信息，不能获取用户的数据。    \n\nCSRF攻击是源于WEB的隐式身份验证机制。WEB的身份验证机制虽然可以保证一个请求是来自于某个用户的浏览器，但却无法保证该请求是用户批准发送的。\n\n\n\n### 分类\n- get类型  \n可以将get请求嵌入img标签，打开页面自动发送请求。\n- post类型  \n可以利用自动提交的form表单，访问页面就会自动提交。\n- 链接型  \n需要用户点击链接才会触发。\n### 防御\n#### post\n尽量使用post请求，避免get请求。\n\n#### cookie\n对cookie设置SameSite属性。该属性表示cookie不随跨域请求发送，可以很大程度减少csrf攻击。\n\n#### token\n\n1. 用户访问某个表单页面。\n2. 服务端生成一个Token，放在用户的Session或者浏览器的Cookie中。\n3. 在页面表单附带上Token参数。\n4. 用户发送请求时以参数的形式带上本次页面中生成的token，服务端验证表单中的Token是否与用户Session（或Cookies）中的Token一致，一致为合法请求，不是则非法请求。\n> 仅仅用来防御csrf攻击，当加上xss攻击时，无用\n\n#### 验证码\n\n### xss和csrf\n- 通常来说csrf是由xss引起的\n- xss是代码注入问题，csrf是http问题\n\n### 同源策略\n同源策略是浏览器的一个安全功能，不同源的客户端脚本在没有明确授权的情况下，不能读写对方资源。所以a.com下的js脚本采用ajax读取b.com里面的文件数据是会报错的。\n\n不受同源策略限制的：\n- 页面中的链接，重定向以及表单提交是不会受到同源策略限制的。\n- 跨域资源的引入是可以的。但是js不能读写加载的内容。如嵌入到页面中的script标签的src属性、img标签、link标签、iframe标签等。\n- 通过标签的方式发起的请求不受同源策略的限制。且发送请求时浏览器会携带对应的cookie。\n\n## SQL注入\n### 原理\n通过传入一些特殊字符，从而达到欺骗服务器执行恶意的SQL命令的目的。\n\n如输入特殊的用户名\n\n```\n//理想中的输入：admin  password\nSELECT * FROM user WHERE username='admin' AND psw='password'\n\n//特殊用户名：admin' --\nSELECT * FROM user WHERE username='admin' --' AND psw='xxxx'\n//在SQL中，--是注释后面的内容的意思\n```\n\n### 防御\n- 严格限制web应用的数据库的操作权限。\n- 后端代码检查输入的数据是否符合预期。\n- 对特殊字符进行转义处理。","slug":"其他/安全：XSS和CSRF","published":1,"updated":"2022-07-22T07:59:27.477Z","layout":"post","photos":[],"link":"","_id":"cl5wb2ymn00axcj38aj2zu21b","content":"<h2 id=\"XSS攻击（跨站脚本攻击）\"><a href=\"#XSS攻击（跨站脚本攻击）\" class=\"headerlink\" title=\"XSS攻击（跨站脚本攻击）\"></a>XSS攻击（跨站脚本攻击）</h2><h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>恶意攻击者往web页面里插入恶意可执行网页脚本代码，当用户浏览该页面时，嵌入其中web里面的脚本代码会被执行，从而达到攻击者盗取用户信息或其他侵犯用户安全隐私的目的。</p>\n<h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><ul>\n<li>存储型XSS<br>恶意代码存储在数据库中</li>\n<li>反射型XSS<br>恶意代码存储在url中</li>\n<li>DOM型XSS<br>取出和执行恶意代码都是浏览器端完成<h3 id=\"防御\"><a href=\"#防御\" class=\"headerlink\" title=\"防御\"></a>防御</h3><h4 id=\"开启CSP\"><a href=\"#开启CSP\" class=\"headerlink\" title=\"开启CSP\"></a>开启CSP</h4>建立白名单，明确告诉浏览器哪些外部资源可以加载和执行。</li>\n<li>设置http header中的Content-Security-Policy</li>\n<li>设置meta标签<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta http-equiv=&quot;Content-Security-Policy&quot;&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"输入输出过滤\"><a href=\"#输入输出过滤\" class=\"headerlink\" title=\"输入输出过滤\"></a>输入输出过滤</h4><p>前端负责，后端也要做相同的过滤检查，因为攻击者完全可以绕过正常的输入流程，直接利用相关接口向服务器发送设置。</p>\n<h4 id=\"转义字符\"><a href=\"#转义字符\" class=\"headerlink\" title=\"转义字符\"></a>转义字符</h4><p>转义输入输出的内容，对于引号、尖括号、斜杠进行转义。</p>\n<h4 id=\"cookie\"><a href=\"#cookie\" class=\"headerlink\" title=\"cookie\"></a>cookie</h4><p>web应用程序在设置cookie时，将其属性设为HttpOnly，这样设置的cookie，js就无法进行读写，就可以预防XSS攻击窃取用户cookie，保护用户cookie信息。</p>\n<h2 id=\"CSRF攻击（跨站请求伪造）\"><a href=\"#CSRF攻击（跨站请求伪造）\" class=\"headerlink\" title=\"CSRF攻击（跨站请求伪造）\"></a>CSRF攻击（跨站请求伪造）</h2><h3 id=\"原理-1\"><a href=\"#原理-1\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>攻击者通过一些技术手段欺骗用户的浏览器去訪问一个自己以前认证过的站点并运行一些操作。</p>\n<p>利用用户已登录的身份，在用户毫不知情的情况下，以用户的名义完成非法操作。可以这么理解：攻击者盗用了你的身份，以你的名义发送恶意请求。</p>\n<p>一般发起攻击的是第三方网站。是利用用户的登录凭证，冒用用户信息，不能获取用户的数据。    </p>\n<p>CSRF攻击是源于WEB的隐式身份验证机制。WEB的身份验证机制虽然可以保证一个请求是来自于某个用户的浏览器，但却无法保证该请求是用户批准发送的。</p>\n<h3 id=\"分类-1\"><a href=\"#分类-1\" class=\"headerlink\" title=\"分类\"></a>分类</h3><ul>\n<li>get类型<br>可以将get请求嵌入img标签，打开页面自动发送请求。</li>\n<li>post类型<br>可以利用自动提交的form表单，访问页面就会自动提交。</li>\n<li>链接型<br>需要用户点击链接才会触发。<h3 id=\"防御-1\"><a href=\"#防御-1\" class=\"headerlink\" title=\"防御\"></a>防御</h3><h4 id=\"post\"><a href=\"#post\" class=\"headerlink\" title=\"post\"></a>post</h4>尽量使用post请求，避免get请求。</li>\n</ul>\n<h4 id=\"cookie-1\"><a href=\"#cookie-1\" class=\"headerlink\" title=\"cookie\"></a>cookie</h4><p>对cookie设置SameSite属性。该属性表示cookie不随跨域请求发送，可以很大程度减少csrf攻击。</p>\n<h4 id=\"token\"><a href=\"#token\" class=\"headerlink\" title=\"token\"></a>token</h4><ol>\n<li>用户访问某个表单页面。</li>\n<li>服务端生成一个Token，放在用户的Session或者浏览器的Cookie中。</li>\n<li>在页面表单附带上Token参数。</li>\n<li>用户发送请求时以参数的形式带上本次页面中生成的token，服务端验证表单中的Token是否与用户Session（或Cookies）中的Token一致，一致为合法请求，不是则非法请求。<blockquote>\n<p>仅仅用来防御csrf攻击，当加上xss攻击时，无用</p>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"验证码\"><a href=\"#验证码\" class=\"headerlink\" title=\"验证码\"></a>验证码</h4><h3 id=\"xss和csrf\"><a href=\"#xss和csrf\" class=\"headerlink\" title=\"xss和csrf\"></a>xss和csrf</h3><ul>\n<li>通常来说csrf是由xss引起的</li>\n<li>xss是代码注入问题，csrf是http问题</li>\n</ul>\n<h3 id=\"同源策略\"><a href=\"#同源策略\" class=\"headerlink\" title=\"同源策略\"></a>同源策略</h3><p>同源策略是浏览器的一个安全功能，不同源的客户端脚本在没有明确授权的情况下，不能读写对方资源。所以a.com下的js脚本采用ajax读取b.com里面的文件数据是会报错的。</p>\n<p>不受同源策略限制的：</p>\n<ul>\n<li>页面中的链接，重定向以及表单提交是不会受到同源策略限制的。</li>\n<li>跨域资源的引入是可以的。但是js不能读写加载的内容。如嵌入到页面中的script标签的src属性、img标签、link标签、iframe标签等。</li>\n<li>通过标签的方式发起的请求不受同源策略的限制。且发送请求时浏览器会携带对应的cookie。</li>\n</ul>\n<h2 id=\"SQL注入\"><a href=\"#SQL注入\" class=\"headerlink\" title=\"SQL注入\"></a>SQL注入</h2><h3 id=\"原理-2\"><a href=\"#原理-2\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>通过传入一些特殊字符，从而达到欺骗服务器执行恶意的SQL命令的目的。</p>\n<p>如输入特殊的用户名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//理想中的输入：admin  password</span><br><span class=\"line\">SELECT * FROM user WHERE username=&apos;admin&apos; AND psw=&apos;password&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">//特殊用户名：admin&apos; --</span><br><span class=\"line\">SELECT * FROM user WHERE username=&apos;admin&apos; --&apos; AND psw=&apos;xxxx&apos;</span><br><span class=\"line\">//在SQL中，--是注释后面的内容的意思</span><br></pre></td></tr></table></figure>\n<h3 id=\"防御-2\"><a href=\"#防御-2\" class=\"headerlink\" title=\"防御\"></a>防御</h3><ul>\n<li>严格限制web应用的数据库的操作权限。</li>\n<li>后端代码检查输入的数据是否符合预期。</li>\n<li>对特殊字符进行转义处理。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"XSS攻击（跨站脚本攻击）\"><a href=\"#XSS攻击（跨站脚本攻击）\" class=\"headerlink\" title=\"XSS攻击（跨站脚本攻击）\"></a>XSS攻击（跨站脚本攻击）</h2><h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>恶意攻击者往web页面里插入恶意可执行网页脚本代码，当用户浏览该页面时，嵌入其中web里面的脚本代码会被执行，从而达到攻击者盗取用户信息或其他侵犯用户安全隐私的目的。</p>\n<h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><ul>\n<li>存储型XSS<br>恶意代码存储在数据库中</li>\n<li>反射型XSS<br>恶意代码存储在url中</li>\n<li>DOM型XSS<br>取出和执行恶意代码都是浏览器端完成<h3 id=\"防御\"><a href=\"#防御\" class=\"headerlink\" title=\"防御\"></a>防御</h3><h4 id=\"开启CSP\"><a href=\"#开启CSP\" class=\"headerlink\" title=\"开启CSP\"></a>开启CSP</h4>建立白名单，明确告诉浏览器哪些外部资源可以加载和执行。</li>\n<li>设置http header中的Content-Security-Policy</li>\n<li>设置meta标签<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta http-equiv=&quot;Content-Security-Policy&quot;&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"输入输出过滤\"><a href=\"#输入输出过滤\" class=\"headerlink\" title=\"输入输出过滤\"></a>输入输出过滤</h4><p>前端负责，后端也要做相同的过滤检查，因为攻击者完全可以绕过正常的输入流程，直接利用相关接口向服务器发送设置。</p>\n<h4 id=\"转义字符\"><a href=\"#转义字符\" class=\"headerlink\" title=\"转义字符\"></a>转义字符</h4><p>转义输入输出的内容，对于引号、尖括号、斜杠进行转义。</p>\n<h4 id=\"cookie\"><a href=\"#cookie\" class=\"headerlink\" title=\"cookie\"></a>cookie</h4><p>web应用程序在设置cookie时，将其属性设为HttpOnly，这样设置的cookie，js就无法进行读写，就可以预防XSS攻击窃取用户cookie，保护用户cookie信息。</p>\n<h2 id=\"CSRF攻击（跨站请求伪造）\"><a href=\"#CSRF攻击（跨站请求伪造）\" class=\"headerlink\" title=\"CSRF攻击（跨站请求伪造）\"></a>CSRF攻击（跨站请求伪造）</h2><h3 id=\"原理-1\"><a href=\"#原理-1\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>攻击者通过一些技术手段欺骗用户的浏览器去訪问一个自己以前认证过的站点并运行一些操作。</p>\n<p>利用用户已登录的身份，在用户毫不知情的情况下，以用户的名义完成非法操作。可以这么理解：攻击者盗用了你的身份，以你的名义发送恶意请求。</p>\n<p>一般发起攻击的是第三方网站。是利用用户的登录凭证，冒用用户信息，不能获取用户的数据。    </p>\n<p>CSRF攻击是源于WEB的隐式身份验证机制。WEB的身份验证机制虽然可以保证一个请求是来自于某个用户的浏览器，但却无法保证该请求是用户批准发送的。</p>\n<h3 id=\"分类-1\"><a href=\"#分类-1\" class=\"headerlink\" title=\"分类\"></a>分类</h3><ul>\n<li>get类型<br>可以将get请求嵌入img标签，打开页面自动发送请求。</li>\n<li>post类型<br>可以利用自动提交的form表单，访问页面就会自动提交。</li>\n<li>链接型<br>需要用户点击链接才会触发。<h3 id=\"防御-1\"><a href=\"#防御-1\" class=\"headerlink\" title=\"防御\"></a>防御</h3><h4 id=\"post\"><a href=\"#post\" class=\"headerlink\" title=\"post\"></a>post</h4>尽量使用post请求，避免get请求。</li>\n</ul>\n<h4 id=\"cookie-1\"><a href=\"#cookie-1\" class=\"headerlink\" title=\"cookie\"></a>cookie</h4><p>对cookie设置SameSite属性。该属性表示cookie不随跨域请求发送，可以很大程度减少csrf攻击。</p>\n<h4 id=\"token\"><a href=\"#token\" class=\"headerlink\" title=\"token\"></a>token</h4><ol>\n<li>用户访问某个表单页面。</li>\n<li>服务端生成一个Token，放在用户的Session或者浏览器的Cookie中。</li>\n<li>在页面表单附带上Token参数。</li>\n<li>用户发送请求时以参数的形式带上本次页面中生成的token，服务端验证表单中的Token是否与用户Session（或Cookies）中的Token一致，一致为合法请求，不是则非法请求。<blockquote>\n<p>仅仅用来防御csrf攻击，当加上xss攻击时，无用</p>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"验证码\"><a href=\"#验证码\" class=\"headerlink\" title=\"验证码\"></a>验证码</h4><h3 id=\"xss和csrf\"><a href=\"#xss和csrf\" class=\"headerlink\" title=\"xss和csrf\"></a>xss和csrf</h3><ul>\n<li>通常来说csrf是由xss引起的</li>\n<li>xss是代码注入问题，csrf是http问题</li>\n</ul>\n<h3 id=\"同源策略\"><a href=\"#同源策略\" class=\"headerlink\" title=\"同源策略\"></a>同源策略</h3><p>同源策略是浏览器的一个安全功能，不同源的客户端脚本在没有明确授权的情况下，不能读写对方资源。所以a.com下的js脚本采用ajax读取b.com里面的文件数据是会报错的。</p>\n<p>不受同源策略限制的：</p>\n<ul>\n<li>页面中的链接，重定向以及表单提交是不会受到同源策略限制的。</li>\n<li>跨域资源的引入是可以的。但是js不能读写加载的内容。如嵌入到页面中的script标签的src属性、img标签、link标签、iframe标签等。</li>\n<li>通过标签的方式发起的请求不受同源策略的限制。且发送请求时浏览器会携带对应的cookie。</li>\n</ul>\n<h2 id=\"SQL注入\"><a href=\"#SQL注入\" class=\"headerlink\" title=\"SQL注入\"></a>SQL注入</h2><h3 id=\"原理-2\"><a href=\"#原理-2\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>通过传入一些特殊字符，从而达到欺骗服务器执行恶意的SQL命令的目的。</p>\n<p>如输入特殊的用户名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//理想中的输入：admin  password</span><br><span class=\"line\">SELECT * FROM user WHERE username=&apos;admin&apos; AND psw=&apos;password&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">//特殊用户名：admin&apos; --</span><br><span class=\"line\">SELECT * FROM user WHERE username=&apos;admin&apos; --&apos; AND psw=&apos;xxxx&apos;</span><br><span class=\"line\">//在SQL中，--是注释后面的内容的意思</span><br></pre></td></tr></table></figure>\n<h3 id=\"防御-2\"><a href=\"#防御-2\" class=\"headerlink\" title=\"防御\"></a>防御</h3><ul>\n<li>严格限制web应用的数据库的操作权限。</li>\n<li>后端代码检查输入的数据是否符合预期。</li>\n<li>对特殊字符进行转义处理。</li>\n</ul>\n"},{"title":"Hello World","date":"2018-05-02T16:00:00.000Z","comments":1,"_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/其他/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2018-05-03\ntags: [demo]\ncategories: demo\ncomments: true\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"其他/hello-world","published":1,"updated":"2022-07-22T07:59:39.025Z","layout":"post","photos":[],"link":"","_id":"cl5wb2ymo00b0cj380g2ct679","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"操作系统：进程、线程、程序","date":"2019-04-11T16:00:00.000Z","comments":1,"_content":"\n- 程序只是一组指令的有序集合。\n- 进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动，是资源分配的最小单位。\n- 线程是程序执行的最小单位。\n- 一个程序至少一个进程，一个进程至少一个线程。\n- 一个线程只能属于一个进程，但是一个进程可以拥有多个线程\n- 进程有自己的独立地址空间，每启动一个进程，系统就会为它分配地址空间，建立数据表来维护代码段、堆栈段和数据段，这种操作非常昂贵。\n- 而线程是共享进程中的数据的，使用相同的地址空间，因此CPU切换一个线程的花费远比进程要小很多，同时创建一个线程的开销也比进程要小很多。\n- 多线程处理就是允许一个进程中在同一时刻执行多个任务。\n- 但是多进程程序更健壮，多线程程序只要有一个线程死掉，整个进程也死掉了，而一个进程死掉并不会对另外一个进程造成影响，因为进程有自己独立的地址空间。","source":"_posts/其他/操作系统：进程、线程、程序.md","raw":"---\ntitle: 操作系统：进程、线程、程序\ndate: 2019-04-12\ntags: [操作系统]\ncategories: 操作系统\ncomments: true\n---\n\n- 程序只是一组指令的有序集合。\n- 进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动，是资源分配的最小单位。\n- 线程是程序执行的最小单位。\n- 一个程序至少一个进程，一个进程至少一个线程。\n- 一个线程只能属于一个进程，但是一个进程可以拥有多个线程\n- 进程有自己的独立地址空间，每启动一个进程，系统就会为它分配地址空间，建立数据表来维护代码段、堆栈段和数据段，这种操作非常昂贵。\n- 而线程是共享进程中的数据的，使用相同的地址空间，因此CPU切换一个线程的花费远比进程要小很多，同时创建一个线程的开销也比进程要小很多。\n- 多线程处理就是允许一个进程中在同一时刻执行多个任务。\n- 但是多进程程序更健壮，多线程程序只要有一个线程死掉，整个进程也死掉了，而一个进程死掉并不会对另外一个进程造成影响，因为进程有自己独立的地址空间。","slug":"其他/操作系统：进程、线程、程序","published":1,"updated":"2022-07-22T08:00:32.238Z","layout":"post","photos":[],"link":"","_id":"cl5wb2ymq00b5cj38hfumyoug","content":"<ul>\n<li>程序只是一组指令的有序集合。</li>\n<li>进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动，是资源分配的最小单位。</li>\n<li>线程是程序执行的最小单位。</li>\n<li>一个程序至少一个进程，一个进程至少一个线程。</li>\n<li>一个线程只能属于一个进程，但是一个进程可以拥有多个线程</li>\n<li>进程有自己的独立地址空间，每启动一个进程，系统就会为它分配地址空间，建立数据表来维护代码段、堆栈段和数据段，这种操作非常昂贵。</li>\n<li>而线程是共享进程中的数据的，使用相同的地址空间，因此CPU切换一个线程的花费远比进程要小很多，同时创建一个线程的开销也比进程要小很多。</li>\n<li>多线程处理就是允许一个进程中在同一时刻执行多个任务。</li>\n<li>但是多进程程序更健壮，多线程程序只要有一个线程死掉，整个进程也死掉了，而一个进程死掉并不会对另外一个进程造成影响，因为进程有自己独立的地址空间。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>程序只是一组指令的有序集合。</li>\n<li>进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动，是资源分配的最小单位。</li>\n<li>线程是程序执行的最小单位。</li>\n<li>一个程序至少一个进程，一个进程至少一个线程。</li>\n<li>一个线程只能属于一个进程，但是一个进程可以拥有多个线程</li>\n<li>进程有自己的独立地址空间，每启动一个进程，系统就会为它分配地址空间，建立数据表来维护代码段、堆栈段和数据段，这种操作非常昂贵。</li>\n<li>而线程是共享进程中的数据的，使用相同的地址空间，因此CPU切换一个线程的花费远比进程要小很多，同时创建一个线程的开销也比进程要小很多。</li>\n<li>多线程处理就是允许一个进程中在同一时刻执行多个任务。</li>\n<li>但是多进程程序更健壮，多线程程序只要有一个线程死掉，整个进程也死掉了，而一个进程死掉并不会对另外一个进程造成影响，因为进程有自己独立的地址空间。</li>\n</ul>\n"},{"title":"安全：cookie和session","date":"2020-05-13T16:00:00.000Z","comments":1,"_content":"\n## 前言\n- 会话（Session）跟踪是Web程序中常用的技术，用来跟踪用户的整个会话。常用的会话跟踪技术是Cookie与Session。\n- Cookie通过在客户端记录信息确定用户身份。\n- Session通过在服务器端记录信息确定用户身份。\n\n## cookie\n在程序中，会话跟踪是很重要的事情。理论上，一个用户的所有请求操作都应该属于同一个会话，而另一个用户的所有请求操作则应该属于另一个会话，二者不能混淆。\n\nWeb应用程序是使用HTTP协议传输数据的。==HTTP协议是无状态的协议==。一旦数据交换完毕，客户端与服务器端的连接就会关闭，再次交换数据需要建立新的连接。这就意味着服务器无法从连接上跟踪会话。\n### 什么是cookie\ncookie其实是存储在浏览器中的纯文本，是服务器发送出来存储在浏览器上的一组组键值对，浏览器的安装目录下会专门有一个cookie文件夹来存放各个域下设置的cookie。\n\n### cookie怎么工作\n- 存储cookie是浏览器提供的功能。\n- 若客户端首次请求服务器，浏览器会添加请求头中的 cookie字段为{}，把请求的网址连同该Cookie一同提交给服务器。如果服务器需要记录该用户状态，就向客户端浏览器返回Cookie，客户端浏览器会把Cookie保存起来。\n- 当网页要再次发http请求时，浏览器会先检查是否有相应的 cookie，有则自动把所有这个服务器Cookie添加在 request header中的 cookie字段中，把请求的网址连同该Cookie一同提交给服务器。这些是浏览器自动帮我们做的，而且每一次 http请求浏览器都会自动帮我们做。\n- 服务器检查该Cookie，以此来辨认用户状态。服务器还可以根据需要修改Cookie的内容\n- cookie的存放有大小限制，不可以超过4kb, 每一个域名下的cookie数量最多是20个\n\n### 获取cookie\ndocument.cookie，只能获取非HttpOnly类型的cookie。\n\n打印出的结果是一个字符串类型，因为 cookie本身就是存储在浏览器中的字符串。但这个字符串是有格式的，由键值对 key=value构成，键值对之间由一个 分号和一个 空格隔开。\n\n```\nkey=value; key=value\n```\n\n### Cookie的不可跨域名性\n\n受同源策略限制，跨域的ajax请求默认不携带cookie，那为什么还会有csrf攻击呢？\n\n```\n由于script、img、iframe的src都不受同源策略影响，可以利用此来实现跨域请求，来实施攻击。\n浏览器会依据加载的域名附带上对应域名的cookie\n```\n例如，a.com是一个银行网站，用户在此网站登录且生成了授权的cookie，此时浏览器保存了这个cookie。随后访问 b.com，在这个网站中伪造一个请求a网站的请求，如转账、删除操作等，利用script、img、iframe来加载a网站的地址，浏览器就会携带上a网站此登陆用户的授权cookie信息，这样就构成了csrf攻击。\n\n![image](https://upload-images.jianshu.io/upload_images/3635292-906033c13ee628a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800)\n\n### cookie的属性\n\n属性名 | 数据类型 | 描述\n---|---|---\nname | String | 该Cookie的名称。Cookie一旦创建，名称便不可更改\nvalue | Object | 该Cookie的值。如果值为Unicode字符，需要为字符编码。如果值为二进制数据，则需要使用BASE64编码\nmaxAge | int | 该Cookie失效的时间，单位秒。如果为正数，则该Cookie在maxAge秒之后失效。如果为负数，该Cookie为临时Cookie，关闭浏览器即失效，浏览器也不会以任何形式保存该Cookie。如果为0，表示删除该Cookie。默认为–1\nsecure | boolean | 该Cookie是否仅被使用安全协议传输。安全协议。安全协议有HTTPS，SSL等，在网络上传输数据之前先将数据加密。默认为false\npath | String | 该Cookie的使用路径。如果设置为“/sessionWeb/”，则只有contextPath为“/sessionWeb”的程序可以访问该Cookie。如果设置为“/”，则本域名下contextPath都可以访问该Cookie。注意最后一个字符必须为“/”\ndomain | String | 可以访问该Cookie的域名。如果设置为“.google.com”，则所有以“google.com”结尾的域名都可以访问该Cookie。注意第一个字符必须为“.”\ncomment | String | 该Cookie的用处说明。浏览器显示Cookie信息的时候显示该说明\nversion | int |  该Cookie使用的版本号。0表示遵循Netscape的Cookie规范，1表示遵循W3C的RFC 2109规范\n\n### cookie的修改和删除\n- 服务器可以对cookie进行操作，浏览器只能对非HttpOnly类型的cookie进行操作（为了预防xss攻击）。\n- Cookie并不提供修改、删除操作。\n- 如果要修改某个Cookie，只需要新建一个同名的Cookie，添加到response中覆盖原来的Cookie。\n- 如果要删除某个Cookie，只需要新建一个同名的Cookie，并将maxAge设置为0，并添加到response中覆盖原来的Cookie。注意是0而不是负数。负数代表其他的意义。\n\n注意：修改、删除Cookie时，新建的Cookie除value、maxAge之外的所有属性，例如name、path、domain等，都要与原Cookie完全一样。否则，浏览器将视为两个不同的Cookie不予覆盖，导致修改、删除失败。\n\n## session\n除了使用Cookie，Web应用程序中还经常使用Session来记录客户端状态。Session是服务器端使用的一种记录客户端状态的机制，使用上比Cookie简单一些，相应的也增加了服务器的存储压力。\n\nsession是另一种记录客户状态的机制，不同的是Cookie保存在客户端浏览器中，而Session保存在服务器上。\n\n### 什么是session\n\n- 客户端浏览器访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上，这就是session。\n- 客户端浏览器再次访问时只需要从该session中查找该客户的状态就可以了。\n- session对象是在客户端第一次请求服务器的时候创建的。session也是一种key-value的属性对\n\n如果说Cookie机制是通过检查客户身上的“通行证”来确定客户身份的话，那么Session机制就是通过检查服务器上的“客户明细表”来确认客户身份。session相当于程序在服务器上建立的一份客户档案，客户来访的时候只需要查询客户档案表就可以了。\n\n### session的生命周期\n\nsession保存在服务器端。为了获得更高的存取速度，服务器一般把session放在内存里。每个用户都会有一个独立的session。如果session内容过于复杂，当大量客户访问服务器时可能会导致内存溢出。因此，session里的信息应该尽量精简。\n\nsession在用户第一次访问服务器的时候自动创建。需要注意只有访问JSP、Servlet等程序时才会创建session，只访问HTML、IMAGE等静态资源并不会创建session。如果尚未生成session，也可以使用request.getSession(true)强制生成session。\n\n- session生成后，只要用户继续访问，服务器就会更新session的最后访问时间，并维护该session。用户每访问服务器一次，无论是否读写session，服务器都认为该用户的Session“活跃（active）”了一次。\n- 为防止内存溢出，服务器会把长时间内没有活跃的session从内存删除。这个时间就是session的超时时间。如果超过了超时时间没访问过服务器，session就自动失效了。tomcat默认失效时间为20分钟。\n\n### session对浏览器的要求\n虽然session保存在服务器，对客户端是透明的，它的正常运行仍然需要客户端浏览器的支持。这是因为session需要使用Cookie作为识别标志。HTTP协议是无状态的，session不能依据HTTP连接来判断是否为同一客户，因此服务器向客户端浏览器发送一个名为JSESSIONID的Cookie，它的值为该session的id（也就是HttpSession.getId()的返回值）。session依据该Cookie来识别是否为同一用户。\n\n如果客户端浏览器将Cookie功能禁用，或者不支持Cookie怎么办？例如，绝大多数的手机浏览器都不支持Cookie。Java Web提供了另一种解决方案：URL地址重写。\n\n### URL地址重写\n\nURL地址重写是对客户端不支持Cookie的解决方案。URL地址重写的原理是将该用户session的id信息重写到URL地址中。服务器能够解析重写后的URL获取session的id。这样即使客户端不支持Cookie，也可以使用session来记录用户状态。\n\n## 两者区别\n- cookie数据存放在客户的浏览器上，session数据放在服务器上的，但名为JSESSIONID的Cookie（值为该Session的id）是放在客户端的。\n- cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗考虑到安全应当使用session。\n- 设置cookie时间可以使cookie过期。但是使用session-destory（），我们将会销毁会话。\n- session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能考虑到减轻服务器性能方面，应当使用cookie。\n- 单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。(Session对象没有对存储的数据量的限制，其中可以保存更为复杂的数据类型)\n- 两者最大的区别在于生存周期，session是IE启动到IE关闭.(浏览器页面一关 ,session就消失了)，cookie是预先设置的生存周期，或永久的保存于本地的文件。","source":"_posts/其他/安全：cookie和session.md","raw":"---\ntitle: 安全：cookie和session\ndate: 2020-05-14\ntags: [安全]\ncategories: 安全\ncomments: true\n---\n\n## 前言\n- 会话（Session）跟踪是Web程序中常用的技术，用来跟踪用户的整个会话。常用的会话跟踪技术是Cookie与Session。\n- Cookie通过在客户端记录信息确定用户身份。\n- Session通过在服务器端记录信息确定用户身份。\n\n## cookie\n在程序中，会话跟踪是很重要的事情。理论上，一个用户的所有请求操作都应该属于同一个会话，而另一个用户的所有请求操作则应该属于另一个会话，二者不能混淆。\n\nWeb应用程序是使用HTTP协议传输数据的。==HTTP协议是无状态的协议==。一旦数据交换完毕，客户端与服务器端的连接就会关闭，再次交换数据需要建立新的连接。这就意味着服务器无法从连接上跟踪会话。\n### 什么是cookie\ncookie其实是存储在浏览器中的纯文本，是服务器发送出来存储在浏览器上的一组组键值对，浏览器的安装目录下会专门有一个cookie文件夹来存放各个域下设置的cookie。\n\n### cookie怎么工作\n- 存储cookie是浏览器提供的功能。\n- 若客户端首次请求服务器，浏览器会添加请求头中的 cookie字段为{}，把请求的网址连同该Cookie一同提交给服务器。如果服务器需要记录该用户状态，就向客户端浏览器返回Cookie，客户端浏览器会把Cookie保存起来。\n- 当网页要再次发http请求时，浏览器会先检查是否有相应的 cookie，有则自动把所有这个服务器Cookie添加在 request header中的 cookie字段中，把请求的网址连同该Cookie一同提交给服务器。这些是浏览器自动帮我们做的，而且每一次 http请求浏览器都会自动帮我们做。\n- 服务器检查该Cookie，以此来辨认用户状态。服务器还可以根据需要修改Cookie的内容\n- cookie的存放有大小限制，不可以超过4kb, 每一个域名下的cookie数量最多是20个\n\n### 获取cookie\ndocument.cookie，只能获取非HttpOnly类型的cookie。\n\n打印出的结果是一个字符串类型，因为 cookie本身就是存储在浏览器中的字符串。但这个字符串是有格式的，由键值对 key=value构成，键值对之间由一个 分号和一个 空格隔开。\n\n```\nkey=value; key=value\n```\n\n### Cookie的不可跨域名性\n\n受同源策略限制，跨域的ajax请求默认不携带cookie，那为什么还会有csrf攻击呢？\n\n```\n由于script、img、iframe的src都不受同源策略影响，可以利用此来实现跨域请求，来实施攻击。\n浏览器会依据加载的域名附带上对应域名的cookie\n```\n例如，a.com是一个银行网站，用户在此网站登录且生成了授权的cookie，此时浏览器保存了这个cookie。随后访问 b.com，在这个网站中伪造一个请求a网站的请求，如转账、删除操作等，利用script、img、iframe来加载a网站的地址，浏览器就会携带上a网站此登陆用户的授权cookie信息，这样就构成了csrf攻击。\n\n![image](https://upload-images.jianshu.io/upload_images/3635292-906033c13ee628a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800)\n\n### cookie的属性\n\n属性名 | 数据类型 | 描述\n---|---|---\nname | String | 该Cookie的名称。Cookie一旦创建，名称便不可更改\nvalue | Object | 该Cookie的值。如果值为Unicode字符，需要为字符编码。如果值为二进制数据，则需要使用BASE64编码\nmaxAge | int | 该Cookie失效的时间，单位秒。如果为正数，则该Cookie在maxAge秒之后失效。如果为负数，该Cookie为临时Cookie，关闭浏览器即失效，浏览器也不会以任何形式保存该Cookie。如果为0，表示删除该Cookie。默认为–1\nsecure | boolean | 该Cookie是否仅被使用安全协议传输。安全协议。安全协议有HTTPS，SSL等，在网络上传输数据之前先将数据加密。默认为false\npath | String | 该Cookie的使用路径。如果设置为“/sessionWeb/”，则只有contextPath为“/sessionWeb”的程序可以访问该Cookie。如果设置为“/”，则本域名下contextPath都可以访问该Cookie。注意最后一个字符必须为“/”\ndomain | String | 可以访问该Cookie的域名。如果设置为“.google.com”，则所有以“google.com”结尾的域名都可以访问该Cookie。注意第一个字符必须为“.”\ncomment | String | 该Cookie的用处说明。浏览器显示Cookie信息的时候显示该说明\nversion | int |  该Cookie使用的版本号。0表示遵循Netscape的Cookie规范，1表示遵循W3C的RFC 2109规范\n\n### cookie的修改和删除\n- 服务器可以对cookie进行操作，浏览器只能对非HttpOnly类型的cookie进行操作（为了预防xss攻击）。\n- Cookie并不提供修改、删除操作。\n- 如果要修改某个Cookie，只需要新建一个同名的Cookie，添加到response中覆盖原来的Cookie。\n- 如果要删除某个Cookie，只需要新建一个同名的Cookie，并将maxAge设置为0，并添加到response中覆盖原来的Cookie。注意是0而不是负数。负数代表其他的意义。\n\n注意：修改、删除Cookie时，新建的Cookie除value、maxAge之外的所有属性，例如name、path、domain等，都要与原Cookie完全一样。否则，浏览器将视为两个不同的Cookie不予覆盖，导致修改、删除失败。\n\n## session\n除了使用Cookie，Web应用程序中还经常使用Session来记录客户端状态。Session是服务器端使用的一种记录客户端状态的机制，使用上比Cookie简单一些，相应的也增加了服务器的存储压力。\n\nsession是另一种记录客户状态的机制，不同的是Cookie保存在客户端浏览器中，而Session保存在服务器上。\n\n### 什么是session\n\n- 客户端浏览器访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上，这就是session。\n- 客户端浏览器再次访问时只需要从该session中查找该客户的状态就可以了。\n- session对象是在客户端第一次请求服务器的时候创建的。session也是一种key-value的属性对\n\n如果说Cookie机制是通过检查客户身上的“通行证”来确定客户身份的话，那么Session机制就是通过检查服务器上的“客户明细表”来确认客户身份。session相当于程序在服务器上建立的一份客户档案，客户来访的时候只需要查询客户档案表就可以了。\n\n### session的生命周期\n\nsession保存在服务器端。为了获得更高的存取速度，服务器一般把session放在内存里。每个用户都会有一个独立的session。如果session内容过于复杂，当大量客户访问服务器时可能会导致内存溢出。因此，session里的信息应该尽量精简。\n\nsession在用户第一次访问服务器的时候自动创建。需要注意只有访问JSP、Servlet等程序时才会创建session，只访问HTML、IMAGE等静态资源并不会创建session。如果尚未生成session，也可以使用request.getSession(true)强制生成session。\n\n- session生成后，只要用户继续访问，服务器就会更新session的最后访问时间，并维护该session。用户每访问服务器一次，无论是否读写session，服务器都认为该用户的Session“活跃（active）”了一次。\n- 为防止内存溢出，服务器会把长时间内没有活跃的session从内存删除。这个时间就是session的超时时间。如果超过了超时时间没访问过服务器，session就自动失效了。tomcat默认失效时间为20分钟。\n\n### session对浏览器的要求\n虽然session保存在服务器，对客户端是透明的，它的正常运行仍然需要客户端浏览器的支持。这是因为session需要使用Cookie作为识别标志。HTTP协议是无状态的，session不能依据HTTP连接来判断是否为同一客户，因此服务器向客户端浏览器发送一个名为JSESSIONID的Cookie，它的值为该session的id（也就是HttpSession.getId()的返回值）。session依据该Cookie来识别是否为同一用户。\n\n如果客户端浏览器将Cookie功能禁用，或者不支持Cookie怎么办？例如，绝大多数的手机浏览器都不支持Cookie。Java Web提供了另一种解决方案：URL地址重写。\n\n### URL地址重写\n\nURL地址重写是对客户端不支持Cookie的解决方案。URL地址重写的原理是将该用户session的id信息重写到URL地址中。服务器能够解析重写后的URL获取session的id。这样即使客户端不支持Cookie，也可以使用session来记录用户状态。\n\n## 两者区别\n- cookie数据存放在客户的浏览器上，session数据放在服务器上的，但名为JSESSIONID的Cookie（值为该Session的id）是放在客户端的。\n- cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗考虑到安全应当使用session。\n- 设置cookie时间可以使cookie过期。但是使用session-destory（），我们将会销毁会话。\n- session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能考虑到减轻服务器性能方面，应当使用cookie。\n- 单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。(Session对象没有对存储的数据量的限制，其中可以保存更为复杂的数据类型)\n- 两者最大的区别在于生存周期，session是IE启动到IE关闭.(浏览器页面一关 ,session就消失了)，cookie是预先设置的生存周期，或永久的保存于本地的文件。","slug":"其他/安全：cookie和session","published":1,"updated":"2022-07-22T07:59:22.122Z","layout":"post","photos":[],"link":"","_id":"cl5wb2ymq00b8cj38uaki1j4t","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><ul>\n<li>会话（Session）跟踪是Web程序中常用的技术，用来跟踪用户的整个会话。常用的会话跟踪技术是Cookie与Session。</li>\n<li>Cookie通过在客户端记录信息确定用户身份。</li>\n<li>Session通过在服务器端记录信息确定用户身份。</li>\n</ul>\n<h2 id=\"cookie\"><a href=\"#cookie\" class=\"headerlink\" title=\"cookie\"></a>cookie</h2><p>在程序中，会话跟踪是很重要的事情。理论上，一个用户的所有请求操作都应该属于同一个会话，而另一个用户的所有请求操作则应该属于另一个会话，二者不能混淆。</p>\n<p>Web应用程序是使用HTTP协议传输数据的。==HTTP协议是无状态的协议==。一旦数据交换完毕，客户端与服务器端的连接就会关闭，再次交换数据需要建立新的连接。这就意味着服务器无法从连接上跟踪会话。</p>\n<h3 id=\"什么是cookie\"><a href=\"#什么是cookie\" class=\"headerlink\" title=\"什么是cookie\"></a>什么是cookie</h3><p>cookie其实是存储在浏览器中的纯文本，是服务器发送出来存储在浏览器上的一组组键值对，浏览器的安装目录下会专门有一个cookie文件夹来存放各个域下设置的cookie。</p>\n<h3 id=\"cookie怎么工作\"><a href=\"#cookie怎么工作\" class=\"headerlink\" title=\"cookie怎么工作\"></a>cookie怎么工作</h3><ul>\n<li>存储cookie是浏览器提供的功能。</li>\n<li>若客户端首次请求服务器，浏览器会添加请求头中的 cookie字段为{}，把请求的网址连同该Cookie一同提交给服务器。如果服务器需要记录该用户状态，就向客户端浏览器返回Cookie，客户端浏览器会把Cookie保存起来。</li>\n<li>当网页要再次发http请求时，浏览器会先检查是否有相应的 cookie，有则自动把所有这个服务器Cookie添加在 request header中的 cookie字段中，把请求的网址连同该Cookie一同提交给服务器。这些是浏览器自动帮我们做的，而且每一次 http请求浏览器都会自动帮我们做。</li>\n<li>服务器检查该Cookie，以此来辨认用户状态。服务器还可以根据需要修改Cookie的内容</li>\n<li>cookie的存放有大小限制，不可以超过4kb, 每一个域名下的cookie数量最多是20个</li>\n</ul>\n<h3 id=\"获取cookie\"><a href=\"#获取cookie\" class=\"headerlink\" title=\"获取cookie\"></a>获取cookie</h3><p>document.cookie，只能获取非HttpOnly类型的cookie。</p>\n<p>打印出的结果是一个字符串类型，因为 cookie本身就是存储在浏览器中的字符串。但这个字符串是有格式的，由键值对 key=value构成，键值对之间由一个 分号和一个 空格隔开。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">key=value; key=value</span><br></pre></td></tr></table></figure>\n<h3 id=\"Cookie的不可跨域名性\"><a href=\"#Cookie的不可跨域名性\" class=\"headerlink\" title=\"Cookie的不可跨域名性\"></a>Cookie的不可跨域名性</h3><p>受同源策略限制，跨域的ajax请求默认不携带cookie，那为什么还会有csrf攻击呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">由于script、img、iframe的src都不受同源策略影响，可以利用此来实现跨域请求，来实施攻击。</span><br><span class=\"line\">浏览器会依据加载的域名附带上对应域名的cookie</span><br></pre></td></tr></table></figure>\n<p>例如，a.com是一个银行网站，用户在此网站登录且生成了授权的cookie，此时浏览器保存了这个cookie。随后访问 b.com，在这个网站中伪造一个请求a网站的请求，如转账、删除操作等，利用script、img、iframe来加载a网站的地址，浏览器就会携带上a网站此登陆用户的授权cookie信息，这样就构成了csrf攻击。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3635292-906033c13ee628a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800\" alt=\"image\"></p>\n<h3 id=\"cookie的属性\"><a href=\"#cookie的属性\" class=\"headerlink\" title=\"cookie的属性\"></a>cookie的属性</h3><table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>数据类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>String</td>\n<td>该Cookie的名称。Cookie一旦创建，名称便不可更改</td>\n</tr>\n<tr>\n<td>value</td>\n<td>Object</td>\n<td>该Cookie的值。如果值为Unicode字符，需要为字符编码。如果值为二进制数据，则需要使用BASE64编码</td>\n</tr>\n<tr>\n<td>maxAge</td>\n<td>int</td>\n<td>该Cookie失效的时间，单位秒。如果为正数，则该Cookie在maxAge秒之后失效。如果为负数，该Cookie为临时Cookie，关闭浏览器即失效，浏览器也不会以任何形式保存该Cookie。如果为0，表示删除该Cookie。默认为–1</td>\n</tr>\n<tr>\n<td>secure</td>\n<td>boolean</td>\n<td>该Cookie是否仅被使用安全协议传输。安全协议。安全协议有HTTPS，SSL等，在网络上传输数据之前先将数据加密。默认为false</td>\n</tr>\n<tr>\n<td>path</td>\n<td>String</td>\n<td>该Cookie的使用路径。如果设置为“/sessionWeb/”，则只有contextPath为“/sessionWeb”的程序可以访问该Cookie。如果设置为“/”，则本域名下contextPath都可以访问该Cookie。注意最后一个字符必须为“/”</td>\n</tr>\n<tr>\n<td>domain</td>\n<td>String</td>\n<td>可以访问该Cookie的域名。如果设置为“.google.com”，则所有以“google.com”结尾的域名都可以访问该Cookie。注意第一个字符必须为“.”</td>\n</tr>\n<tr>\n<td>comment</td>\n<td>String</td>\n<td>该Cookie的用处说明。浏览器显示Cookie信息的时候显示该说明</td>\n</tr>\n<tr>\n<td>version</td>\n<td>int</td>\n<td>该Cookie使用的版本号。0表示遵循Netscape的Cookie规范，1表示遵循W3C的RFC 2109规范</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"cookie的修改和删除\"><a href=\"#cookie的修改和删除\" class=\"headerlink\" title=\"cookie的修改和删除\"></a>cookie的修改和删除</h3><ul>\n<li>服务器可以对cookie进行操作，浏览器只能对非HttpOnly类型的cookie进行操作（为了预防xss攻击）。</li>\n<li>Cookie并不提供修改、删除操作。</li>\n<li>如果要修改某个Cookie，只需要新建一个同名的Cookie，添加到response中覆盖原来的Cookie。</li>\n<li>如果要删除某个Cookie，只需要新建一个同名的Cookie，并将maxAge设置为0，并添加到response中覆盖原来的Cookie。注意是0而不是负数。负数代表其他的意义。</li>\n</ul>\n<p>注意：修改、删除Cookie时，新建的Cookie除value、maxAge之外的所有属性，例如name、path、domain等，都要与原Cookie完全一样。否则，浏览器将视为两个不同的Cookie不予覆盖，导致修改、删除失败。</p>\n<h2 id=\"session\"><a href=\"#session\" class=\"headerlink\" title=\"session\"></a>session</h2><p>除了使用Cookie，Web应用程序中还经常使用Session来记录客户端状态。Session是服务器端使用的一种记录客户端状态的机制，使用上比Cookie简单一些，相应的也增加了服务器的存储压力。</p>\n<p>session是另一种记录客户状态的机制，不同的是Cookie保存在客户端浏览器中，而Session保存在服务器上。</p>\n<h3 id=\"什么是session\"><a href=\"#什么是session\" class=\"headerlink\" title=\"什么是session\"></a>什么是session</h3><ul>\n<li>客户端浏览器访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上，这就是session。</li>\n<li>客户端浏览器再次访问时只需要从该session中查找该客户的状态就可以了。</li>\n<li>session对象是在客户端第一次请求服务器的时候创建的。session也是一种key-value的属性对</li>\n</ul>\n<p>如果说Cookie机制是通过检查客户身上的“通行证”来确定客户身份的话，那么Session机制就是通过检查服务器上的“客户明细表”来确认客户身份。session相当于程序在服务器上建立的一份客户档案，客户来访的时候只需要查询客户档案表就可以了。</p>\n<h3 id=\"session的生命周期\"><a href=\"#session的生命周期\" class=\"headerlink\" title=\"session的生命周期\"></a>session的生命周期</h3><p>session保存在服务器端。为了获得更高的存取速度，服务器一般把session放在内存里。每个用户都会有一个独立的session。如果session内容过于复杂，当大量客户访问服务器时可能会导致内存溢出。因此，session里的信息应该尽量精简。</p>\n<p>session在用户第一次访问服务器的时候自动创建。需要注意只有访问JSP、Servlet等程序时才会创建session，只访问HTML、IMAGE等静态资源并不会创建session。如果尚未生成session，也可以使用request.getSession(true)强制生成session。</p>\n<ul>\n<li>session生成后，只要用户继续访问，服务器就会更新session的最后访问时间，并维护该session。用户每访问服务器一次，无论是否读写session，服务器都认为该用户的Session“活跃（active）”了一次。</li>\n<li>为防止内存溢出，服务器会把长时间内没有活跃的session从内存删除。这个时间就是session的超时时间。如果超过了超时时间没访问过服务器，session就自动失效了。tomcat默认失效时间为20分钟。</li>\n</ul>\n<h3 id=\"session对浏览器的要求\"><a href=\"#session对浏览器的要求\" class=\"headerlink\" title=\"session对浏览器的要求\"></a>session对浏览器的要求</h3><p>虽然session保存在服务器，对客户端是透明的，它的正常运行仍然需要客户端浏览器的支持。这是因为session需要使用Cookie作为识别标志。HTTP协议是无状态的，session不能依据HTTP连接来判断是否为同一客户，因此服务器向客户端浏览器发送一个名为JSESSIONID的Cookie，它的值为该session的id（也就是HttpSession.getId()的返回值）。session依据该Cookie来识别是否为同一用户。</p>\n<p>如果客户端浏览器将Cookie功能禁用，或者不支持Cookie怎么办？例如，绝大多数的手机浏览器都不支持Cookie。Java Web提供了另一种解决方案：URL地址重写。</p>\n<h3 id=\"URL地址重写\"><a href=\"#URL地址重写\" class=\"headerlink\" title=\"URL地址重写\"></a>URL地址重写</h3><p>URL地址重写是对客户端不支持Cookie的解决方案。URL地址重写的原理是将该用户session的id信息重写到URL地址中。服务器能够解析重写后的URL获取session的id。这样即使客户端不支持Cookie，也可以使用session来记录用户状态。</p>\n<h2 id=\"两者区别\"><a href=\"#两者区别\" class=\"headerlink\" title=\"两者区别\"></a>两者区别</h2><ul>\n<li>cookie数据存放在客户的浏览器上，session数据放在服务器上的，但名为JSESSIONID的Cookie（值为该Session的id）是放在客户端的。</li>\n<li>cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗考虑到安全应当使用session。</li>\n<li>设置cookie时间可以使cookie过期。但是使用session-destory（），我们将会销毁会话。</li>\n<li>session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能考虑到减轻服务器性能方面，应当使用cookie。</li>\n<li>单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。(Session对象没有对存储的数据量的限制，其中可以保存更为复杂的数据类型)</li>\n<li>两者最大的区别在于生存周期，session是IE启动到IE关闭.(浏览器页面一关 ,session就消失了)，cookie是预先设置的生存周期，或永久的保存于本地的文件。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><ul>\n<li>会话（Session）跟踪是Web程序中常用的技术，用来跟踪用户的整个会话。常用的会话跟踪技术是Cookie与Session。</li>\n<li>Cookie通过在客户端记录信息确定用户身份。</li>\n<li>Session通过在服务器端记录信息确定用户身份。</li>\n</ul>\n<h2 id=\"cookie\"><a href=\"#cookie\" class=\"headerlink\" title=\"cookie\"></a>cookie</h2><p>在程序中，会话跟踪是很重要的事情。理论上，一个用户的所有请求操作都应该属于同一个会话，而另一个用户的所有请求操作则应该属于另一个会话，二者不能混淆。</p>\n<p>Web应用程序是使用HTTP协议传输数据的。==HTTP协议是无状态的协议==。一旦数据交换完毕，客户端与服务器端的连接就会关闭，再次交换数据需要建立新的连接。这就意味着服务器无法从连接上跟踪会话。</p>\n<h3 id=\"什么是cookie\"><a href=\"#什么是cookie\" class=\"headerlink\" title=\"什么是cookie\"></a>什么是cookie</h3><p>cookie其实是存储在浏览器中的纯文本，是服务器发送出来存储在浏览器上的一组组键值对，浏览器的安装目录下会专门有一个cookie文件夹来存放各个域下设置的cookie。</p>\n<h3 id=\"cookie怎么工作\"><a href=\"#cookie怎么工作\" class=\"headerlink\" title=\"cookie怎么工作\"></a>cookie怎么工作</h3><ul>\n<li>存储cookie是浏览器提供的功能。</li>\n<li>若客户端首次请求服务器，浏览器会添加请求头中的 cookie字段为{}，把请求的网址连同该Cookie一同提交给服务器。如果服务器需要记录该用户状态，就向客户端浏览器返回Cookie，客户端浏览器会把Cookie保存起来。</li>\n<li>当网页要再次发http请求时，浏览器会先检查是否有相应的 cookie，有则自动把所有这个服务器Cookie添加在 request header中的 cookie字段中，把请求的网址连同该Cookie一同提交给服务器。这些是浏览器自动帮我们做的，而且每一次 http请求浏览器都会自动帮我们做。</li>\n<li>服务器检查该Cookie，以此来辨认用户状态。服务器还可以根据需要修改Cookie的内容</li>\n<li>cookie的存放有大小限制，不可以超过4kb, 每一个域名下的cookie数量最多是20个</li>\n</ul>\n<h3 id=\"获取cookie\"><a href=\"#获取cookie\" class=\"headerlink\" title=\"获取cookie\"></a>获取cookie</h3><p>document.cookie，只能获取非HttpOnly类型的cookie。</p>\n<p>打印出的结果是一个字符串类型，因为 cookie本身就是存储在浏览器中的字符串。但这个字符串是有格式的，由键值对 key=value构成，键值对之间由一个 分号和一个 空格隔开。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">key=value; key=value</span><br></pre></td></tr></table></figure>\n<h3 id=\"Cookie的不可跨域名性\"><a href=\"#Cookie的不可跨域名性\" class=\"headerlink\" title=\"Cookie的不可跨域名性\"></a>Cookie的不可跨域名性</h3><p>受同源策略限制，跨域的ajax请求默认不携带cookie，那为什么还会有csrf攻击呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">由于script、img、iframe的src都不受同源策略影响，可以利用此来实现跨域请求，来实施攻击。</span><br><span class=\"line\">浏览器会依据加载的域名附带上对应域名的cookie</span><br></pre></td></tr></table></figure>\n<p>例如，a.com是一个银行网站，用户在此网站登录且生成了授权的cookie，此时浏览器保存了这个cookie。随后访问 b.com，在这个网站中伪造一个请求a网站的请求，如转账、删除操作等，利用script、img、iframe来加载a网站的地址，浏览器就会携带上a网站此登陆用户的授权cookie信息，这样就构成了csrf攻击。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/3635292-906033c13ee628a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800\" alt=\"image\"></p>\n<h3 id=\"cookie的属性\"><a href=\"#cookie的属性\" class=\"headerlink\" title=\"cookie的属性\"></a>cookie的属性</h3><table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>数据类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>String</td>\n<td>该Cookie的名称。Cookie一旦创建，名称便不可更改</td>\n</tr>\n<tr>\n<td>value</td>\n<td>Object</td>\n<td>该Cookie的值。如果值为Unicode字符，需要为字符编码。如果值为二进制数据，则需要使用BASE64编码</td>\n</tr>\n<tr>\n<td>maxAge</td>\n<td>int</td>\n<td>该Cookie失效的时间，单位秒。如果为正数，则该Cookie在maxAge秒之后失效。如果为负数，该Cookie为临时Cookie，关闭浏览器即失效，浏览器也不会以任何形式保存该Cookie。如果为0，表示删除该Cookie。默认为–1</td>\n</tr>\n<tr>\n<td>secure</td>\n<td>boolean</td>\n<td>该Cookie是否仅被使用安全协议传输。安全协议。安全协议有HTTPS，SSL等，在网络上传输数据之前先将数据加密。默认为false</td>\n</tr>\n<tr>\n<td>path</td>\n<td>String</td>\n<td>该Cookie的使用路径。如果设置为“/sessionWeb/”，则只有contextPath为“/sessionWeb”的程序可以访问该Cookie。如果设置为“/”，则本域名下contextPath都可以访问该Cookie。注意最后一个字符必须为“/”</td>\n</tr>\n<tr>\n<td>domain</td>\n<td>String</td>\n<td>可以访问该Cookie的域名。如果设置为“.google.com”，则所有以“google.com”结尾的域名都可以访问该Cookie。注意第一个字符必须为“.”</td>\n</tr>\n<tr>\n<td>comment</td>\n<td>String</td>\n<td>该Cookie的用处说明。浏览器显示Cookie信息的时候显示该说明</td>\n</tr>\n<tr>\n<td>version</td>\n<td>int</td>\n<td>该Cookie使用的版本号。0表示遵循Netscape的Cookie规范，1表示遵循W3C的RFC 2109规范</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"cookie的修改和删除\"><a href=\"#cookie的修改和删除\" class=\"headerlink\" title=\"cookie的修改和删除\"></a>cookie的修改和删除</h3><ul>\n<li>服务器可以对cookie进行操作，浏览器只能对非HttpOnly类型的cookie进行操作（为了预防xss攻击）。</li>\n<li>Cookie并不提供修改、删除操作。</li>\n<li>如果要修改某个Cookie，只需要新建一个同名的Cookie，添加到response中覆盖原来的Cookie。</li>\n<li>如果要删除某个Cookie，只需要新建一个同名的Cookie，并将maxAge设置为0，并添加到response中覆盖原来的Cookie。注意是0而不是负数。负数代表其他的意义。</li>\n</ul>\n<p>注意：修改、删除Cookie时，新建的Cookie除value、maxAge之外的所有属性，例如name、path、domain等，都要与原Cookie完全一样。否则，浏览器将视为两个不同的Cookie不予覆盖，导致修改、删除失败。</p>\n<h2 id=\"session\"><a href=\"#session\" class=\"headerlink\" title=\"session\"></a>session</h2><p>除了使用Cookie，Web应用程序中还经常使用Session来记录客户端状态。Session是服务器端使用的一种记录客户端状态的机制，使用上比Cookie简单一些，相应的也增加了服务器的存储压力。</p>\n<p>session是另一种记录客户状态的机制，不同的是Cookie保存在客户端浏览器中，而Session保存在服务器上。</p>\n<h3 id=\"什么是session\"><a href=\"#什么是session\" class=\"headerlink\" title=\"什么是session\"></a>什么是session</h3><ul>\n<li>客户端浏览器访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上，这就是session。</li>\n<li>客户端浏览器再次访问时只需要从该session中查找该客户的状态就可以了。</li>\n<li>session对象是在客户端第一次请求服务器的时候创建的。session也是一种key-value的属性对</li>\n</ul>\n<p>如果说Cookie机制是通过检查客户身上的“通行证”来确定客户身份的话，那么Session机制就是通过检查服务器上的“客户明细表”来确认客户身份。session相当于程序在服务器上建立的一份客户档案，客户来访的时候只需要查询客户档案表就可以了。</p>\n<h3 id=\"session的生命周期\"><a href=\"#session的生命周期\" class=\"headerlink\" title=\"session的生命周期\"></a>session的生命周期</h3><p>session保存在服务器端。为了获得更高的存取速度，服务器一般把session放在内存里。每个用户都会有一个独立的session。如果session内容过于复杂，当大量客户访问服务器时可能会导致内存溢出。因此，session里的信息应该尽量精简。</p>\n<p>session在用户第一次访问服务器的时候自动创建。需要注意只有访问JSP、Servlet等程序时才会创建session，只访问HTML、IMAGE等静态资源并不会创建session。如果尚未生成session，也可以使用request.getSession(true)强制生成session。</p>\n<ul>\n<li>session生成后，只要用户继续访问，服务器就会更新session的最后访问时间，并维护该session。用户每访问服务器一次，无论是否读写session，服务器都认为该用户的Session“活跃（active）”了一次。</li>\n<li>为防止内存溢出，服务器会把长时间内没有活跃的session从内存删除。这个时间就是session的超时时间。如果超过了超时时间没访问过服务器，session就自动失效了。tomcat默认失效时间为20分钟。</li>\n</ul>\n<h3 id=\"session对浏览器的要求\"><a href=\"#session对浏览器的要求\" class=\"headerlink\" title=\"session对浏览器的要求\"></a>session对浏览器的要求</h3><p>虽然session保存在服务器，对客户端是透明的，它的正常运行仍然需要客户端浏览器的支持。这是因为session需要使用Cookie作为识别标志。HTTP协议是无状态的，session不能依据HTTP连接来判断是否为同一客户，因此服务器向客户端浏览器发送一个名为JSESSIONID的Cookie，它的值为该session的id（也就是HttpSession.getId()的返回值）。session依据该Cookie来识别是否为同一用户。</p>\n<p>如果客户端浏览器将Cookie功能禁用，或者不支持Cookie怎么办？例如，绝大多数的手机浏览器都不支持Cookie。Java Web提供了另一种解决方案：URL地址重写。</p>\n<h3 id=\"URL地址重写\"><a href=\"#URL地址重写\" class=\"headerlink\" title=\"URL地址重写\"></a>URL地址重写</h3><p>URL地址重写是对客户端不支持Cookie的解决方案。URL地址重写的原理是将该用户session的id信息重写到URL地址中。服务器能够解析重写后的URL获取session的id。这样即使客户端不支持Cookie，也可以使用session来记录用户状态。</p>\n<h2 id=\"两者区别\"><a href=\"#两者区别\" class=\"headerlink\" title=\"两者区别\"></a>两者区别</h2><ul>\n<li>cookie数据存放在客户的浏览器上，session数据放在服务器上的，但名为JSESSIONID的Cookie（值为该Session的id）是放在客户端的。</li>\n<li>cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗考虑到安全应当使用session。</li>\n<li>设置cookie时间可以使cookie过期。但是使用session-destory（），我们将会销毁会话。</li>\n<li>session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能考虑到减轻服务器性能方面，应当使用cookie。</li>\n<li>单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。(Session对象没有对存储的数据量的限制，其中可以保存更为复杂的数据类型)</li>\n<li>两者最大的区别在于生存周期，session是IE启动到IE关闭.(浏览器页面一关 ,session就消失了)，cookie是预先设置的生存周期，或永久的保存于本地的文件。</li>\n</ul>\n"},{"title":"数据结构：树的深度遍历和广度遍历","date":"2019-04-21T16:00:00.000Z","comments":1,"_content":"\n## 普通树\n### 深度遍历\n先访问根结点，然后遍历左子树接着是遍历右子树。利用堆栈的先进后出。\n\n### 广度遍历\n从根开始访问,按照根节点左右顺序访问.每次把同层节点左右孩子访问完毕.再访问下一层，所以用队列的先进先出实现。\n\n## 二叉树\n### 前序遍历\n根 左 右\n### 中序遍历\n左 根 右\n### 后序遍历\n左 右 根\n","source":"_posts/其他/数据结构：树的深度遍历和广度遍历.md","raw":"---\ntitle: 数据结构：树的深度遍历和广度遍历\ndate: 2019-04-22\ntags: [数据结构]\ncategories: 数据结构\ncomments: true\n---\n\n## 普通树\n### 深度遍历\n先访问根结点，然后遍历左子树接着是遍历右子树。利用堆栈的先进后出。\n\n### 广度遍历\n从根开始访问,按照根节点左右顺序访问.每次把同层节点左右孩子访问完毕.再访问下一层，所以用队列的先进先出实现。\n\n## 二叉树\n### 前序遍历\n根 左 右\n### 中序遍历\n左 根 右\n### 后序遍历\n左 右 根\n","slug":"其他/数据结构：树的深度遍历和广度遍历","published":1,"updated":"2022-07-22T08:00:47.133Z","layout":"post","photos":[],"link":"","_id":"cl5wb2yms00bdcj38qf1tm5zm","content":"<h2 id=\"普通树\"><a href=\"#普通树\" class=\"headerlink\" title=\"普通树\"></a>普通树</h2><h3 id=\"深度遍历\"><a href=\"#深度遍历\" class=\"headerlink\" title=\"深度遍历\"></a>深度遍历</h3><p>先访问根结点，然后遍历左子树接着是遍历右子树。利用堆栈的先进后出。</p>\n<h3 id=\"广度遍历\"><a href=\"#广度遍历\" class=\"headerlink\" title=\"广度遍历\"></a>广度遍历</h3><p>从根开始访问,按照根节点左右顺序访问.每次把同层节点左右孩子访问完毕.再访问下一层，所以用队列的先进先出实现。</p>\n<h2 id=\"二叉树\"><a href=\"#二叉树\" class=\"headerlink\" title=\"二叉树\"></a>二叉树</h2><h3 id=\"前序遍历\"><a href=\"#前序遍历\" class=\"headerlink\" title=\"前序遍历\"></a>前序遍历</h3><p>根 左 右</p>\n<h3 id=\"中序遍历\"><a href=\"#中序遍历\" class=\"headerlink\" title=\"中序遍历\"></a>中序遍历</h3><p>左 根 右</p>\n<h3 id=\"后序遍历\"><a href=\"#后序遍历\" class=\"headerlink\" title=\"后序遍历\"></a>后序遍历</h3><p>左 右 根</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"普通树\"><a href=\"#普通树\" class=\"headerlink\" title=\"普通树\"></a>普通树</h2><h3 id=\"深度遍历\"><a href=\"#深度遍历\" class=\"headerlink\" title=\"深度遍历\"></a>深度遍历</h3><p>先访问根结点，然后遍历左子树接着是遍历右子树。利用堆栈的先进后出。</p>\n<h3 id=\"广度遍历\"><a href=\"#广度遍历\" class=\"headerlink\" title=\"广度遍历\"></a>广度遍历</h3><p>从根开始访问,按照根节点左右顺序访问.每次把同层节点左右孩子访问完毕.再访问下一层，所以用队列的先进先出实现。</p>\n<h2 id=\"二叉树\"><a href=\"#二叉树\" class=\"headerlink\" title=\"二叉树\"></a>二叉树</h2><h3 id=\"前序遍历\"><a href=\"#前序遍历\" class=\"headerlink\" title=\"前序遍历\"></a>前序遍历</h3><p>根 左 右</p>\n<h3 id=\"中序遍历\"><a href=\"#中序遍历\" class=\"headerlink\" title=\"中序遍历\"></a>中序遍历</h3><p>左 根 右</p>\n<h3 id=\"后序遍历\"><a href=\"#后序遍历\" class=\"headerlink\" title=\"后序遍历\"></a>后序遍历</h3><p>左 右 根</p>\n"},{"title":"数据类型：json和xml","date":"2019-03-28T16:00:00.000Z","comments":1,"_content":"\n### json\n- json是一种轻量级的数据交换格式。\n- 兼容性高。\n- 格式简单，易读写。\n- 易于解析。\n\n### xml\n- xml是一种扩展标记语言。\n- 可用来标记数据，定义数据类型。\n- 格式统一。\n- 文件庞大，格式复杂。\n- 客户端和服务器端都需要大量代码来解析，导致代码复杂难以维护。","source":"_posts/其他/数据类型：json和xml.md","raw":"---\ntitle: 数据类型：json和xml\ndate: 2019-03-29\ntags: [数据类型]\ncategories: 数据类型\ncomments: true\n---\n\n### json\n- json是一种轻量级的数据交换格式。\n- 兼容性高。\n- 格式简单，易读写。\n- 易于解析。\n\n### xml\n- xml是一种扩展标记语言。\n- 可用来标记数据，定义数据类型。\n- 格式统一。\n- 文件庞大，格式复杂。\n- 客户端和服务器端都需要大量代码来解析，导致代码复杂难以维护。","slug":"其他/数据类型：json和xml","published":1,"updated":"2022-07-22T08:01:09.122Z","layout":"post","photos":[],"link":"","_id":"cl5wb2yms00bgcj38yd1mycln","content":"<h3 id=\"json\"><a href=\"#json\" class=\"headerlink\" title=\"json\"></a>json</h3><ul>\n<li>json是一种轻量级的数据交换格式。</li>\n<li>兼容性高。</li>\n<li>格式简单，易读写。</li>\n<li>易于解析。</li>\n</ul>\n<h3 id=\"xml\"><a href=\"#xml\" class=\"headerlink\" title=\"xml\"></a>xml</h3><ul>\n<li>xml是一种扩展标记语言。</li>\n<li>可用来标记数据，定义数据类型。</li>\n<li>格式统一。</li>\n<li>文件庞大，格式复杂。</li>\n<li>客户端和服务器端都需要大量代码来解析，导致代码复杂难以维护。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"json\"><a href=\"#json\" class=\"headerlink\" title=\"json\"></a>json</h3><ul>\n<li>json是一种轻量级的数据交换格式。</li>\n<li>兼容性高。</li>\n<li>格式简单，易读写。</li>\n<li>易于解析。</li>\n</ul>\n<h3 id=\"xml\"><a href=\"#xml\" class=\"headerlink\" title=\"xml\"></a>xml</h3><ul>\n<li>xml是一种扩展标记语言。</li>\n<li>可用来标记数据，定义数据类型。</li>\n<li>格式统一。</li>\n<li>文件庞大，格式复杂。</li>\n<li>客户端和服务器端都需要大量代码来解析，导致代码复杂难以维护。</li>\n</ul>\n"},{"title":"BOM和DOM","date":"2019-03-27T16:00:00.000Z","comments":1,"_content":"\n### BOM和DOM\n- DOM（文档对象模型）是 HTML 和 XML 的应用程序接口。\n- DOM可以将任何HTML或XML文档描绘成一个由多层次节点构成的结构。\n- BOM （浏览器对象模型）主要处理浏览器窗口和框架。\n- javacsript是通过访问BOM对象来访问、控制、修改客户端浏览器。\n- 由于BOM的window包含了document，document对象又是DOM的根节点。可以说，BOM包含了DOM。\n- 浏览器提供出来给予访问的是BOM对象，从BOM对象再访问到DOM对象，从而js可以操作浏览器以及浏览器读取到的文档。\n\n### 拓展：遍历dom树\n","source":"_posts/前端/BOM和DOM.md","raw":"---\ntitle: BOM和DOM\ndate: 2019-03-28\ntags: [前端]\ncategories: 前端\ncomments: true\n---\n\n### BOM和DOM\n- DOM（文档对象模型）是 HTML 和 XML 的应用程序接口。\n- DOM可以将任何HTML或XML文档描绘成一个由多层次节点构成的结构。\n- BOM （浏览器对象模型）主要处理浏览器窗口和框架。\n- javacsript是通过访问BOM对象来访问、控制、修改客户端浏览器。\n- 由于BOM的window包含了document，document对象又是DOM的根节点。可以说，BOM包含了DOM。\n- 浏览器提供出来给予访问的是BOM对象，从BOM对象再访问到DOM对象，从而js可以操作浏览器以及浏览器读取到的文档。\n\n### 拓展：遍历dom树\n","slug":"前端/BOM和DOM","published":1,"updated":"2022-07-22T10:11:04.319Z","layout":"post","photos":[],"link":"","_id":"cl5wb2ymu00blcj38svn9gb81","content":"<h3 id=\"BOM和DOM\"><a href=\"#BOM和DOM\" class=\"headerlink\" title=\"BOM和DOM\"></a>BOM和DOM</h3><ul>\n<li>DOM（文档对象模型）是 HTML 和 XML 的应用程序接口。</li>\n<li>DOM可以将任何HTML或XML文档描绘成一个由多层次节点构成的结构。</li>\n<li>BOM （浏览器对象模型）主要处理浏览器窗口和框架。</li>\n<li>javacsript是通过访问BOM对象来访问、控制、修改客户端浏览器。</li>\n<li>由于BOM的window包含了document，document对象又是DOM的根节点。可以说，BOM包含了DOM。</li>\n<li>浏览器提供出来给予访问的是BOM对象，从BOM对象再访问到DOM对象，从而js可以操作浏览器以及浏览器读取到的文档。</li>\n</ul>\n<h3 id=\"拓展：遍历dom树\"><a href=\"#拓展：遍历dom树\" class=\"headerlink\" title=\"拓展：遍历dom树\"></a>拓展：遍历dom树</h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"BOM和DOM\"><a href=\"#BOM和DOM\" class=\"headerlink\" title=\"BOM和DOM\"></a>BOM和DOM</h3><ul>\n<li>DOM（文档对象模型）是 HTML 和 XML 的应用程序接口。</li>\n<li>DOM可以将任何HTML或XML文档描绘成一个由多层次节点构成的结构。</li>\n<li>BOM （浏览器对象模型）主要处理浏览器窗口和框架。</li>\n<li>javacsript是通过访问BOM对象来访问、控制、修改客户端浏览器。</li>\n<li>由于BOM的window包含了document，document对象又是DOM的根节点。可以说，BOM包含了DOM。</li>\n<li>浏览器提供出来给予访问的是BOM对象，从BOM对象再访问到DOM对象，从而js可以操作浏览器以及浏览器读取到的文档。</li>\n</ul>\n<h3 id=\"拓展：遍历dom树\"><a href=\"#拓展：遍历dom树\" class=\"headerlink\" title=\"拓展：遍历dom树\"></a>拓展：遍历dom树</h3>"},{"title":"h5和css3的新特性","date":"2019-03-05T16:00:00.000Z","comments":1,"_content":"\n## HTML5\n### 绘画标签canvas\n### 用于媒介回放的video、audio\n### 本地离线存储localStorage\n长期存储数据，浏览器关闭后数据不丢失 \n### sessionStorage\n数据在浏览器关闭后自动删除； \n### 语义化更好的内容元素\n比如article、footer、header、nav、section； \n### 表单控件\ncalendar、data、time、email、url、search； \n### webworker、websocket、Geolocation； 移除的元素： \n- 纯表现的元素：basefont、big、center、font、s、strike、tt\n- 对可用性产生负面影响的元素：frame、frameset、noframes\n\n## CSS3\n### RGBA和透明度\n### word-wrap（对长的不可分割单词换行）\n```\nword-wrap: normal|break-word;\n```\n### 文字阴影\n```\ntext-shadow：5px 5px 5px #FF0000;\n//水平阴影，垂直阴影，模糊距离，阴影颜色\n```\n### @font-face规则\n定义自己的字体\n### 圆角（边框半径）\nborder-radius 属性用于创建圆角\n### 边框图片\nborder-image\n### box-sizing\n### 盒阴影\n```\nbox-shadow:10px 10px 5px #88888\n```\n### 媒体查询\n定义两套css，当浏览器的尺寸变化时会采用不同的属性","source":"_posts/前端/h5和css3的新特性.md","raw":"---\ntitle: h5和css3的新特性\ndate: 2019-03-06\ntags: [前端]\ncategories: 前端\ncomments: true\n---\n\n## HTML5\n### 绘画标签canvas\n### 用于媒介回放的video、audio\n### 本地离线存储localStorage\n长期存储数据，浏览器关闭后数据不丢失 \n### sessionStorage\n数据在浏览器关闭后自动删除； \n### 语义化更好的内容元素\n比如article、footer、header、nav、section； \n### 表单控件\ncalendar、data、time、email、url、search； \n### webworker、websocket、Geolocation； 移除的元素： \n- 纯表现的元素：basefont、big、center、font、s、strike、tt\n- 对可用性产生负面影响的元素：frame、frameset、noframes\n\n## CSS3\n### RGBA和透明度\n### word-wrap（对长的不可分割单词换行）\n```\nword-wrap: normal|break-word;\n```\n### 文字阴影\n```\ntext-shadow：5px 5px 5px #FF0000;\n//水平阴影，垂直阴影，模糊距离，阴影颜色\n```\n### @font-face规则\n定义自己的字体\n### 圆角（边框半径）\nborder-radius 属性用于创建圆角\n### 边框图片\nborder-image\n### box-sizing\n### 盒阴影\n```\nbox-shadow:10px 10px 5px #88888\n```\n### 媒体查询\n定义两套css，当浏览器的尺寸变化时会采用不同的属性","slug":"前端/h5和css3的新特性","published":1,"updated":"2022-07-22T10:11:25.497Z","layout":"post","photos":[],"link":"","_id":"cl5wb2ymu00bocj38ihyzigll","content":"<h2 id=\"HTML5\"><a href=\"#HTML5\" class=\"headerlink\" title=\"HTML5\"></a>HTML5</h2><h3 id=\"绘画标签canvas\"><a href=\"#绘画标签canvas\" class=\"headerlink\" title=\"绘画标签canvas\"></a>绘画标签canvas</h3><h3 id=\"用于媒介回放的video、audio\"><a href=\"#用于媒介回放的video、audio\" class=\"headerlink\" title=\"用于媒介回放的video、audio\"></a>用于媒介回放的video、audio</h3><h3 id=\"本地离线存储localStorage\"><a href=\"#本地离线存储localStorage\" class=\"headerlink\" title=\"本地离线存储localStorage\"></a>本地离线存储localStorage</h3><p>长期存储数据，浏览器关闭后数据不丢失 </p>\n<h3 id=\"sessionStorage\"><a href=\"#sessionStorage\" class=\"headerlink\" title=\"sessionStorage\"></a>sessionStorage</h3><p>数据在浏览器关闭后自动删除； </p>\n<h3 id=\"语义化更好的内容元素\"><a href=\"#语义化更好的内容元素\" class=\"headerlink\" title=\"语义化更好的内容元素\"></a>语义化更好的内容元素</h3><p>比如article、footer、header、nav、section； </p>\n<h3 id=\"表单控件\"><a href=\"#表单控件\" class=\"headerlink\" title=\"表单控件\"></a>表单控件</h3><p>calendar、data、time、email、url、search； </p>\n<h3 id=\"webworker、websocket、Geolocation；-移除的元素：\"><a href=\"#webworker、websocket、Geolocation；-移除的元素：\" class=\"headerlink\" title=\"webworker、websocket、Geolocation； 移除的元素：\"></a>webworker、websocket、Geolocation； 移除的元素：</h3><ul>\n<li>纯表现的元素：basefont、big、center、font、s、strike、tt</li>\n<li>对可用性产生负面影响的元素：frame、frameset、noframes</li>\n</ul>\n<h2 id=\"CSS3\"><a href=\"#CSS3\" class=\"headerlink\" title=\"CSS3\"></a>CSS3</h2><h3 id=\"RGBA和透明度\"><a href=\"#RGBA和透明度\" class=\"headerlink\" title=\"RGBA和透明度\"></a>RGBA和透明度</h3><h3 id=\"word-wrap（对长的不可分割单词换行）\"><a href=\"#word-wrap（对长的不可分割单词换行）\" class=\"headerlink\" title=\"word-wrap（对长的不可分割单词换行）\"></a>word-wrap（对长的不可分割单词换行）</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">word-wrap: normal|break-word;</span><br></pre></td></tr></table></figure>\n<h3 id=\"文字阴影\"><a href=\"#文字阴影\" class=\"headerlink\" title=\"文字阴影\"></a>文字阴影</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">text-shadow：5px 5px 5px #FF0000;</span><br><span class=\"line\">//水平阴影，垂直阴影，模糊距离，阴影颜色</span><br></pre></td></tr></table></figure>\n<h3 id=\"font-face规则\"><a href=\"#font-face规则\" class=\"headerlink\" title=\"@font-face规则\"></a>@font-face规则</h3><p>定义自己的字体</p>\n<h3 id=\"圆角（边框半径）\"><a href=\"#圆角（边框半径）\" class=\"headerlink\" title=\"圆角（边框半径）\"></a>圆角（边框半径）</h3><p>border-radius 属性用于创建圆角</p>\n<h3 id=\"边框图片\"><a href=\"#边框图片\" class=\"headerlink\" title=\"边框图片\"></a>边框图片</h3><p>border-image</p>\n<h3 id=\"box-sizing\"><a href=\"#box-sizing\" class=\"headerlink\" title=\"box-sizing\"></a>box-sizing</h3><h3 id=\"盒阴影\"><a href=\"#盒阴影\" class=\"headerlink\" title=\"盒阴影\"></a>盒阴影</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">box-shadow:10px 10px 5px #88888</span><br></pre></td></tr></table></figure>\n<h3 id=\"媒体查询\"><a href=\"#媒体查询\" class=\"headerlink\" title=\"媒体查询\"></a>媒体查询</h3><p>定义两套css，当浏览器的尺寸变化时会采用不同的属性</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"HTML5\"><a href=\"#HTML5\" class=\"headerlink\" title=\"HTML5\"></a>HTML5</h2><h3 id=\"绘画标签canvas\"><a href=\"#绘画标签canvas\" class=\"headerlink\" title=\"绘画标签canvas\"></a>绘画标签canvas</h3><h3 id=\"用于媒介回放的video、audio\"><a href=\"#用于媒介回放的video、audio\" class=\"headerlink\" title=\"用于媒介回放的video、audio\"></a>用于媒介回放的video、audio</h3><h3 id=\"本地离线存储localStorage\"><a href=\"#本地离线存储localStorage\" class=\"headerlink\" title=\"本地离线存储localStorage\"></a>本地离线存储localStorage</h3><p>长期存储数据，浏览器关闭后数据不丢失 </p>\n<h3 id=\"sessionStorage\"><a href=\"#sessionStorage\" class=\"headerlink\" title=\"sessionStorage\"></a>sessionStorage</h3><p>数据在浏览器关闭后自动删除； </p>\n<h3 id=\"语义化更好的内容元素\"><a href=\"#语义化更好的内容元素\" class=\"headerlink\" title=\"语义化更好的内容元素\"></a>语义化更好的内容元素</h3><p>比如article、footer、header、nav、section； </p>\n<h3 id=\"表单控件\"><a href=\"#表单控件\" class=\"headerlink\" title=\"表单控件\"></a>表单控件</h3><p>calendar、data、time、email、url、search； </p>\n<h3 id=\"webworker、websocket、Geolocation；-移除的元素：\"><a href=\"#webworker、websocket、Geolocation；-移除的元素：\" class=\"headerlink\" title=\"webworker、websocket、Geolocation； 移除的元素：\"></a>webworker、websocket、Geolocation； 移除的元素：</h3><ul>\n<li>纯表现的元素：basefont、big、center、font、s、strike、tt</li>\n<li>对可用性产生负面影响的元素：frame、frameset、noframes</li>\n</ul>\n<h2 id=\"CSS3\"><a href=\"#CSS3\" class=\"headerlink\" title=\"CSS3\"></a>CSS3</h2><h3 id=\"RGBA和透明度\"><a href=\"#RGBA和透明度\" class=\"headerlink\" title=\"RGBA和透明度\"></a>RGBA和透明度</h3><h3 id=\"word-wrap（对长的不可分割单词换行）\"><a href=\"#word-wrap（对长的不可分割单词换行）\" class=\"headerlink\" title=\"word-wrap（对长的不可分割单词换行）\"></a>word-wrap（对长的不可分割单词换行）</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">word-wrap: normal|break-word;</span><br></pre></td></tr></table></figure>\n<h3 id=\"文字阴影\"><a href=\"#文字阴影\" class=\"headerlink\" title=\"文字阴影\"></a>文字阴影</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">text-shadow：5px 5px 5px #FF0000;</span><br><span class=\"line\">//水平阴影，垂直阴影，模糊距离，阴影颜色</span><br></pre></td></tr></table></figure>\n<h3 id=\"font-face规则\"><a href=\"#font-face规则\" class=\"headerlink\" title=\"@font-face规则\"></a>@font-face规则</h3><p>定义自己的字体</p>\n<h3 id=\"圆角（边框半径）\"><a href=\"#圆角（边框半径）\" class=\"headerlink\" title=\"圆角（边框半径）\"></a>圆角（边框半径）</h3><p>border-radius 属性用于创建圆角</p>\n<h3 id=\"边框图片\"><a href=\"#边框图片\" class=\"headerlink\" title=\"边框图片\"></a>边框图片</h3><p>border-image</p>\n<h3 id=\"box-sizing\"><a href=\"#box-sizing\" class=\"headerlink\" title=\"box-sizing\"></a>box-sizing</h3><h3 id=\"盒阴影\"><a href=\"#盒阴影\" class=\"headerlink\" title=\"盒阴影\"></a>盒阴影</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">box-shadow:10px 10px 5px #88888</span><br></pre></td></tr></table></figure>\n<h3 id=\"媒体查询\"><a href=\"#媒体查询\" class=\"headerlink\" title=\"媒体查询\"></a>媒体查询</h3><p>定义两套css，当浏览器的尺寸变化时会采用不同的属性</p>\n"},{"title":"canvas","date":"2019-04-17T16:00:00.000Z","comments":1,"_content":"\nCanvas是HTML5新增的组件，它就像一块幕布，可以用JavaScript在上面绘制各种图表、动画等。\n\n## 属性\n- height\n- width\n\n一个Canvas定义了一个指定尺寸的矩形框\n```\n<canvas id=\"test-canvas\" width=\"300\" height=\"200\"></canvas>\n```\n## 检测浏览器支持\n由于浏览器对HTML5标准支持不一致，所以，通常在canvas内部添加一些说明性HTML代码，如果浏览器支持Canvas，它将忽略canvas内部的HTML，如果浏览器不支持Canvas，它将显示canvas内部的HTML\n\n```\n<canvas id=\"test-stock\" width=\"300\" height=\"200\">\n    <p>Current Price: 25.51</p>\n</canvas>\n\n```\n在使用Canvas前，还需要用canvas.getContext来测试浏览器是否支持Canvas\n\n```\nvar canvas = document.getElementById('test-canvas');\nif (canvas.getContext) {\n    console.log('你的浏览器支持Canvas!');\n} else {\n    console.log('你的浏览器不支持Canvas!');\n}\n```\n## 方法\n\ncanvas绘图以左上角的（0， 0）为基准原点\n```\nlet canvas = document.querySelector('#canvas'); // 得到canvas\n//得到canvas上下文环境\nlet ctx = canvas.getContext('2d')//绘制2d图形\nlet gl = canvas.getContext(\"webgl\");//绘制3d图形\n```\n### 绘制矩形\n\n#### ctx.rect(x,y,width,height);\n- 创建矩形。\n- 但并不会真正将矩形画出，只能调用stroke() 或 fill()后才会真正作用于画布。\n- 先填充再描边。\n- 可通过canvas.width或canvas.height获取画布的宽度和高度\n\n#### ctx.fillRect(x,y,width,height)\n- 执行填充操作，绘制一个已填色的、以(x,y)位置为起点、大小为width x height的矩形。\n- 有填充颜色，默认为black。\n\n####  ctx.fillStyle=\"\"\n为图形设置填充颜色\n\n#### ctx.strokeRect(x,y,width,height);\n- 绘制一个不填色、以(x,y)位置为起点、大小为width x height的矩形。\n- 有边框颜色，默认为black。\n\n#### ctx.strokeStyle=\"\"\n为图形设置边框颜色\n\n#### ctx.clearRect(x,y,width,height);\n- 将(x,y)位置大小为width x height的矩形变为透明。\n- Internet Explorer 9、Firefox、Opera、Chrome 以及 Safari 支持 clearRect() 方法。\n- 若canvas设置了背景颜色是不能被清除的，因为那是画布的背景颜色，clearRect清除的是绘制的图形，使绘制的图形变为透明，显现出画布背景色。\n\n### 绘制复杂形状\n\n#### ctx.lineWidth=x;\n设置线宽为x，不需要加px\n\n#### ctx.fill();\n填充图形，可利用fillStyle设置填充颜色\n\n#### ctx.stroke();\n绘制图形，可利用strokeStyle设置边框颜色\n\n#### ctx.beginPath();\n清除原来的痕迹,绘制图形之前要先调用\n\n#### ctx.closePath();\n自动完成闭合\n\n#### ctx.moveTo(x,y);\n从(x,y)点开始绘图\n\n#### ctx.lineTo(x,y);\n绘图终点为(x,y)\n\n#### ctx.arc(x, y, r, 起始弧度， 终点弧度，是否逆时针) \n- 圆心为(x,y),半径为r\n- 弧度 = Math.PI*角度\n- 设置完弧线，要用moveTo()进行绘制\n\n### 绘制文本\n#### ctx.font = \"24px 宋体\"\n设置字体大小、型号\n\n#### ctx.fillText(\"文字内容\",left,top);\n- 绘制实心文字。\n- left为距画布最左边距离，top为距画布最上边距离。\n- 可通过fillStyke设置文字填充颜色\n\n#### ctx.strokeText(\"文字内容\",left,top);\n- 绘制空心文字。\n- left与top同上。\n- 可通过strokeStyle设置文字边框颜色。\n\n#### 设置文字阴影\n这些要在设置文字内容之前设置\n- ctx.shadowOffsetX = x; x轴偏移量，默认位于元素正下方。\n- ctx.shadowOffsetY = y; y轴偏移量，默认位于元素正下方。\n- ctx.shadowBlur = num; 设置模糊系数。默认为0不模糊。\n- ctx.shadowColor = \"\"; 设置阴影颜色，同时要设置shadowBlur，否则看不见\n\n用canvas画出一个(0,0)坐标绿色的100x100矩形框\n，再从(10,10)坐标将50x50的区域变成透明\n\n```\n<canvas id=\"test\" width=\"100px\" height=\"100px\"></canvas>\n\n<script>\nvar canvas = document.getElementById(\"test\");\nvar ctx = canvas.getContext(\"2d\");\nctx.fillStyle = \"green\";\nctx.fillRect(0,0,100,100);\nctx.clearRect(10,10,50,50);\n</script>\n```\n","source":"_posts/前端/canvas.md","raw":"---\ntitle: canvas\ndate: 2019-04-18\ntags: [前端]\ncategories: 前端\ncomments: true\n---\n\nCanvas是HTML5新增的组件，它就像一块幕布，可以用JavaScript在上面绘制各种图表、动画等。\n\n## 属性\n- height\n- width\n\n一个Canvas定义了一个指定尺寸的矩形框\n```\n<canvas id=\"test-canvas\" width=\"300\" height=\"200\"></canvas>\n```\n## 检测浏览器支持\n由于浏览器对HTML5标准支持不一致，所以，通常在canvas内部添加一些说明性HTML代码，如果浏览器支持Canvas，它将忽略canvas内部的HTML，如果浏览器不支持Canvas，它将显示canvas内部的HTML\n\n```\n<canvas id=\"test-stock\" width=\"300\" height=\"200\">\n    <p>Current Price: 25.51</p>\n</canvas>\n\n```\n在使用Canvas前，还需要用canvas.getContext来测试浏览器是否支持Canvas\n\n```\nvar canvas = document.getElementById('test-canvas');\nif (canvas.getContext) {\n    console.log('你的浏览器支持Canvas!');\n} else {\n    console.log('你的浏览器不支持Canvas!');\n}\n```\n## 方法\n\ncanvas绘图以左上角的（0， 0）为基准原点\n```\nlet canvas = document.querySelector('#canvas'); // 得到canvas\n//得到canvas上下文环境\nlet ctx = canvas.getContext('2d')//绘制2d图形\nlet gl = canvas.getContext(\"webgl\");//绘制3d图形\n```\n### 绘制矩形\n\n#### ctx.rect(x,y,width,height);\n- 创建矩形。\n- 但并不会真正将矩形画出，只能调用stroke() 或 fill()后才会真正作用于画布。\n- 先填充再描边。\n- 可通过canvas.width或canvas.height获取画布的宽度和高度\n\n#### ctx.fillRect(x,y,width,height)\n- 执行填充操作，绘制一个已填色的、以(x,y)位置为起点、大小为width x height的矩形。\n- 有填充颜色，默认为black。\n\n####  ctx.fillStyle=\"\"\n为图形设置填充颜色\n\n#### ctx.strokeRect(x,y,width,height);\n- 绘制一个不填色、以(x,y)位置为起点、大小为width x height的矩形。\n- 有边框颜色，默认为black。\n\n#### ctx.strokeStyle=\"\"\n为图形设置边框颜色\n\n#### ctx.clearRect(x,y,width,height);\n- 将(x,y)位置大小为width x height的矩形变为透明。\n- Internet Explorer 9、Firefox、Opera、Chrome 以及 Safari 支持 clearRect() 方法。\n- 若canvas设置了背景颜色是不能被清除的，因为那是画布的背景颜色，clearRect清除的是绘制的图形，使绘制的图形变为透明，显现出画布背景色。\n\n### 绘制复杂形状\n\n#### ctx.lineWidth=x;\n设置线宽为x，不需要加px\n\n#### ctx.fill();\n填充图形，可利用fillStyle设置填充颜色\n\n#### ctx.stroke();\n绘制图形，可利用strokeStyle设置边框颜色\n\n#### ctx.beginPath();\n清除原来的痕迹,绘制图形之前要先调用\n\n#### ctx.closePath();\n自动完成闭合\n\n#### ctx.moveTo(x,y);\n从(x,y)点开始绘图\n\n#### ctx.lineTo(x,y);\n绘图终点为(x,y)\n\n#### ctx.arc(x, y, r, 起始弧度， 终点弧度，是否逆时针) \n- 圆心为(x,y),半径为r\n- 弧度 = Math.PI*角度\n- 设置完弧线，要用moveTo()进行绘制\n\n### 绘制文本\n#### ctx.font = \"24px 宋体\"\n设置字体大小、型号\n\n#### ctx.fillText(\"文字内容\",left,top);\n- 绘制实心文字。\n- left为距画布最左边距离，top为距画布最上边距离。\n- 可通过fillStyke设置文字填充颜色\n\n#### ctx.strokeText(\"文字内容\",left,top);\n- 绘制空心文字。\n- left与top同上。\n- 可通过strokeStyle设置文字边框颜色。\n\n#### 设置文字阴影\n这些要在设置文字内容之前设置\n- ctx.shadowOffsetX = x; x轴偏移量，默认位于元素正下方。\n- ctx.shadowOffsetY = y; y轴偏移量，默认位于元素正下方。\n- ctx.shadowBlur = num; 设置模糊系数。默认为0不模糊。\n- ctx.shadowColor = \"\"; 设置阴影颜色，同时要设置shadowBlur，否则看不见\n\n用canvas画出一个(0,0)坐标绿色的100x100矩形框\n，再从(10,10)坐标将50x50的区域变成透明\n\n```\n<canvas id=\"test\" width=\"100px\" height=\"100px\"></canvas>\n\n<script>\nvar canvas = document.getElementById(\"test\");\nvar ctx = canvas.getContext(\"2d\");\nctx.fillStyle = \"green\";\nctx.fillRect(0,0,100,100);\nctx.clearRect(10,10,50,50);\n</script>\n```\n","slug":"前端/canvas","published":1,"updated":"2022-07-22T10:11:28.785Z","layout":"post","photos":[],"link":"","_id":"cl5wb2ymv00btcj38fptby8mn","content":"<p>Canvas是HTML5新增的组件，它就像一块幕布，可以用JavaScript在上面绘制各种图表、动画等。</p>\n<h2 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h2><ul>\n<li>height</li>\n<li>width</li>\n</ul>\n<p>一个Canvas定义了一个指定尺寸的矩形框<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;canvas id=&quot;test-canvas&quot; width=&quot;300&quot; height=&quot;200&quot;&gt;&lt;/canvas&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"检测浏览器支持\"><a href=\"#检测浏览器支持\" class=\"headerlink\" title=\"检测浏览器支持\"></a>检测浏览器支持</h2><p>由于浏览器对HTML5标准支持不一致，所以，通常在canvas内部添加一些说明性HTML代码，如果浏览器支持Canvas，它将忽略canvas内部的HTML，如果浏览器不支持Canvas，它将显示canvas内部的HTML</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;canvas id=&quot;test-stock&quot; width=&quot;300&quot; height=&quot;200&quot;&gt;</span><br><span class=\"line\">    &lt;p&gt;Current Price: 25.51&lt;/p&gt;</span><br><span class=\"line\">&lt;/canvas&gt;</span><br></pre></td></tr></table></figure>\n<p>在使用Canvas前，还需要用canvas.getContext来测试浏览器是否支持Canvas</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var canvas = document.getElementById(&apos;test-canvas&apos;);</span><br><span class=\"line\">if (canvas.getContext) &#123;</span><br><span class=\"line\">    console.log(&apos;你的浏览器支持Canvas!&apos;);</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">    console.log(&apos;你的浏览器不支持Canvas!&apos;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><p>canvas绘图以左上角的（0， 0）为基准原点<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let canvas = document.querySelector(&apos;#canvas&apos;); // 得到canvas</span><br><span class=\"line\">//得到canvas上下文环境</span><br><span class=\"line\">let ctx = canvas.getContext(&apos;2d&apos;)//绘制2d图形</span><br><span class=\"line\">let gl = canvas.getContext(&quot;webgl&quot;);//绘制3d图形</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"绘制矩形\"><a href=\"#绘制矩形\" class=\"headerlink\" title=\"绘制矩形\"></a>绘制矩形</h3><h4 id=\"ctx-rect-x-y-width-height\"><a href=\"#ctx-rect-x-y-width-height\" class=\"headerlink\" title=\"ctx.rect(x,y,width,height);\"></a>ctx.rect(x,y,width,height);</h4><ul>\n<li>创建矩形。</li>\n<li>但并不会真正将矩形画出，只能调用stroke() 或 fill()后才会真正作用于画布。</li>\n<li>先填充再描边。</li>\n<li>可通过canvas.width或canvas.height获取画布的宽度和高度</li>\n</ul>\n<h4 id=\"ctx-fillRect-x-y-width-height\"><a href=\"#ctx-fillRect-x-y-width-height\" class=\"headerlink\" title=\"ctx.fillRect(x,y,width,height)\"></a>ctx.fillRect(x,y,width,height)</h4><ul>\n<li>执行填充操作，绘制一个已填色的、以(x,y)位置为起点、大小为width x height的矩形。</li>\n<li>有填充颜色，默认为black。</li>\n</ul>\n<h4 id=\"ctx-fillStyle-””\"><a href=\"#ctx-fillStyle-””\" class=\"headerlink\" title=\"ctx.fillStyle=””\"></a>ctx.fillStyle=””</h4><p>为图形设置填充颜色</p>\n<h4 id=\"ctx-strokeRect-x-y-width-height\"><a href=\"#ctx-strokeRect-x-y-width-height\" class=\"headerlink\" title=\"ctx.strokeRect(x,y,width,height);\"></a>ctx.strokeRect(x,y,width,height);</h4><ul>\n<li>绘制一个不填色、以(x,y)位置为起点、大小为width x height的矩形。</li>\n<li>有边框颜色，默认为black。</li>\n</ul>\n<h4 id=\"ctx-strokeStyle-””\"><a href=\"#ctx-strokeStyle-””\" class=\"headerlink\" title=\"ctx.strokeStyle=””\"></a>ctx.strokeStyle=””</h4><p>为图形设置边框颜色</p>\n<h4 id=\"ctx-clearRect-x-y-width-height\"><a href=\"#ctx-clearRect-x-y-width-height\" class=\"headerlink\" title=\"ctx.clearRect(x,y,width,height);\"></a>ctx.clearRect(x,y,width,height);</h4><ul>\n<li>将(x,y)位置大小为width x height的矩形变为透明。</li>\n<li>Internet Explorer 9、Firefox、Opera、Chrome 以及 Safari 支持 clearRect() 方法。</li>\n<li>若canvas设置了背景颜色是不能被清除的，因为那是画布的背景颜色，clearRect清除的是绘制的图形，使绘制的图形变为透明，显现出画布背景色。</li>\n</ul>\n<h3 id=\"绘制复杂形状\"><a href=\"#绘制复杂形状\" class=\"headerlink\" title=\"绘制复杂形状\"></a>绘制复杂形状</h3><h4 id=\"ctx-lineWidth-x\"><a href=\"#ctx-lineWidth-x\" class=\"headerlink\" title=\"ctx.lineWidth=x;\"></a>ctx.lineWidth=x;</h4><p>设置线宽为x，不需要加px</p>\n<h4 id=\"ctx-fill\"><a href=\"#ctx-fill\" class=\"headerlink\" title=\"ctx.fill();\"></a>ctx.fill();</h4><p>填充图形，可利用fillStyle设置填充颜色</p>\n<h4 id=\"ctx-stroke\"><a href=\"#ctx-stroke\" class=\"headerlink\" title=\"ctx.stroke();\"></a>ctx.stroke();</h4><p>绘制图形，可利用strokeStyle设置边框颜色</p>\n<h4 id=\"ctx-beginPath\"><a href=\"#ctx-beginPath\" class=\"headerlink\" title=\"ctx.beginPath();\"></a>ctx.beginPath();</h4><p>清除原来的痕迹,绘制图形之前要先调用</p>\n<h4 id=\"ctx-closePath\"><a href=\"#ctx-closePath\" class=\"headerlink\" title=\"ctx.closePath();\"></a>ctx.closePath();</h4><p>自动完成闭合</p>\n<h4 id=\"ctx-moveTo-x-y\"><a href=\"#ctx-moveTo-x-y\" class=\"headerlink\" title=\"ctx.moveTo(x,y);\"></a>ctx.moveTo(x,y);</h4><p>从(x,y)点开始绘图</p>\n<h4 id=\"ctx-lineTo-x-y\"><a href=\"#ctx-lineTo-x-y\" class=\"headerlink\" title=\"ctx.lineTo(x,y);\"></a>ctx.lineTo(x,y);</h4><p>绘图终点为(x,y)</p>\n<h4 id=\"ctx-arc-x-y-r-起始弧度，-终点弧度，是否逆时针\"><a href=\"#ctx-arc-x-y-r-起始弧度，-终点弧度，是否逆时针\" class=\"headerlink\" title=\"ctx.arc(x, y, r, 起始弧度， 终点弧度，是否逆时针)\"></a>ctx.arc(x, y, r, 起始弧度， 终点弧度，是否逆时针)</h4><ul>\n<li>圆心为(x,y),半径为r</li>\n<li>弧度 = Math.PI*角度</li>\n<li>设置完弧线，要用moveTo()进行绘制</li>\n</ul>\n<h3 id=\"绘制文本\"><a href=\"#绘制文本\" class=\"headerlink\" title=\"绘制文本\"></a>绘制文本</h3><h4 id=\"ctx-font-“24px-宋体”\"><a href=\"#ctx-font-“24px-宋体”\" class=\"headerlink\" title=\"ctx.font = “24px 宋体”\"></a>ctx.font = “24px 宋体”</h4><p>设置字体大小、型号</p>\n<h4 id=\"ctx-fillText-“文字内容”-left-top\"><a href=\"#ctx-fillText-“文字内容”-left-top\" class=\"headerlink\" title=\"ctx.fillText(“文字内容”,left,top);\"></a>ctx.fillText(“文字内容”,left,top);</h4><ul>\n<li>绘制实心文字。</li>\n<li>left为距画布最左边距离，top为距画布最上边距离。</li>\n<li>可通过fillStyke设置文字填充颜色</li>\n</ul>\n<h4 id=\"ctx-strokeText-“文字内容”-left-top\"><a href=\"#ctx-strokeText-“文字内容”-left-top\" class=\"headerlink\" title=\"ctx.strokeText(“文字内容”,left,top);\"></a>ctx.strokeText(“文字内容”,left,top);</h4><ul>\n<li>绘制空心文字。</li>\n<li>left与top同上。</li>\n<li>可通过strokeStyle设置文字边框颜色。</li>\n</ul>\n<h4 id=\"设置文字阴影\"><a href=\"#设置文字阴影\" class=\"headerlink\" title=\"设置文字阴影\"></a>设置文字阴影</h4><p>这些要在设置文字内容之前设置</p>\n<ul>\n<li>ctx.shadowOffsetX = x; x轴偏移量，默认位于元素正下方。</li>\n<li>ctx.shadowOffsetY = y; y轴偏移量，默认位于元素正下方。</li>\n<li>ctx.shadowBlur = num; 设置模糊系数。默认为0不模糊。</li>\n<li>ctx.shadowColor = “”; 设置阴影颜色，同时要设置shadowBlur，否则看不见</li>\n</ul>\n<p>用canvas画出一个(0,0)坐标绿色的100x100矩形框<br>，再从(10,10)坐标将50x50的区域变成透明</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;canvas id=&quot;test&quot; width=&quot;100px&quot; height=&quot;100px&quot;&gt;&lt;/canvas&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">var canvas = document.getElementById(&quot;test&quot;);</span><br><span class=\"line\">var ctx = canvas.getContext(&quot;2d&quot;);</span><br><span class=\"line\">ctx.fillStyle = &quot;green&quot;;</span><br><span class=\"line\">ctx.fillRect(0,0,100,100);</span><br><span class=\"line\">ctx.clearRect(10,10,50,50);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>Canvas是HTML5新增的组件，它就像一块幕布，可以用JavaScript在上面绘制各种图表、动画等。</p>\n<h2 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h2><ul>\n<li>height</li>\n<li>width</li>\n</ul>\n<p>一个Canvas定义了一个指定尺寸的矩形框<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;canvas id=&quot;test-canvas&quot; width=&quot;300&quot; height=&quot;200&quot;&gt;&lt;/canvas&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"检测浏览器支持\"><a href=\"#检测浏览器支持\" class=\"headerlink\" title=\"检测浏览器支持\"></a>检测浏览器支持</h2><p>由于浏览器对HTML5标准支持不一致，所以，通常在canvas内部添加一些说明性HTML代码，如果浏览器支持Canvas，它将忽略canvas内部的HTML，如果浏览器不支持Canvas，它将显示canvas内部的HTML</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;canvas id=&quot;test-stock&quot; width=&quot;300&quot; height=&quot;200&quot;&gt;</span><br><span class=\"line\">    &lt;p&gt;Current Price: 25.51&lt;/p&gt;</span><br><span class=\"line\">&lt;/canvas&gt;</span><br></pre></td></tr></table></figure>\n<p>在使用Canvas前，还需要用canvas.getContext来测试浏览器是否支持Canvas</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var canvas = document.getElementById(&apos;test-canvas&apos;);</span><br><span class=\"line\">if (canvas.getContext) &#123;</span><br><span class=\"line\">    console.log(&apos;你的浏览器支持Canvas!&apos;);</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">    console.log(&apos;你的浏览器不支持Canvas!&apos;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><p>canvas绘图以左上角的（0， 0）为基准原点<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let canvas = document.querySelector(&apos;#canvas&apos;); // 得到canvas</span><br><span class=\"line\">//得到canvas上下文环境</span><br><span class=\"line\">let ctx = canvas.getContext(&apos;2d&apos;)//绘制2d图形</span><br><span class=\"line\">let gl = canvas.getContext(&quot;webgl&quot;);//绘制3d图形</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"绘制矩形\"><a href=\"#绘制矩形\" class=\"headerlink\" title=\"绘制矩形\"></a>绘制矩形</h3><h4 id=\"ctx-rect-x-y-width-height\"><a href=\"#ctx-rect-x-y-width-height\" class=\"headerlink\" title=\"ctx.rect(x,y,width,height);\"></a>ctx.rect(x,y,width,height);</h4><ul>\n<li>创建矩形。</li>\n<li>但并不会真正将矩形画出，只能调用stroke() 或 fill()后才会真正作用于画布。</li>\n<li>先填充再描边。</li>\n<li>可通过canvas.width或canvas.height获取画布的宽度和高度</li>\n</ul>\n<h4 id=\"ctx-fillRect-x-y-width-height\"><a href=\"#ctx-fillRect-x-y-width-height\" class=\"headerlink\" title=\"ctx.fillRect(x,y,width,height)\"></a>ctx.fillRect(x,y,width,height)</h4><ul>\n<li>执行填充操作，绘制一个已填色的、以(x,y)位置为起点、大小为width x height的矩形。</li>\n<li>有填充颜色，默认为black。</li>\n</ul>\n<h4 id=\"ctx-fillStyle-””\"><a href=\"#ctx-fillStyle-””\" class=\"headerlink\" title=\"ctx.fillStyle=””\"></a>ctx.fillStyle=””</h4><p>为图形设置填充颜色</p>\n<h4 id=\"ctx-strokeRect-x-y-width-height\"><a href=\"#ctx-strokeRect-x-y-width-height\" class=\"headerlink\" title=\"ctx.strokeRect(x,y,width,height);\"></a>ctx.strokeRect(x,y,width,height);</h4><ul>\n<li>绘制一个不填色、以(x,y)位置为起点、大小为width x height的矩形。</li>\n<li>有边框颜色，默认为black。</li>\n</ul>\n<h4 id=\"ctx-strokeStyle-””\"><a href=\"#ctx-strokeStyle-””\" class=\"headerlink\" title=\"ctx.strokeStyle=””\"></a>ctx.strokeStyle=””</h4><p>为图形设置边框颜色</p>\n<h4 id=\"ctx-clearRect-x-y-width-height\"><a href=\"#ctx-clearRect-x-y-width-height\" class=\"headerlink\" title=\"ctx.clearRect(x,y,width,height);\"></a>ctx.clearRect(x,y,width,height);</h4><ul>\n<li>将(x,y)位置大小为width x height的矩形变为透明。</li>\n<li>Internet Explorer 9、Firefox、Opera、Chrome 以及 Safari 支持 clearRect() 方法。</li>\n<li>若canvas设置了背景颜色是不能被清除的，因为那是画布的背景颜色，clearRect清除的是绘制的图形，使绘制的图形变为透明，显现出画布背景色。</li>\n</ul>\n<h3 id=\"绘制复杂形状\"><a href=\"#绘制复杂形状\" class=\"headerlink\" title=\"绘制复杂形状\"></a>绘制复杂形状</h3><h4 id=\"ctx-lineWidth-x\"><a href=\"#ctx-lineWidth-x\" class=\"headerlink\" title=\"ctx.lineWidth=x;\"></a>ctx.lineWidth=x;</h4><p>设置线宽为x，不需要加px</p>\n<h4 id=\"ctx-fill\"><a href=\"#ctx-fill\" class=\"headerlink\" title=\"ctx.fill();\"></a>ctx.fill();</h4><p>填充图形，可利用fillStyle设置填充颜色</p>\n<h4 id=\"ctx-stroke\"><a href=\"#ctx-stroke\" class=\"headerlink\" title=\"ctx.stroke();\"></a>ctx.stroke();</h4><p>绘制图形，可利用strokeStyle设置边框颜色</p>\n<h4 id=\"ctx-beginPath\"><a href=\"#ctx-beginPath\" class=\"headerlink\" title=\"ctx.beginPath();\"></a>ctx.beginPath();</h4><p>清除原来的痕迹,绘制图形之前要先调用</p>\n<h4 id=\"ctx-closePath\"><a href=\"#ctx-closePath\" class=\"headerlink\" title=\"ctx.closePath();\"></a>ctx.closePath();</h4><p>自动完成闭合</p>\n<h4 id=\"ctx-moveTo-x-y\"><a href=\"#ctx-moveTo-x-y\" class=\"headerlink\" title=\"ctx.moveTo(x,y);\"></a>ctx.moveTo(x,y);</h4><p>从(x,y)点开始绘图</p>\n<h4 id=\"ctx-lineTo-x-y\"><a href=\"#ctx-lineTo-x-y\" class=\"headerlink\" title=\"ctx.lineTo(x,y);\"></a>ctx.lineTo(x,y);</h4><p>绘图终点为(x,y)</p>\n<h4 id=\"ctx-arc-x-y-r-起始弧度，-终点弧度，是否逆时针\"><a href=\"#ctx-arc-x-y-r-起始弧度，-终点弧度，是否逆时针\" class=\"headerlink\" title=\"ctx.arc(x, y, r, 起始弧度， 终点弧度，是否逆时针)\"></a>ctx.arc(x, y, r, 起始弧度， 终点弧度，是否逆时针)</h4><ul>\n<li>圆心为(x,y),半径为r</li>\n<li>弧度 = Math.PI*角度</li>\n<li>设置完弧线，要用moveTo()进行绘制</li>\n</ul>\n<h3 id=\"绘制文本\"><a href=\"#绘制文本\" class=\"headerlink\" title=\"绘制文本\"></a>绘制文本</h3><h4 id=\"ctx-font-“24px-宋体”\"><a href=\"#ctx-font-“24px-宋体”\" class=\"headerlink\" title=\"ctx.font = “24px 宋体”\"></a>ctx.font = “24px 宋体”</h4><p>设置字体大小、型号</p>\n<h4 id=\"ctx-fillText-“文字内容”-left-top\"><a href=\"#ctx-fillText-“文字内容”-left-top\" class=\"headerlink\" title=\"ctx.fillText(“文字内容”,left,top);\"></a>ctx.fillText(“文字内容”,left,top);</h4><ul>\n<li>绘制实心文字。</li>\n<li>left为距画布最左边距离，top为距画布最上边距离。</li>\n<li>可通过fillStyke设置文字填充颜色</li>\n</ul>\n<h4 id=\"ctx-strokeText-“文字内容”-left-top\"><a href=\"#ctx-strokeText-“文字内容”-left-top\" class=\"headerlink\" title=\"ctx.strokeText(“文字内容”,left,top);\"></a>ctx.strokeText(“文字内容”,left,top);</h4><ul>\n<li>绘制空心文字。</li>\n<li>left与top同上。</li>\n<li>可通过strokeStyle设置文字边框颜色。</li>\n</ul>\n<h4 id=\"设置文字阴影\"><a href=\"#设置文字阴影\" class=\"headerlink\" title=\"设置文字阴影\"></a>设置文字阴影</h4><p>这些要在设置文字内容之前设置</p>\n<ul>\n<li>ctx.shadowOffsetX = x; x轴偏移量，默认位于元素正下方。</li>\n<li>ctx.shadowOffsetY = y; y轴偏移量，默认位于元素正下方。</li>\n<li>ctx.shadowBlur = num; 设置模糊系数。默认为0不模糊。</li>\n<li>ctx.shadowColor = “”; 设置阴影颜色，同时要设置shadowBlur，否则看不见</li>\n</ul>\n<p>用canvas画出一个(0,0)坐标绿色的100x100矩形框<br>，再从(10,10)坐标将50x50的区域变成透明</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;canvas id=&quot;test&quot; width=&quot;100px&quot; height=&quot;100px&quot;&gt;&lt;/canvas&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">var canvas = document.getElementById(&quot;test&quot;);</span><br><span class=\"line\">var ctx = canvas.getContext(&quot;2d&quot;);</span><br><span class=\"line\">ctx.fillStyle = &quot;green&quot;;</span><br><span class=\"line\">ctx.fillRect(0,0,100,100);</span><br><span class=\"line\">ctx.clearRect(10,10,50,50);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n"},{"title":"web页面性能优化","date":"2020-05-13T16:00:00.000Z","comments":1,"_content":"\n## 请求和响应\n### 减少http请求。\n一个完整的请求都需要经过 DNS寻址、与服务器建立连接、发送数据、等待服务器响应、接收数据这样一个 “漫长” 而复杂的过程。    \n资源上由于每个请求都需要携带数据，因此每个请求都需要占用带宽。\n\n### 使用CDN加速（缓存）。\nCDN（内容发布网络）是一组分布在多个不同地理位置的Web服务器，用于更加有效地向用户发布内容。其本质上是一个缓存，而且将数据（js、css、image等静态资源）缓存在离用户最近的地方，使用户以最快速度获取数据，即所谓网络访问第一跳。\n\n使用内容传递网络(CDN)提供 JavaScript 文件,CDN 不仅可以提高性能,它还可以为你管理压缩和缓存。\n\n当用户发起访问时，他的访问请求被只能dns定位到最近的缓存服务器，当服务器中没有缓存时，就会去请求最近的服务器中的资源。\n\n### 利用浏览器缓存\n通过设置 HTTP 响应报文头使 JavaScript 文件可缓存,将网络资源存储到本地，下次请求资源时，如果命中可直接在本地获取，不需要重新向服务器请求资源\n\n### 避免重定向。\n当页面发生了重定向，就会延迟整个HTML文档的传输。在HTML文档到达之前，页面中不会呈现任何东西，也没有任何组件会被下载。\n\n重定向和404将浪费加载请求。\n\n## HTML\n\n### 合理使用内联。\n脚本和样式，应按需选择内联或者外链。对于访问少、样式和脚本复用少的页面，可以考虑使用内联样式从而减少 HTTP 请求。\n\n但如果页面访问频繁，样式脚本在多个页面经常复用，使用外链则是最优选择。\n\n这样浏览器可以缓存它们，下次加载时可以直接从缓存加载。\n\n### 减少dom\n过多的DOM元素会影响渲染、加载、执行。除了精简页面结构外，还可以适时删除不必要的DOM元素（页面内已经不会再访问的元素），又或者可以懒加载（不一定会使用到的元素，如登录框）。\n\n### 优化dom操作\n- 使用事件委托来减少事件处理器的数量\n- 减少重绘和回流\n\n如果需要在 DOM操作时添加样式，尽量使用 增加 class 属性，而不是通过 style 一个一个地操作样式。\n\n###  删除HTML的默认属性。\n\n## js\n### 优化js。\n- 将所有script标签放置在页面的底部,紧靠 body 关闭标签</body>的上方。因为页面解析生成dom树时遇到script标签会停下去加载执行js。此法可以保证页面在脚本运行之前完成解析。\n- 将脚本成组打包。页面的<script>标签越少,页面的加载速度就越快,响应也更加迅速。不论外部脚本 文件还是内联代码都是如此。\n\n由于浏览器渲染机制的设置，gui渲染线程和js引擎互斥，因此js的执行会阻塞dom的解析和渲染以及其他资源的加载。\n\n## css\n### 将样式表放在头部。\n\ncss在head中通过link引入下载会阻塞页面的渲染，页面的渲染会等待css解析完生成cssom树，再结合dom树生成渲染树进行渲染。所以最好的做法是把css放在页面的最上面，让浏览器尽快下载css，减少首屏加载时间，避免白屏。\n\n为了浏览器的渲染，能让页面显示的时候视觉上更好。避免某些情况，如：假设你放在页面最底部，则不会阻塞，用户打开页面时，有可能出现，页面先是显示一大堆文字或图片，自上而下，丝毫没有排版和样式可言。最后，页面又恢复所要的效果\n\n由于gui渲染机制和js引擎互斥，因此css加载会阻塞js的加载，但是cssom和dom是并行的，css加载并不阻塞dom的解析，也不阻塞其他资源的加载，但两者需要互相配合生成渲染树，因此会阻塞dom的渲染。\n\n### 优化css，避免css表达式。\n会导致效率低下。\n\n## 资源\n\n### 延迟加载图片。\n不直接给src路径，而是在页面加载完成后用js操作src，减少了页面加载图片的时间。\n\n### 懒加载\n在进入可视区域之后在进行请求资源\n\n### 预加载\n在静态资源使用前先加载，在使用时可直接在缓存中获取","source":"_posts/前端/web页面性能优化.md","raw":"---\ntitle: web页面性能优化\ndate: 2020-05-14\ntags: [前端]\ncategories: 前端\ncomments: true\n---\n\n## 请求和响应\n### 减少http请求。\n一个完整的请求都需要经过 DNS寻址、与服务器建立连接、发送数据、等待服务器响应、接收数据这样一个 “漫长” 而复杂的过程。    \n资源上由于每个请求都需要携带数据，因此每个请求都需要占用带宽。\n\n### 使用CDN加速（缓存）。\nCDN（内容发布网络）是一组分布在多个不同地理位置的Web服务器，用于更加有效地向用户发布内容。其本质上是一个缓存，而且将数据（js、css、image等静态资源）缓存在离用户最近的地方，使用户以最快速度获取数据，即所谓网络访问第一跳。\n\n使用内容传递网络(CDN)提供 JavaScript 文件,CDN 不仅可以提高性能,它还可以为你管理压缩和缓存。\n\n当用户发起访问时，他的访问请求被只能dns定位到最近的缓存服务器，当服务器中没有缓存时，就会去请求最近的服务器中的资源。\n\n### 利用浏览器缓存\n通过设置 HTTP 响应报文头使 JavaScript 文件可缓存,将网络资源存储到本地，下次请求资源时，如果命中可直接在本地获取，不需要重新向服务器请求资源\n\n### 避免重定向。\n当页面发生了重定向，就会延迟整个HTML文档的传输。在HTML文档到达之前，页面中不会呈现任何东西，也没有任何组件会被下载。\n\n重定向和404将浪费加载请求。\n\n## HTML\n\n### 合理使用内联。\n脚本和样式，应按需选择内联或者外链。对于访问少、样式和脚本复用少的页面，可以考虑使用内联样式从而减少 HTTP 请求。\n\n但如果页面访问频繁，样式脚本在多个页面经常复用，使用外链则是最优选择。\n\n这样浏览器可以缓存它们，下次加载时可以直接从缓存加载。\n\n### 减少dom\n过多的DOM元素会影响渲染、加载、执行。除了精简页面结构外，还可以适时删除不必要的DOM元素（页面内已经不会再访问的元素），又或者可以懒加载（不一定会使用到的元素，如登录框）。\n\n### 优化dom操作\n- 使用事件委托来减少事件处理器的数量\n- 减少重绘和回流\n\n如果需要在 DOM操作时添加样式，尽量使用 增加 class 属性，而不是通过 style 一个一个地操作样式。\n\n###  删除HTML的默认属性。\n\n## js\n### 优化js。\n- 将所有script标签放置在页面的底部,紧靠 body 关闭标签</body>的上方。因为页面解析生成dom树时遇到script标签会停下去加载执行js。此法可以保证页面在脚本运行之前完成解析。\n- 将脚本成组打包。页面的<script>标签越少,页面的加载速度就越快,响应也更加迅速。不论外部脚本 文件还是内联代码都是如此。\n\n由于浏览器渲染机制的设置，gui渲染线程和js引擎互斥，因此js的执行会阻塞dom的解析和渲染以及其他资源的加载。\n\n## css\n### 将样式表放在头部。\n\ncss在head中通过link引入下载会阻塞页面的渲染，页面的渲染会等待css解析完生成cssom树，再结合dom树生成渲染树进行渲染。所以最好的做法是把css放在页面的最上面，让浏览器尽快下载css，减少首屏加载时间，避免白屏。\n\n为了浏览器的渲染，能让页面显示的时候视觉上更好。避免某些情况，如：假设你放在页面最底部，则不会阻塞，用户打开页面时，有可能出现，页面先是显示一大堆文字或图片，自上而下，丝毫没有排版和样式可言。最后，页面又恢复所要的效果\n\n由于gui渲染机制和js引擎互斥，因此css加载会阻塞js的加载，但是cssom和dom是并行的，css加载并不阻塞dom的解析，也不阻塞其他资源的加载，但两者需要互相配合生成渲染树，因此会阻塞dom的渲染。\n\n### 优化css，避免css表达式。\n会导致效率低下。\n\n## 资源\n\n### 延迟加载图片。\n不直接给src路径，而是在页面加载完成后用js操作src，减少了页面加载图片的时间。\n\n### 懒加载\n在进入可视区域之后在进行请求资源\n\n### 预加载\n在静态资源使用前先加载，在使用时可直接在缓存中获取","slug":"前端/web页面性能优化","published":1,"updated":"2022-07-22T10:11:24.572Z","layout":"post","photos":[],"link":"","_id":"cl5wb2ymw00bwcj38dscx6qjp","content":"<h2 id=\"请求和响应\"><a href=\"#请求和响应\" class=\"headerlink\" title=\"请求和响应\"></a>请求和响应</h2><h3 id=\"减少http请求。\"><a href=\"#减少http请求。\" class=\"headerlink\" title=\"减少http请求。\"></a>减少http请求。</h3><p>一个完整的请求都需要经过 DNS寻址、与服务器建立连接、发送数据、等待服务器响应、接收数据这样一个 “漫长” 而复杂的过程。<br>资源上由于每个请求都需要携带数据，因此每个请求都需要占用带宽。</p>\n<h3 id=\"使用CDN加速（缓存）。\"><a href=\"#使用CDN加速（缓存）。\" class=\"headerlink\" title=\"使用CDN加速（缓存）。\"></a>使用CDN加速（缓存）。</h3><p>CDN（内容发布网络）是一组分布在多个不同地理位置的Web服务器，用于更加有效地向用户发布内容。其本质上是一个缓存，而且将数据（js、css、image等静态资源）缓存在离用户最近的地方，使用户以最快速度获取数据，即所谓网络访问第一跳。</p>\n<p>使用内容传递网络(CDN)提供 JavaScript 文件,CDN 不仅可以提高性能,它还可以为你管理压缩和缓存。</p>\n<p>当用户发起访问时，他的访问请求被只能dns定位到最近的缓存服务器，当服务器中没有缓存时，就会去请求最近的服务器中的资源。</p>\n<h3 id=\"利用浏览器缓存\"><a href=\"#利用浏览器缓存\" class=\"headerlink\" title=\"利用浏览器缓存\"></a>利用浏览器缓存</h3><p>通过设置 HTTP 响应报文头使 JavaScript 文件可缓存,将网络资源存储到本地，下次请求资源时，如果命中可直接在本地获取，不需要重新向服务器请求资源</p>\n<h3 id=\"避免重定向。\"><a href=\"#避免重定向。\" class=\"headerlink\" title=\"避免重定向。\"></a>避免重定向。</h3><p>当页面发生了重定向，就会延迟整个HTML文档的传输。在HTML文档到达之前，页面中不会呈现任何东西，也没有任何组件会被下载。</p>\n<p>重定向和404将浪费加载请求。</p>\n<h2 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h2><h3 id=\"合理使用内联。\"><a href=\"#合理使用内联。\" class=\"headerlink\" title=\"合理使用内联。\"></a>合理使用内联。</h3><p>脚本和样式，应按需选择内联或者外链。对于访问少、样式和脚本复用少的页面，可以考虑使用内联样式从而减少 HTTP 请求。</p>\n<p>但如果页面访问频繁，样式脚本在多个页面经常复用，使用外链则是最优选择。</p>\n<p>这样浏览器可以缓存它们，下次加载时可以直接从缓存加载。</p>\n<h3 id=\"减少dom\"><a href=\"#减少dom\" class=\"headerlink\" title=\"减少dom\"></a>减少dom</h3><p>过多的DOM元素会影响渲染、加载、执行。除了精简页面结构外，还可以适时删除不必要的DOM元素（页面内已经不会再访问的元素），又或者可以懒加载（不一定会使用到的元素，如登录框）。</p>\n<h3 id=\"优化dom操作\"><a href=\"#优化dom操作\" class=\"headerlink\" title=\"优化dom操作\"></a>优化dom操作</h3><ul>\n<li>使用事件委托来减少事件处理器的数量</li>\n<li>减少重绘和回流</li>\n</ul>\n<p>如果需要在 DOM操作时添加样式，尽量使用 增加 class 属性，而不是通过 style 一个一个地操作样式。</p>\n<h3 id=\"删除HTML的默认属性。\"><a href=\"#删除HTML的默认属性。\" class=\"headerlink\" title=\"删除HTML的默认属性。\"></a>删除HTML的默认属性。</h3><h2 id=\"js\"><a href=\"#js\" class=\"headerlink\" title=\"js\"></a>js</h2><h3 id=\"优化js。\"><a href=\"#优化js。\" class=\"headerlink\" title=\"优化js。\"></a>优化js。</h3><ul>\n<li>将所有script标签放置在页面的底部,紧靠 body 关闭标签的上方。因为页面解析生成dom树时遇到script标签会停下去加载执行js。此法可以保证页面在脚本运行之前完成解析。</li>\n<li>将脚本成组打包。页面的<script>标签越少,页面的加载速度就越快,响应也更加迅速。不论外部脚本 文件还是内联代码都是如此。</li>\n</ul>\n<p>由于浏览器渲染机制的设置，gui渲染线程和js引擎互斥，因此js的执行会阻塞dom的解析和渲染以及其他资源的加载。</p>\n<h2 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a>css</h2><h3 id=\"将样式表放在头部。\"><a href=\"#将样式表放在头部。\" class=\"headerlink\" title=\"将样式表放在头部。\"></a>将样式表放在头部。</h3><p>css在head中通过link引入下载会阻塞页面的渲染，页面的渲染会等待css解析完生成cssom树，再结合dom树生成渲染树进行渲染。所以最好的做法是把css放在页面的最上面，让浏览器尽快下载css，减少首屏加载时间，避免白屏。</p>\n<p>为了浏览器的渲染，能让页面显示的时候视觉上更好。避免某些情况，如：假设你放在页面最底部，则不会阻塞，用户打开页面时，有可能出现，页面先是显示一大堆文字或图片，自上而下，丝毫没有排版和样式可言。最后，页面又恢复所要的效果</p>\n<p>由于gui渲染机制和js引擎互斥，因此css加载会阻塞js的加载，但是cssom和dom是并行的，css加载并不阻塞dom的解析，也不阻塞其他资源的加载，但两者需要互相配合生成渲染树，因此会阻塞dom的渲染。</p>\n<h3 id=\"优化css，避免css表达式。\"><a href=\"#优化css，避免css表达式。\" class=\"headerlink\" title=\"优化css，避免css表达式。\"></a>优化css，避免css表达式。</h3><p>会导致效率低下。</p>\n<h2 id=\"资源\"><a href=\"#资源\" class=\"headerlink\" title=\"资源\"></a>资源</h2><h3 id=\"延迟加载图片。\"><a href=\"#延迟加载图片。\" class=\"headerlink\" title=\"延迟加载图片。\"></a>延迟加载图片。</h3><p>不直接给src路径，而是在页面加载完成后用js操作src，减少了页面加载图片的时间。</p>\n<h3 id=\"懒加载\"><a href=\"#懒加载\" class=\"headerlink\" title=\"懒加载\"></a>懒加载</h3><p>在进入可视区域之后在进行请求资源</p>\n<h3 id=\"预加载\"><a href=\"#预加载\" class=\"headerlink\" title=\"预加载\"></a>预加载</h3><p>在静态资源使用前先加载，在使用时可直接在缓存中获取</p>\n</script></li></ul>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"请求和响应\"><a href=\"#请求和响应\" class=\"headerlink\" title=\"请求和响应\"></a>请求和响应</h2><h3 id=\"减少http请求。\"><a href=\"#减少http请求。\" class=\"headerlink\" title=\"减少http请求。\"></a>减少http请求。</h3><p>一个完整的请求都需要经过 DNS寻址、与服务器建立连接、发送数据、等待服务器响应、接收数据这样一个 “漫长” 而复杂的过程。<br>资源上由于每个请求都需要携带数据，因此每个请求都需要占用带宽。</p>\n<h3 id=\"使用CDN加速（缓存）。\"><a href=\"#使用CDN加速（缓存）。\" class=\"headerlink\" title=\"使用CDN加速（缓存）。\"></a>使用CDN加速（缓存）。</h3><p>CDN（内容发布网络）是一组分布在多个不同地理位置的Web服务器，用于更加有效地向用户发布内容。其本质上是一个缓存，而且将数据（js、css、image等静态资源）缓存在离用户最近的地方，使用户以最快速度获取数据，即所谓网络访问第一跳。</p>\n<p>使用内容传递网络(CDN)提供 JavaScript 文件,CDN 不仅可以提高性能,它还可以为你管理压缩和缓存。</p>\n<p>当用户发起访问时，他的访问请求被只能dns定位到最近的缓存服务器，当服务器中没有缓存时，就会去请求最近的服务器中的资源。</p>\n<h3 id=\"利用浏览器缓存\"><a href=\"#利用浏览器缓存\" class=\"headerlink\" title=\"利用浏览器缓存\"></a>利用浏览器缓存</h3><p>通过设置 HTTP 响应报文头使 JavaScript 文件可缓存,将网络资源存储到本地，下次请求资源时，如果命中可直接在本地获取，不需要重新向服务器请求资源</p>\n<h3 id=\"避免重定向。\"><a href=\"#避免重定向。\" class=\"headerlink\" title=\"避免重定向。\"></a>避免重定向。</h3><p>当页面发生了重定向，就会延迟整个HTML文档的传输。在HTML文档到达之前，页面中不会呈现任何东西，也没有任何组件会被下载。</p>\n<p>重定向和404将浪费加载请求。</p>\n<h2 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h2><h3 id=\"合理使用内联。\"><a href=\"#合理使用内联。\" class=\"headerlink\" title=\"合理使用内联。\"></a>合理使用内联。</h3><p>脚本和样式，应按需选择内联或者外链。对于访问少、样式和脚本复用少的页面，可以考虑使用内联样式从而减少 HTTP 请求。</p>\n<p>但如果页面访问频繁，样式脚本在多个页面经常复用，使用外链则是最优选择。</p>\n<p>这样浏览器可以缓存它们，下次加载时可以直接从缓存加载。</p>\n<h3 id=\"减少dom\"><a href=\"#减少dom\" class=\"headerlink\" title=\"减少dom\"></a>减少dom</h3><p>过多的DOM元素会影响渲染、加载、执行。除了精简页面结构外，还可以适时删除不必要的DOM元素（页面内已经不会再访问的元素），又或者可以懒加载（不一定会使用到的元素，如登录框）。</p>\n<h3 id=\"优化dom操作\"><a href=\"#优化dom操作\" class=\"headerlink\" title=\"优化dom操作\"></a>优化dom操作</h3><ul>\n<li>使用事件委托来减少事件处理器的数量</li>\n<li>减少重绘和回流</li>\n</ul>\n<p>如果需要在 DOM操作时添加样式，尽量使用 增加 class 属性，而不是通过 style 一个一个地操作样式。</p>\n<h3 id=\"删除HTML的默认属性。\"><a href=\"#删除HTML的默认属性。\" class=\"headerlink\" title=\"删除HTML的默认属性。\"></a>删除HTML的默认属性。</h3><h2 id=\"js\"><a href=\"#js\" class=\"headerlink\" title=\"js\"></a>js</h2><h3 id=\"优化js。\"><a href=\"#优化js。\" class=\"headerlink\" title=\"优化js。\"></a>优化js。</h3><ul>\n<li>将所有script标签放置在页面的底部,紧靠 body 关闭标签的上方。因为页面解析生成dom树时遇到script标签会停下去加载执行js。此法可以保证页面在脚本运行之前完成解析。</li>\n<li>将脚本成组打包。页面的<script>标签越少,页面的加载速度就越快,响应也更加迅速。不论外部脚本 文件还是内联代码都是如此。</li>\n</ul>\n<p>由于浏览器渲染机制的设置，gui渲染线程和js引擎互斥，因此js的执行会阻塞dom的解析和渲染以及其他资源的加载。</p>\n<h2 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a>css</h2><h3 id=\"将样式表放在头部。\"><a href=\"#将样式表放在头部。\" class=\"headerlink\" title=\"将样式表放在头部。\"></a>将样式表放在头部。</h3><p>css在head中通过link引入下载会阻塞页面的渲染，页面的渲染会等待css解析完生成cssom树，再结合dom树生成渲染树进行渲染。所以最好的做法是把css放在页面的最上面，让浏览器尽快下载css，减少首屏加载时间，避免白屏。</p>\n<p>为了浏览器的渲染，能让页面显示的时候视觉上更好。避免某些情况，如：假设你放在页面最底部，则不会阻塞，用户打开页面时，有可能出现，页面先是显示一大堆文字或图片，自上而下，丝毫没有排版和样式可言。最后，页面又恢复所要的效果</p>\n<p>由于gui渲染机制和js引擎互斥，因此css加载会阻塞js的加载，但是cssom和dom是并行的，css加载并不阻塞dom的解析，也不阻塞其他资源的加载，但两者需要互相配合生成渲染树，因此会阻塞dom的渲染。</p>\n<h3 id=\"优化css，避免css表达式。\"><a href=\"#优化css，避免css表达式。\" class=\"headerlink\" title=\"优化css，避免css表达式。\"></a>优化css，避免css表达式。</h3><p>会导致效率低下。</p>\n<h2 id=\"资源\"><a href=\"#资源\" class=\"headerlink\" title=\"资源\"></a>资源</h2><h3 id=\"延迟加载图片。\"><a href=\"#延迟加载图片。\" class=\"headerlink\" title=\"延迟加载图片。\"></a>延迟加载图片。</h3><p>不直接给src路径，而是在页面加载完成后用js操作src，减少了页面加载图片的时间。</p>\n<h3 id=\"懒加载\"><a href=\"#懒加载\" class=\"headerlink\" title=\"懒加载\"></a>懒加载</h3><p>在进入可视区域之后在进行请求资源</p>\n<h3 id=\"预加载\"><a href=\"#预加载\" class=\"headerlink\" title=\"预加载\"></a>预加载</h3><p>在静态资源使用前先加载，在使用时可直接在缓存中获取</p>\n</script></li></ul>"},{"title":"WebSocket","date":"2020-02-14T16:00:00.000Z","comments":1,"_content":"\n### 长连接和短连接\n长连接是存在于网络层的一种连接状态，而实现它则需要在传输层进行开发，因为它是基于对真实数据的收发，需要在底层进行管控。\n\n\n#### http\n- http1.0不支持长连接，http1.1支持长连接\n- http1.x是文本协议，http2.0是二进制协议\n\nHTTP作为应用层协议，其实它的生命周期在服务器返回结果时就已经结束了，而所谓的支持长连接，其实是基于'Keep-Alive'请求头所约定，从而向下进行长连接发起的一种机制。该长连接依然是基于TCP的。\n\n#### 短连接\n所谓短连接，即连接只保持在数据传输过程，请求发起，连接建立，数据返回，连接关闭。它适用于一些实时数据请求，配合轮询来进行新旧数据的更替。\n\n#### 长连接\n长连接便是在连接发起后，在请求关闭连接前客户端与服务端都保持连接，实质是保持这个通信管道，之后便可以对其进行复用。\n它适用于涉及消息推送，请求频繁的场景（直播，流媒体）。连接建立后，在该连接下的所有请求都可以重用这个长连接管道，避免了频繁了连接请求，提升了效率。\n\n### 轮询\n- 所谓轮询，即是浏览器通过JavaScript启动一个定时器，然后以固定的间隔给服务器发请求，询问服务器有没有新消息这样一个机制。\n- 然而HTTP请求可能包含较长的头部，其中真正有效的数据可能只是很小的一部分，显然这样会浪费很多的带宽等资源。\n- 只要有请求的的地方，都可以实现轮询，譬如各种事件驱动模型。它的长短是在于某次请求的返回周期。\n\n#### 短轮询\n短轮询指的是在循环周期内，不断发起请求，每一次请求都立即返回结果，根据新旧数据对比决定是否使用这个结果。\n\n#### 长轮询\n而长轮询即是在请求的过程中，若是服务器端数据并没有更新，那么则将这个连接挂起，直到服务器推送新的数据，再返回，然后再进入循环周期。\n\n由上可以看到，长短轮询的理想实现都应当基于长连接，否则若是循环周期太短，那么服务器的荷载会相当重；当然，即便是在长连接下，访问人数过多，长短轮询都有可能造成服务器的瞬时访问量庞大，这就需要一些相应的优化实践了。\n\n### websocket\n- WebSocket是HTML5新增的一种在单个 TCP 连接上进行全双工通讯的协议，它的目的是在浏览器和服务器之间建立一个不受限的双向通信的通道，比如说，服务器可以在任意时刻发送消息给浏览器。\n- WebSocket 使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。\n- 在 WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。\n\n#### 为什么http不能实现\n这是因为HTTP协议是一个请求－响应协议，请求必须先由浏览器发给服务器，服务器才能响应这个请求，再把数据发送给浏览器。换句话说，浏览器不主动请求，服务器是没法主动发数据给浏览器的。\n\n用轮询是可以实现的，但这个机制的缺点一是实时性不够，二是频繁的请求会给服务器带来极大的压力。\n\n#### websocket实现\nWebSocket并不是全新的协议，而是利用了HTTP协议来建立连接。\n\n实际上HTTP协议是建立在TCP协议之上的，TCP协议本身就实现了全双工通信，但是HTTP协议的请求－应答机制限制了全双工通信。WebSocket连接建立以后，其实只是简单规定了一下：接下来，咱们通信就不使用HTTP协议了，直接互相发数据吧。\n\n#### 创建websocket连接\n\n首先，WebSocket连接必须由浏览器发起，因为请求协议是一个标准的HTTP请求，格式如下：\n\n```\nGET ws://localhost:3000/ws/chat HTTP/1.1\nHost: localhost\nUpgrade: websocket\nConnection: Upgrade\nOrigin: http://localhost:3000\nSec-WebSocket-Key: client-random-string\nSec-WebSocket-Version: 13\n```\n该请求和普通的HTTP请求有几点不同：\n\n- GET请求的地址不是类似/path/，而是以ws://开头的地址；\n- 请求头Upgrade: websocket和Connection: Upgrade表示这个连接将要被转换为WebSocket连接；\n- Sec-WebSocket-Key是用于标识这个连接，并非用于加密数据；\n- Sec-WebSocket-Version指定了WebSocket的协议版本。\n\n一个WebSocket连接就建立成功，浏览器和服务器就可以随时主动发送消息给对方。消息有两种，一种是文本，一种是二进制数据。通常，我们可以发送JSON格式的文本。\n\n浏览器通过 JavaScript 向服务器发出建立 WebSocket 连接的请求，连接建立以后，客户端和服务器端就可以通过 TCP 连接直接交换数据。\n\n#### 安全的websocket\n安全的WebSocket连接机制和HTTPS类似。首先，浏览器用wss://xxx创建WebSocket连接时，会先通过HTTPS创建安全的连接，然后，该HTTPS连接升级为WebSocket连接，底层通信走的仍然是安全的SSL/TLS协议。\n\n#### 浏览器\n很显然，要支持WebSocket通信，浏览器得支持这个协议，这样才能发出ws://xxx的请求。目前，支持WebSocket的主流浏览器如下：\n\n- Chrome\n- Firefox\n- IE >= 10\n- Sarafi >= 6\n- Android >= 4.4\n- iOS >= 8\n\n#### 服务器\n由于WebSocket是一个协议，服务器具体怎么实现，取决于所用编程语言和框架本身。Node.js本身支持的协议包括TCP协议和HTTP协议，要支持WebSocket协议，需要对Node.js提供的HTTPServer做额外的开发。已经有若干基于Node.js的稳定可靠的WebSocket实现，我们直接用npm安装使用即可。","source":"_posts/前端/WebSocket.md","raw":"---\ntitle: WebSocket\ndate: 2020-02-15\ntags: [前端]\ncategories: 前端\ncomments: true\n---\n\n### 长连接和短连接\n长连接是存在于网络层的一种连接状态，而实现它则需要在传输层进行开发，因为它是基于对真实数据的收发，需要在底层进行管控。\n\n\n#### http\n- http1.0不支持长连接，http1.1支持长连接\n- http1.x是文本协议，http2.0是二进制协议\n\nHTTP作为应用层协议，其实它的生命周期在服务器返回结果时就已经结束了，而所谓的支持长连接，其实是基于'Keep-Alive'请求头所约定，从而向下进行长连接发起的一种机制。该长连接依然是基于TCP的。\n\n#### 短连接\n所谓短连接，即连接只保持在数据传输过程，请求发起，连接建立，数据返回，连接关闭。它适用于一些实时数据请求，配合轮询来进行新旧数据的更替。\n\n#### 长连接\n长连接便是在连接发起后，在请求关闭连接前客户端与服务端都保持连接，实质是保持这个通信管道，之后便可以对其进行复用。\n它适用于涉及消息推送，请求频繁的场景（直播，流媒体）。连接建立后，在该连接下的所有请求都可以重用这个长连接管道，避免了频繁了连接请求，提升了效率。\n\n### 轮询\n- 所谓轮询，即是浏览器通过JavaScript启动一个定时器，然后以固定的间隔给服务器发请求，询问服务器有没有新消息这样一个机制。\n- 然而HTTP请求可能包含较长的头部，其中真正有效的数据可能只是很小的一部分，显然这样会浪费很多的带宽等资源。\n- 只要有请求的的地方，都可以实现轮询，譬如各种事件驱动模型。它的长短是在于某次请求的返回周期。\n\n#### 短轮询\n短轮询指的是在循环周期内，不断发起请求，每一次请求都立即返回结果，根据新旧数据对比决定是否使用这个结果。\n\n#### 长轮询\n而长轮询即是在请求的过程中，若是服务器端数据并没有更新，那么则将这个连接挂起，直到服务器推送新的数据，再返回，然后再进入循环周期。\n\n由上可以看到，长短轮询的理想实现都应当基于长连接，否则若是循环周期太短，那么服务器的荷载会相当重；当然，即便是在长连接下，访问人数过多，长短轮询都有可能造成服务器的瞬时访问量庞大，这就需要一些相应的优化实践了。\n\n### websocket\n- WebSocket是HTML5新增的一种在单个 TCP 连接上进行全双工通讯的协议，它的目的是在浏览器和服务器之间建立一个不受限的双向通信的通道，比如说，服务器可以在任意时刻发送消息给浏览器。\n- WebSocket 使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。\n- 在 WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。\n\n#### 为什么http不能实现\n这是因为HTTP协议是一个请求－响应协议，请求必须先由浏览器发给服务器，服务器才能响应这个请求，再把数据发送给浏览器。换句话说，浏览器不主动请求，服务器是没法主动发数据给浏览器的。\n\n用轮询是可以实现的，但这个机制的缺点一是实时性不够，二是频繁的请求会给服务器带来极大的压力。\n\n#### websocket实现\nWebSocket并不是全新的协议，而是利用了HTTP协议来建立连接。\n\n实际上HTTP协议是建立在TCP协议之上的，TCP协议本身就实现了全双工通信，但是HTTP协议的请求－应答机制限制了全双工通信。WebSocket连接建立以后，其实只是简单规定了一下：接下来，咱们通信就不使用HTTP协议了，直接互相发数据吧。\n\n#### 创建websocket连接\n\n首先，WebSocket连接必须由浏览器发起，因为请求协议是一个标准的HTTP请求，格式如下：\n\n```\nGET ws://localhost:3000/ws/chat HTTP/1.1\nHost: localhost\nUpgrade: websocket\nConnection: Upgrade\nOrigin: http://localhost:3000\nSec-WebSocket-Key: client-random-string\nSec-WebSocket-Version: 13\n```\n该请求和普通的HTTP请求有几点不同：\n\n- GET请求的地址不是类似/path/，而是以ws://开头的地址；\n- 请求头Upgrade: websocket和Connection: Upgrade表示这个连接将要被转换为WebSocket连接；\n- Sec-WebSocket-Key是用于标识这个连接，并非用于加密数据；\n- Sec-WebSocket-Version指定了WebSocket的协议版本。\n\n一个WebSocket连接就建立成功，浏览器和服务器就可以随时主动发送消息给对方。消息有两种，一种是文本，一种是二进制数据。通常，我们可以发送JSON格式的文本。\n\n浏览器通过 JavaScript 向服务器发出建立 WebSocket 连接的请求，连接建立以后，客户端和服务器端就可以通过 TCP 连接直接交换数据。\n\n#### 安全的websocket\n安全的WebSocket连接机制和HTTPS类似。首先，浏览器用wss://xxx创建WebSocket连接时，会先通过HTTPS创建安全的连接，然后，该HTTPS连接升级为WebSocket连接，底层通信走的仍然是安全的SSL/TLS协议。\n\n#### 浏览器\n很显然，要支持WebSocket通信，浏览器得支持这个协议，这样才能发出ws://xxx的请求。目前，支持WebSocket的主流浏览器如下：\n\n- Chrome\n- Firefox\n- IE >= 10\n- Sarafi >= 6\n- Android >= 4.4\n- iOS >= 8\n\n#### 服务器\n由于WebSocket是一个协议，服务器具体怎么实现，取决于所用编程语言和框架本身。Node.js本身支持的协议包括TCP协议和HTTP协议，要支持WebSocket协议，需要对Node.js提供的HTTPServer做额外的开发。已经有若干基于Node.js的稳定可靠的WebSocket实现，我们直接用npm安装使用即可。","slug":"前端/WebSocket","published":1,"updated":"2022-07-22T10:11:29.619Z","layout":"post","photos":[],"link":"","_id":"cl5wb2ymx00c0cj38eiaonriv","content":"<h3 id=\"长连接和短连接\"><a href=\"#长连接和短连接\" class=\"headerlink\" title=\"长连接和短连接\"></a>长连接和短连接</h3><p>长连接是存在于网络层的一种连接状态，而实现它则需要在传输层进行开发，因为它是基于对真实数据的收发，需要在底层进行管控。</p>\n<h4 id=\"http\"><a href=\"#http\" class=\"headerlink\" title=\"http\"></a>http</h4><ul>\n<li>http1.0不支持长连接，http1.1支持长连接</li>\n<li>http1.x是文本协议，http2.0是二进制协议</li>\n</ul>\n<p>HTTP作为应用层协议，其实它的生命周期在服务器返回结果时就已经结束了，而所谓的支持长连接，其实是基于’Keep-Alive’请求头所约定，从而向下进行长连接发起的一种机制。该长连接依然是基于TCP的。</p>\n<h4 id=\"短连接\"><a href=\"#短连接\" class=\"headerlink\" title=\"短连接\"></a>短连接</h4><p>所谓短连接，即连接只保持在数据传输过程，请求发起，连接建立，数据返回，连接关闭。它适用于一些实时数据请求，配合轮询来进行新旧数据的更替。</p>\n<h4 id=\"长连接\"><a href=\"#长连接\" class=\"headerlink\" title=\"长连接\"></a>长连接</h4><p>长连接便是在连接发起后，在请求关闭连接前客户端与服务端都保持连接，实质是保持这个通信管道，之后便可以对其进行复用。<br>它适用于涉及消息推送，请求频繁的场景（直播，流媒体）。连接建立后，在该连接下的所有请求都可以重用这个长连接管道，避免了频繁了连接请求，提升了效率。</p>\n<h3 id=\"轮询\"><a href=\"#轮询\" class=\"headerlink\" title=\"轮询\"></a>轮询</h3><ul>\n<li>所谓轮询，即是浏览器通过JavaScript启动一个定时器，然后以固定的间隔给服务器发请求，询问服务器有没有新消息这样一个机制。</li>\n<li>然而HTTP请求可能包含较长的头部，其中真正有效的数据可能只是很小的一部分，显然这样会浪费很多的带宽等资源。</li>\n<li>只要有请求的的地方，都可以实现轮询，譬如各种事件驱动模型。它的长短是在于某次请求的返回周期。</li>\n</ul>\n<h4 id=\"短轮询\"><a href=\"#短轮询\" class=\"headerlink\" title=\"短轮询\"></a>短轮询</h4><p>短轮询指的是在循环周期内，不断发起请求，每一次请求都立即返回结果，根据新旧数据对比决定是否使用这个结果。</p>\n<h4 id=\"长轮询\"><a href=\"#长轮询\" class=\"headerlink\" title=\"长轮询\"></a>长轮询</h4><p>而长轮询即是在请求的过程中，若是服务器端数据并没有更新，那么则将这个连接挂起，直到服务器推送新的数据，再返回，然后再进入循环周期。</p>\n<p>由上可以看到，长短轮询的理想实现都应当基于长连接，否则若是循环周期太短，那么服务器的荷载会相当重；当然，即便是在长连接下，访问人数过多，长短轮询都有可能造成服务器的瞬时访问量庞大，这就需要一些相应的优化实践了。</p>\n<h3 id=\"websocket\"><a href=\"#websocket\" class=\"headerlink\" title=\"websocket\"></a>websocket</h3><ul>\n<li>WebSocket是HTML5新增的一种在单个 TCP 连接上进行全双工通讯的协议，它的目的是在浏览器和服务器之间建立一个不受限的双向通信的通道，比如说，服务器可以在任意时刻发送消息给浏览器。</li>\n<li>WebSocket 使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。</li>\n<li>在 WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。</li>\n</ul>\n<h4 id=\"为什么http不能实现\"><a href=\"#为什么http不能实现\" class=\"headerlink\" title=\"为什么http不能实现\"></a>为什么http不能实现</h4><p>这是因为HTTP协议是一个请求－响应协议，请求必须先由浏览器发给服务器，服务器才能响应这个请求，再把数据发送给浏览器。换句话说，浏览器不主动请求，服务器是没法主动发数据给浏览器的。</p>\n<p>用轮询是可以实现的，但这个机制的缺点一是实时性不够，二是频繁的请求会给服务器带来极大的压力。</p>\n<h4 id=\"websocket实现\"><a href=\"#websocket实现\" class=\"headerlink\" title=\"websocket实现\"></a>websocket实现</h4><p>WebSocket并不是全新的协议，而是利用了HTTP协议来建立连接。</p>\n<p>实际上HTTP协议是建立在TCP协议之上的，TCP协议本身就实现了全双工通信，但是HTTP协议的请求－应答机制限制了全双工通信。WebSocket连接建立以后，其实只是简单规定了一下：接下来，咱们通信就不使用HTTP协议了，直接互相发数据吧。</p>\n<h4 id=\"创建websocket连接\"><a href=\"#创建websocket连接\" class=\"headerlink\" title=\"创建websocket连接\"></a>创建websocket连接</h4><p>首先，WebSocket连接必须由浏览器发起，因为请求协议是一个标准的HTTP请求，格式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET ws://localhost:3000/ws/chat HTTP/1.1</span><br><span class=\"line\">Host: localhost</span><br><span class=\"line\">Upgrade: websocket</span><br><span class=\"line\">Connection: Upgrade</span><br><span class=\"line\">Origin: http://localhost:3000</span><br><span class=\"line\">Sec-WebSocket-Key: client-random-string</span><br><span class=\"line\">Sec-WebSocket-Version: 13</span><br></pre></td></tr></table></figure>\n<p>该请求和普通的HTTP请求有几点不同：</p>\n<ul>\n<li>GET请求的地址不是类似/path/，而是以ws://开头的地址；</li>\n<li>请求头Upgrade: websocket和Connection: Upgrade表示这个连接将要被转换为WebSocket连接；</li>\n<li>Sec-WebSocket-Key是用于标识这个连接，并非用于加密数据；</li>\n<li>Sec-WebSocket-Version指定了WebSocket的协议版本。</li>\n</ul>\n<p>一个WebSocket连接就建立成功，浏览器和服务器就可以随时主动发送消息给对方。消息有两种，一种是文本，一种是二进制数据。通常，我们可以发送JSON格式的文本。</p>\n<p>浏览器通过 JavaScript 向服务器发出建立 WebSocket 连接的请求，连接建立以后，客户端和服务器端就可以通过 TCP 连接直接交换数据。</p>\n<h4 id=\"安全的websocket\"><a href=\"#安全的websocket\" class=\"headerlink\" title=\"安全的websocket\"></a>安全的websocket</h4><p>安全的WebSocket连接机制和HTTPS类似。首先，浏览器用wss://xxx创建WebSocket连接时，会先通过HTTPS创建安全的连接，然后，该HTTPS连接升级为WebSocket连接，底层通信走的仍然是安全的SSL/TLS协议。</p>\n<h4 id=\"浏览器\"><a href=\"#浏览器\" class=\"headerlink\" title=\"浏览器\"></a>浏览器</h4><p>很显然，要支持WebSocket通信，浏览器得支持这个协议，这样才能发出ws://xxx的请求。目前，支持WebSocket的主流浏览器如下：</p>\n<ul>\n<li>Chrome</li>\n<li>Firefox</li>\n<li>IE &gt;= 10</li>\n<li>Sarafi &gt;= 6</li>\n<li>Android &gt;= 4.4</li>\n<li>iOS &gt;= 8</li>\n</ul>\n<h4 id=\"服务器\"><a href=\"#服务器\" class=\"headerlink\" title=\"服务器\"></a>服务器</h4><p>由于WebSocket是一个协议，服务器具体怎么实现，取决于所用编程语言和框架本身。Node.js本身支持的协议包括TCP协议和HTTP协议，要支持WebSocket协议，需要对Node.js提供的HTTPServer做额外的开发。已经有若干基于Node.js的稳定可靠的WebSocket实现，我们直接用npm安装使用即可。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"长连接和短连接\"><a href=\"#长连接和短连接\" class=\"headerlink\" title=\"长连接和短连接\"></a>长连接和短连接</h3><p>长连接是存在于网络层的一种连接状态，而实现它则需要在传输层进行开发，因为它是基于对真实数据的收发，需要在底层进行管控。</p>\n<h4 id=\"http\"><a href=\"#http\" class=\"headerlink\" title=\"http\"></a>http</h4><ul>\n<li>http1.0不支持长连接，http1.1支持长连接</li>\n<li>http1.x是文本协议，http2.0是二进制协议</li>\n</ul>\n<p>HTTP作为应用层协议，其实它的生命周期在服务器返回结果时就已经结束了，而所谓的支持长连接，其实是基于’Keep-Alive’请求头所约定，从而向下进行长连接发起的一种机制。该长连接依然是基于TCP的。</p>\n<h4 id=\"短连接\"><a href=\"#短连接\" class=\"headerlink\" title=\"短连接\"></a>短连接</h4><p>所谓短连接，即连接只保持在数据传输过程，请求发起，连接建立，数据返回，连接关闭。它适用于一些实时数据请求，配合轮询来进行新旧数据的更替。</p>\n<h4 id=\"长连接\"><a href=\"#长连接\" class=\"headerlink\" title=\"长连接\"></a>长连接</h4><p>长连接便是在连接发起后，在请求关闭连接前客户端与服务端都保持连接，实质是保持这个通信管道，之后便可以对其进行复用。<br>它适用于涉及消息推送，请求频繁的场景（直播，流媒体）。连接建立后，在该连接下的所有请求都可以重用这个长连接管道，避免了频繁了连接请求，提升了效率。</p>\n<h3 id=\"轮询\"><a href=\"#轮询\" class=\"headerlink\" title=\"轮询\"></a>轮询</h3><ul>\n<li>所谓轮询，即是浏览器通过JavaScript启动一个定时器，然后以固定的间隔给服务器发请求，询问服务器有没有新消息这样一个机制。</li>\n<li>然而HTTP请求可能包含较长的头部，其中真正有效的数据可能只是很小的一部分，显然这样会浪费很多的带宽等资源。</li>\n<li>只要有请求的的地方，都可以实现轮询，譬如各种事件驱动模型。它的长短是在于某次请求的返回周期。</li>\n</ul>\n<h4 id=\"短轮询\"><a href=\"#短轮询\" class=\"headerlink\" title=\"短轮询\"></a>短轮询</h4><p>短轮询指的是在循环周期内，不断发起请求，每一次请求都立即返回结果，根据新旧数据对比决定是否使用这个结果。</p>\n<h4 id=\"长轮询\"><a href=\"#长轮询\" class=\"headerlink\" title=\"长轮询\"></a>长轮询</h4><p>而长轮询即是在请求的过程中，若是服务器端数据并没有更新，那么则将这个连接挂起，直到服务器推送新的数据，再返回，然后再进入循环周期。</p>\n<p>由上可以看到，长短轮询的理想实现都应当基于长连接，否则若是循环周期太短，那么服务器的荷载会相当重；当然，即便是在长连接下，访问人数过多，长短轮询都有可能造成服务器的瞬时访问量庞大，这就需要一些相应的优化实践了。</p>\n<h3 id=\"websocket\"><a href=\"#websocket\" class=\"headerlink\" title=\"websocket\"></a>websocket</h3><ul>\n<li>WebSocket是HTML5新增的一种在单个 TCP 连接上进行全双工通讯的协议，它的目的是在浏览器和服务器之间建立一个不受限的双向通信的通道，比如说，服务器可以在任意时刻发送消息给浏览器。</li>\n<li>WebSocket 使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。</li>\n<li>在 WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。</li>\n</ul>\n<h4 id=\"为什么http不能实现\"><a href=\"#为什么http不能实现\" class=\"headerlink\" title=\"为什么http不能实现\"></a>为什么http不能实现</h4><p>这是因为HTTP协议是一个请求－响应协议，请求必须先由浏览器发给服务器，服务器才能响应这个请求，再把数据发送给浏览器。换句话说，浏览器不主动请求，服务器是没法主动发数据给浏览器的。</p>\n<p>用轮询是可以实现的，但这个机制的缺点一是实时性不够，二是频繁的请求会给服务器带来极大的压力。</p>\n<h4 id=\"websocket实现\"><a href=\"#websocket实现\" class=\"headerlink\" title=\"websocket实现\"></a>websocket实现</h4><p>WebSocket并不是全新的协议，而是利用了HTTP协议来建立连接。</p>\n<p>实际上HTTP协议是建立在TCP协议之上的，TCP协议本身就实现了全双工通信，但是HTTP协议的请求－应答机制限制了全双工通信。WebSocket连接建立以后，其实只是简单规定了一下：接下来，咱们通信就不使用HTTP协议了，直接互相发数据吧。</p>\n<h4 id=\"创建websocket连接\"><a href=\"#创建websocket连接\" class=\"headerlink\" title=\"创建websocket连接\"></a>创建websocket连接</h4><p>首先，WebSocket连接必须由浏览器发起，因为请求协议是一个标准的HTTP请求，格式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET ws://localhost:3000/ws/chat HTTP/1.1</span><br><span class=\"line\">Host: localhost</span><br><span class=\"line\">Upgrade: websocket</span><br><span class=\"line\">Connection: Upgrade</span><br><span class=\"line\">Origin: http://localhost:3000</span><br><span class=\"line\">Sec-WebSocket-Key: client-random-string</span><br><span class=\"line\">Sec-WebSocket-Version: 13</span><br></pre></td></tr></table></figure>\n<p>该请求和普通的HTTP请求有几点不同：</p>\n<ul>\n<li>GET请求的地址不是类似/path/，而是以ws://开头的地址；</li>\n<li>请求头Upgrade: websocket和Connection: Upgrade表示这个连接将要被转换为WebSocket连接；</li>\n<li>Sec-WebSocket-Key是用于标识这个连接，并非用于加密数据；</li>\n<li>Sec-WebSocket-Version指定了WebSocket的协议版本。</li>\n</ul>\n<p>一个WebSocket连接就建立成功，浏览器和服务器就可以随时主动发送消息给对方。消息有两种，一种是文本，一种是二进制数据。通常，我们可以发送JSON格式的文本。</p>\n<p>浏览器通过 JavaScript 向服务器发出建立 WebSocket 连接的请求，连接建立以后，客户端和服务器端就可以通过 TCP 连接直接交换数据。</p>\n<h4 id=\"安全的websocket\"><a href=\"#安全的websocket\" class=\"headerlink\" title=\"安全的websocket\"></a>安全的websocket</h4><p>安全的WebSocket连接机制和HTTPS类似。首先，浏览器用wss://xxx创建WebSocket连接时，会先通过HTTPS创建安全的连接，然后，该HTTPS连接升级为WebSocket连接，底层通信走的仍然是安全的SSL/TLS协议。</p>\n<h4 id=\"浏览器\"><a href=\"#浏览器\" class=\"headerlink\" title=\"浏览器\"></a>浏览器</h4><p>很显然，要支持WebSocket通信，浏览器得支持这个协议，这样才能发出ws://xxx的请求。目前，支持WebSocket的主流浏览器如下：</p>\n<ul>\n<li>Chrome</li>\n<li>Firefox</li>\n<li>IE &gt;= 10</li>\n<li>Sarafi &gt;= 6</li>\n<li>Android &gt;= 4.4</li>\n<li>iOS &gt;= 8</li>\n</ul>\n<h4 id=\"服务器\"><a href=\"#服务器\" class=\"headerlink\" title=\"服务器\"></a>服务器</h4><p>由于WebSocket是一个协议，服务器具体怎么实现，取决于所用编程语言和框架本身。Node.js本身支持的协议包括TCP协议和HTTP协议，要支持WebSocket协议，需要对Node.js提供的HTTPServer做额外的开发。已经有若干基于Node.js的稳定可靠的WebSocket实现，我们直接用npm安装使用即可。</p>\n"},{"title":"E2E测试","date":"2022-02-14T16:00:00.000Z","comments":1,"_content":"\n## E2E (end-to-end)\n- E2E测试就是end to end testing，即端到端测试。\n- 它模仿用户，从某个入口开始，逐步执行操作，直到完成某项工作。\n- E2E 测试并没有那么强调要覆盖全部使用场景，它关注的是一个完整的操作链是否能够完成。对于 Web 前端来说，还关注 界面布局、内容信息是否符合预期。\n- 不管逻辑使用什么框架什么逻辑写的，只想知道浏览器上我要的交互效果，ui展示效果是不是正确的，功能使用上是不是正确的，那么这就叫E2E测试。\n\n## cypress\ncypress是一款开箱即用,可以跑在Chrome浏览器上的测试工具。可以利用Cypress来模拟用户操作了，一方面可以测试代码是否正确，并且还能看到ui相应变化是否符合预期。\n\n### 安装\n\n```\n$ npm install cypress --save-dev --registry=https://registry.npm.taobao.org\n```\n### 使用\n可以只写cypress需要访问的服务地址。\n```\n// cypress.json\n\n{\n  \"baseUrl\": \"http://localhost:8000\", #测试访问的路由地址\n  \"reporter\": \"junit\", #报告类型\n  \"reporterOptions\": {\n    \"mochaFile\": \"results/test-[hash].xml\", #输出的文件\n    \"toConsole\": true #是否输出的命令行\n  },\n  \"viewportHeight\": 800, # viewPort也就是预览窗的高度\n  \"viewportWidth\": 1600 # viewPort也就是预览窗的宽度\n}\n```\n通过cypress open本地打开测试窗口\n\n```\n$ cypress open\n```\n![image](https://segmentfault.com/img/bVcPqQS)\n\n点击右上角的运行所有集成化测试，或是点击单个测试用例单独测试\n\n### 目录结构\n\n```\n├── fixtures # mock数据的存储目录，这里存放了所有mock的json文件\n│   ├── orders.json\n│   ├── panicBuyings.json\n│   └── routers.json\n├── integration # 测试用例代码目录\n│   ├── orderManagement.spec.js\n│   └── panicBuyingManagement.spec.js\n├── plugins # 插件目录\n│   └── index.js\n└── support\n    ├── commands.js\n    └── index.js\n```\n### 代码编写\n模拟用户操作\n```\ndescribe('测试抢购订单管理', () => {\n  beforeEach(() => { #每个测试用例调用之前的操作\n    const mock = Cypress.env('MOCK') || 'false'; # 自定义环境变量，运行时传递的话需要指定CYPRESS_前缀，这里使用是CYPRESS_MOCK=true cypress open\n    cy.server(); # 如果需要mock接口的话，必须要运行server\n    if (mock === true) {\n      cy.intercept('GET', '/panic-buying/manager/orders*', { fixture: 'orders.json' }).as(\n        'getOrders',\n      ); # 拦截/panic-buying/manager/order*路由，并指定返回数据使用orders.json，定义这个接口是getOrders函数，用于后面测试使用。\n    } else {\n      cy.intercept('GET', '/panic-buying/manager/orders*').as('getOrders');\n    }\n  });\n  it('测试订单列表搜索', () => {\n    cy.visit('/#/rush-order/list'); #访问页面路径\n    cy.wait('@getOrders').its('response.statusCode').should('be.oneOf', [200, 304]); # 等待getOrders函数，也就是接口返回并判断返回状态是200或是304中的一个。\n    cy.wait(1000); # 显示的等待1秒\n  });\n});\n```\n\n### API\n更多api操作参考：[Commands](https://docs.cypress.io/api/commands/and)\n\n#### 测试套件和用例\n- describe(): 代表测试套件，里面可以设定，一个测试套件可以不包括任何钩子函数（Hook），但必须包含至少一条测试用例 it() ，能嵌套子测试套件。\n- context(): 是 describe() 的别名，其行为方式是一致的，可以直接用 context() 代替 describe()。\n- it(): 代表一条测试用例。\n- ......\n\n#### 钩子函数\n- before(): 运行 cypress via cypress open 时，打开项目时将触发该事件。每次 cypress run 执行时都会触发该事件，会在第一个用例之前运行。\n- after()：会在跑完所有的用例之后运行。\n- beforeEach()：会在每一个用例前运行。\n- afterEach()：会在每一个用例结束后运行。\n- ......\n\n#### dom节点\n- get(): 用来在 DOM 树中查找 DOM 元素，get方法可以像jquery一样通过selector查找到对应的dom。\n- children()：获取一组 DOM 元素中每个 DOM 元素的子元素。\n- parent()：获取一组 DOM 元素的父 DOM 元素。\n- siblings()：获取兄弟 DOM 元素等。\n- trigger(): 在 DOM 元素上触发事件。\n- ......\n\n```\n// 触发dom的mouseover事件\ndom.trigger('mouseover')\n\n// 语法使用示例\n// eventName（string）event 在DOM元素上要触发的的名称。\n.trigger(eventName)\n\n// position（string）\n// 应该触发事件的位置。该center位置是默认位置。\n// 有效的位置topLeft，top，topRight，left，center，right，bottomLeft，bottom，和bottomRight。\n.trigger(eventName, position)\n\n// options: 传递选项对象以更改的默认行为\n.trigger(eventName, options)\n\n// x（number）: 从元素左侧到触发事件的距离（单位px）。\n// y（number）: 从元素顶部到触发事件的距离（单位px）。\n.trigger(eventName, x, y)\n\n.trigger(eventName, position, options)\n.trigger(eventName, x, y, options)\n```\n\n#### 网络接口\n- intercept: 在网络层管理 HTTP 请求的行为\n\n```\ncy.intercept(url, staticResponse)\ncy.intercept(method, url, staticResponse)\ncy.intercept(routeMatcher, staticResponse)\ncy.intercept(url, routeMatcher, staticResponse)\n```\n\n#### Actions行为事件\nui自动化操作页面上的元素，常用的方法输入如文本，点击元素，清空文本，点击按钮。还有一些特殊的checkbox,radio,滚动条等。cypress都可以api操作：\n- type(): 往输入框输入文本元素。\n- focus(): 聚焦DOM元素。\n- clear(): 清空DOM元素。\n- rightclick(): 右击 DOM 元素\n- click()：点击 DOM 元素\n- select(): select 选项框\n\n## 进阶\n有时候一个项目往往十分庞大，并不是所有组件都需要进行E2E测试，因此可以把需要进行测试的组件单独拿出来，本地部署一下，进行测试。\n\n```\n├── cypress # cypress目录\n│   ├── fixtures\n│   ├── integration\n│   ├── ...\n│   └── plugins\n├── e2e # 需要进行测试的组件代码\n```\n\n单独设置一个小项目，把需要进行测试的组件引进来，组成一个页面，对此页面进行测试。因此在开始测试前，需要先把这个页面跑起来，再开始测试。\n\n\n## 参考\n- [前端E2E测试框架 cypress了解一下](https://segmentfault.com/a/1190000014665493)\n- [UI自动化测试框架Cypress介绍和使用](https://segmentfault.com/a/1190000039388377)\n- [Cypress自动化测试入门使用](https://juejin.cn/post/6995520480711016479)","source":"_posts/前端/E2E测试.md","raw":"---\ntitle: E2E测试\ndate: 2022-02-15\ntags: [前端]\ncategories: 前端\ncomments: true\n---\n\n## E2E (end-to-end)\n- E2E测试就是end to end testing，即端到端测试。\n- 它模仿用户，从某个入口开始，逐步执行操作，直到完成某项工作。\n- E2E 测试并没有那么强调要覆盖全部使用场景，它关注的是一个完整的操作链是否能够完成。对于 Web 前端来说，还关注 界面布局、内容信息是否符合预期。\n- 不管逻辑使用什么框架什么逻辑写的，只想知道浏览器上我要的交互效果，ui展示效果是不是正确的，功能使用上是不是正确的，那么这就叫E2E测试。\n\n## cypress\ncypress是一款开箱即用,可以跑在Chrome浏览器上的测试工具。可以利用Cypress来模拟用户操作了，一方面可以测试代码是否正确，并且还能看到ui相应变化是否符合预期。\n\n### 安装\n\n```\n$ npm install cypress --save-dev --registry=https://registry.npm.taobao.org\n```\n### 使用\n可以只写cypress需要访问的服务地址。\n```\n// cypress.json\n\n{\n  \"baseUrl\": \"http://localhost:8000\", #测试访问的路由地址\n  \"reporter\": \"junit\", #报告类型\n  \"reporterOptions\": {\n    \"mochaFile\": \"results/test-[hash].xml\", #输出的文件\n    \"toConsole\": true #是否输出的命令行\n  },\n  \"viewportHeight\": 800, # viewPort也就是预览窗的高度\n  \"viewportWidth\": 1600 # viewPort也就是预览窗的宽度\n}\n```\n通过cypress open本地打开测试窗口\n\n```\n$ cypress open\n```\n![image](https://segmentfault.com/img/bVcPqQS)\n\n点击右上角的运行所有集成化测试，或是点击单个测试用例单独测试\n\n### 目录结构\n\n```\n├── fixtures # mock数据的存储目录，这里存放了所有mock的json文件\n│   ├── orders.json\n│   ├── panicBuyings.json\n│   └── routers.json\n├── integration # 测试用例代码目录\n│   ├── orderManagement.spec.js\n│   └── panicBuyingManagement.spec.js\n├── plugins # 插件目录\n│   └── index.js\n└── support\n    ├── commands.js\n    └── index.js\n```\n### 代码编写\n模拟用户操作\n```\ndescribe('测试抢购订单管理', () => {\n  beforeEach(() => { #每个测试用例调用之前的操作\n    const mock = Cypress.env('MOCK') || 'false'; # 自定义环境变量，运行时传递的话需要指定CYPRESS_前缀，这里使用是CYPRESS_MOCK=true cypress open\n    cy.server(); # 如果需要mock接口的话，必须要运行server\n    if (mock === true) {\n      cy.intercept('GET', '/panic-buying/manager/orders*', { fixture: 'orders.json' }).as(\n        'getOrders',\n      ); # 拦截/panic-buying/manager/order*路由，并指定返回数据使用orders.json，定义这个接口是getOrders函数，用于后面测试使用。\n    } else {\n      cy.intercept('GET', '/panic-buying/manager/orders*').as('getOrders');\n    }\n  });\n  it('测试订单列表搜索', () => {\n    cy.visit('/#/rush-order/list'); #访问页面路径\n    cy.wait('@getOrders').its('response.statusCode').should('be.oneOf', [200, 304]); # 等待getOrders函数，也就是接口返回并判断返回状态是200或是304中的一个。\n    cy.wait(1000); # 显示的等待1秒\n  });\n});\n```\n\n### API\n更多api操作参考：[Commands](https://docs.cypress.io/api/commands/and)\n\n#### 测试套件和用例\n- describe(): 代表测试套件，里面可以设定，一个测试套件可以不包括任何钩子函数（Hook），但必须包含至少一条测试用例 it() ，能嵌套子测试套件。\n- context(): 是 describe() 的别名，其行为方式是一致的，可以直接用 context() 代替 describe()。\n- it(): 代表一条测试用例。\n- ......\n\n#### 钩子函数\n- before(): 运行 cypress via cypress open 时，打开项目时将触发该事件。每次 cypress run 执行时都会触发该事件，会在第一个用例之前运行。\n- after()：会在跑完所有的用例之后运行。\n- beforeEach()：会在每一个用例前运行。\n- afterEach()：会在每一个用例结束后运行。\n- ......\n\n#### dom节点\n- get(): 用来在 DOM 树中查找 DOM 元素，get方法可以像jquery一样通过selector查找到对应的dom。\n- children()：获取一组 DOM 元素中每个 DOM 元素的子元素。\n- parent()：获取一组 DOM 元素的父 DOM 元素。\n- siblings()：获取兄弟 DOM 元素等。\n- trigger(): 在 DOM 元素上触发事件。\n- ......\n\n```\n// 触发dom的mouseover事件\ndom.trigger('mouseover')\n\n// 语法使用示例\n// eventName（string）event 在DOM元素上要触发的的名称。\n.trigger(eventName)\n\n// position（string）\n// 应该触发事件的位置。该center位置是默认位置。\n// 有效的位置topLeft，top，topRight，left，center，right，bottomLeft，bottom，和bottomRight。\n.trigger(eventName, position)\n\n// options: 传递选项对象以更改的默认行为\n.trigger(eventName, options)\n\n// x（number）: 从元素左侧到触发事件的距离（单位px）。\n// y（number）: 从元素顶部到触发事件的距离（单位px）。\n.trigger(eventName, x, y)\n\n.trigger(eventName, position, options)\n.trigger(eventName, x, y, options)\n```\n\n#### 网络接口\n- intercept: 在网络层管理 HTTP 请求的行为\n\n```\ncy.intercept(url, staticResponse)\ncy.intercept(method, url, staticResponse)\ncy.intercept(routeMatcher, staticResponse)\ncy.intercept(url, routeMatcher, staticResponse)\n```\n\n#### Actions行为事件\nui自动化操作页面上的元素，常用的方法输入如文本，点击元素，清空文本，点击按钮。还有一些特殊的checkbox,radio,滚动条等。cypress都可以api操作：\n- type(): 往输入框输入文本元素。\n- focus(): 聚焦DOM元素。\n- clear(): 清空DOM元素。\n- rightclick(): 右击 DOM 元素\n- click()：点击 DOM 元素\n- select(): select 选项框\n\n## 进阶\n有时候一个项目往往十分庞大，并不是所有组件都需要进行E2E测试，因此可以把需要进行测试的组件单独拿出来，本地部署一下，进行测试。\n\n```\n├── cypress # cypress目录\n│   ├── fixtures\n│   ├── integration\n│   ├── ...\n│   └── plugins\n├── e2e # 需要进行测试的组件代码\n```\n\n单独设置一个小项目，把需要进行测试的组件引进来，组成一个页面，对此页面进行测试。因此在开始测试前，需要先把这个页面跑起来，再开始测试。\n\n\n## 参考\n- [前端E2E测试框架 cypress了解一下](https://segmentfault.com/a/1190000014665493)\n- [UI自动化测试框架Cypress介绍和使用](https://segmentfault.com/a/1190000039388377)\n- [Cypress自动化测试入门使用](https://juejin.cn/post/6995520480711016479)","slug":"前端/E2E测试","published":1,"updated":"2022-07-22T10:12:24.217Z","layout":"post","photos":[],"link":"","_id":"cl5wb2ymy00c3cj385x5ug78u","content":"<h2 id=\"E2E-end-to-end\"><a href=\"#E2E-end-to-end\" class=\"headerlink\" title=\"E2E (end-to-end)\"></a>E2E (end-to-end)</h2><ul>\n<li>E2E测试就是end to end testing，即端到端测试。</li>\n<li>它模仿用户，从某个入口开始，逐步执行操作，直到完成某项工作。</li>\n<li>E2E 测试并没有那么强调要覆盖全部使用场景，它关注的是一个完整的操作链是否能够完成。对于 Web 前端来说，还关注 界面布局、内容信息是否符合预期。</li>\n<li>不管逻辑使用什么框架什么逻辑写的，只想知道浏览器上我要的交互效果，ui展示效果是不是正确的，功能使用上是不是正确的，那么这就叫E2E测试。</li>\n</ul>\n<h2 id=\"cypress\"><a href=\"#cypress\" class=\"headerlink\" title=\"cypress\"></a>cypress</h2><p>cypress是一款开箱即用,可以跑在Chrome浏览器上的测试工具。可以利用Cypress来模拟用户操作了，一方面可以测试代码是否正确，并且还能看到ui相应变化是否符合预期。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install cypress --save-dev --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>可以只写cypress需要访问的服务地址。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// cypress.json</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;baseUrl&quot;: &quot;http://localhost:8000&quot;, #测试访问的路由地址</span><br><span class=\"line\">  &quot;reporter&quot;: &quot;junit&quot;, #报告类型</span><br><span class=\"line\">  &quot;reporterOptions&quot;: &#123;</span><br><span class=\"line\">    &quot;mochaFile&quot;: &quot;results/test-[hash].xml&quot;, #输出的文件</span><br><span class=\"line\">    &quot;toConsole&quot;: true #是否输出的命令行</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;viewportHeight&quot;: 800, # viewPort也就是预览窗的高度</span><br><span class=\"line\">  &quot;viewportWidth&quot;: 1600 # viewPort也就是预览窗的宽度</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>通过cypress open本地打开测试窗口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cypress open</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://segmentfault.com/img/bVcPqQS\" alt=\"image\"></p>\n<p>点击右上角的运行所有集成化测试，或是点击单个测试用例单独测试</p>\n<h3 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── fixtures # mock数据的存储目录，这里存放了所有mock的json文件</span><br><span class=\"line\">│   ├── orders.json</span><br><span class=\"line\">│   ├── panicBuyings.json</span><br><span class=\"line\">│   └── routers.json</span><br><span class=\"line\">├── integration # 测试用例代码目录</span><br><span class=\"line\">│   ├── orderManagement.spec.js</span><br><span class=\"line\">│   └── panicBuyingManagement.spec.js</span><br><span class=\"line\">├── plugins # 插件目录</span><br><span class=\"line\">│   └── index.js</span><br><span class=\"line\">└── support</span><br><span class=\"line\">    ├── commands.js</span><br><span class=\"line\">    └── index.js</span><br></pre></td></tr></table></figure>\n<h3 id=\"代码编写\"><a href=\"#代码编写\" class=\"headerlink\" title=\"代码编写\"></a>代码编写</h3><p>模拟用户操作<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe(&apos;测试抢购订单管理&apos;, () =&gt; &#123;</span><br><span class=\"line\">  beforeEach(() =&gt; &#123; #每个测试用例调用之前的操作</span><br><span class=\"line\">    const mock = Cypress.env(&apos;MOCK&apos;) || &apos;false&apos;; # 自定义环境变量，运行时传递的话需要指定CYPRESS_前缀，这里使用是CYPRESS_MOCK=true cypress open</span><br><span class=\"line\">    cy.server(); # 如果需要mock接口的话，必须要运行server</span><br><span class=\"line\">    if (mock === true) &#123;</span><br><span class=\"line\">      cy.intercept(&apos;GET&apos;, &apos;/panic-buying/manager/orders*&apos;, &#123; fixture: &apos;orders.json&apos; &#125;).as(</span><br><span class=\"line\">        &apos;getOrders&apos;,</span><br><span class=\"line\">      ); # 拦截/panic-buying/manager/order*路由，并指定返回数据使用orders.json，定义这个接口是getOrders函数，用于后面测试使用。</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      cy.intercept(&apos;GET&apos;, &apos;/panic-buying/manager/orders*&apos;).as(&apos;getOrders&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  it(&apos;测试订单列表搜索&apos;, () =&gt; &#123;</span><br><span class=\"line\">    cy.visit(&apos;/#/rush-order/list&apos;); #访问页面路径</span><br><span class=\"line\">    cy.wait(&apos;@getOrders&apos;).its(&apos;response.statusCode&apos;).should(&apos;be.oneOf&apos;, [200, 304]); # 等待getOrders函数，也就是接口返回并判断返回状态是200或是304中的一个。</span><br><span class=\"line\">    cy.wait(1000); # 显示的等待1秒</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h3><p>更多api操作参考：<a href=\"https://docs.cypress.io/api/commands/and\" target=\"_blank\" rel=\"noopener\">Commands</a></p>\n<h4 id=\"测试套件和用例\"><a href=\"#测试套件和用例\" class=\"headerlink\" title=\"测试套件和用例\"></a>测试套件和用例</h4><ul>\n<li>describe(): 代表测试套件，里面可以设定，一个测试套件可以不包括任何钩子函数（Hook），但必须包含至少一条测试用例 it() ，能嵌套子测试套件。</li>\n<li>context(): 是 describe() 的别名，其行为方式是一致的，可以直接用 context() 代替 describe()。</li>\n<li>it(): 代表一条测试用例。</li>\n<li>……</li>\n</ul>\n<h4 id=\"钩子函数\"><a href=\"#钩子函数\" class=\"headerlink\" title=\"钩子函数\"></a>钩子函数</h4><ul>\n<li>before(): 运行 cypress via cypress open 时，打开项目时将触发该事件。每次 cypress run 执行时都会触发该事件，会在第一个用例之前运行。</li>\n<li>after()：会在跑完所有的用例之后运行。</li>\n<li>beforeEach()：会在每一个用例前运行。</li>\n<li>afterEach()：会在每一个用例结束后运行。</li>\n<li>……</li>\n</ul>\n<h4 id=\"dom节点\"><a href=\"#dom节点\" class=\"headerlink\" title=\"dom节点\"></a>dom节点</h4><ul>\n<li>get(): 用来在 DOM 树中查找 DOM 元素，get方法可以像jquery一样通过selector查找到对应的dom。</li>\n<li>children()：获取一组 DOM 元素中每个 DOM 元素的子元素。</li>\n<li>parent()：获取一组 DOM 元素的父 DOM 元素。</li>\n<li>siblings()：获取兄弟 DOM 元素等。</li>\n<li>trigger(): 在 DOM 元素上触发事件。</li>\n<li>……</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 触发dom的mouseover事件</span><br><span class=\"line\">dom.trigger(&apos;mouseover&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">// 语法使用示例</span><br><span class=\"line\">// eventName（string）event 在DOM元素上要触发的的名称。</span><br><span class=\"line\">.trigger(eventName)</span><br><span class=\"line\"></span><br><span class=\"line\">// position（string）</span><br><span class=\"line\">// 应该触发事件的位置。该center位置是默认位置。</span><br><span class=\"line\">// 有效的位置topLeft，top，topRight，left，center，right，bottomLeft，bottom，和bottomRight。</span><br><span class=\"line\">.trigger(eventName, position)</span><br><span class=\"line\"></span><br><span class=\"line\">// options: 传递选项对象以更改的默认行为</span><br><span class=\"line\">.trigger(eventName, options)</span><br><span class=\"line\"></span><br><span class=\"line\">// x（number）: 从元素左侧到触发事件的距离（单位px）。</span><br><span class=\"line\">// y（number）: 从元素顶部到触发事件的距离（单位px）。</span><br><span class=\"line\">.trigger(eventName, x, y)</span><br><span class=\"line\"></span><br><span class=\"line\">.trigger(eventName, position, options)</span><br><span class=\"line\">.trigger(eventName, x, y, options)</span><br></pre></td></tr></table></figure>\n<h4 id=\"网络接口\"><a href=\"#网络接口\" class=\"headerlink\" title=\"网络接口\"></a>网络接口</h4><ul>\n<li>intercept: 在网络层管理 HTTP 请求的行为</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cy.intercept(url, staticResponse)</span><br><span class=\"line\">cy.intercept(method, url, staticResponse)</span><br><span class=\"line\">cy.intercept(routeMatcher, staticResponse)</span><br><span class=\"line\">cy.intercept(url, routeMatcher, staticResponse)</span><br></pre></td></tr></table></figure>\n<h4 id=\"Actions行为事件\"><a href=\"#Actions行为事件\" class=\"headerlink\" title=\"Actions行为事件\"></a>Actions行为事件</h4><p>ui自动化操作页面上的元素，常用的方法输入如文本，点击元素，清空文本，点击按钮。还有一些特殊的checkbox,radio,滚动条等。cypress都可以api操作：</p>\n<ul>\n<li>type(): 往输入框输入文本元素。</li>\n<li>focus(): 聚焦DOM元素。</li>\n<li>clear(): 清空DOM元素。</li>\n<li>rightclick(): 右击 DOM 元素</li>\n<li>click()：点击 DOM 元素</li>\n<li>select(): select 选项框</li>\n</ul>\n<h2 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h2><p>有时候一个项目往往十分庞大，并不是所有组件都需要进行E2E测试，因此可以把需要进行测试的组件单独拿出来，本地部署一下，进行测试。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── cypress # cypress目录</span><br><span class=\"line\">│   ├── fixtures</span><br><span class=\"line\">│   ├── integration</span><br><span class=\"line\">│   ├── ...</span><br><span class=\"line\">│   └── plugins</span><br><span class=\"line\">├── e2e # 需要进行测试的组件代码</span><br></pre></td></tr></table></figure>\n<p>单独设置一个小项目，把需要进行测试的组件引进来，组成一个页面，对此页面进行测试。因此在开始测试前，需要先把这个页面跑起来，再开始测试。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://segmentfault.com/a/1190000014665493\" target=\"_blank\" rel=\"noopener\">前端E2E测试框架 cypress了解一下</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000039388377\" target=\"_blank\" rel=\"noopener\">UI自动化测试框架Cypress介绍和使用</a></li>\n<li><a href=\"https://juejin.cn/post/6995520480711016479\" target=\"_blank\" rel=\"noopener\">Cypress自动化测试入门使用</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"E2E-end-to-end\"><a href=\"#E2E-end-to-end\" class=\"headerlink\" title=\"E2E (end-to-end)\"></a>E2E (end-to-end)</h2><ul>\n<li>E2E测试就是end to end testing，即端到端测试。</li>\n<li>它模仿用户，从某个入口开始，逐步执行操作，直到完成某项工作。</li>\n<li>E2E 测试并没有那么强调要覆盖全部使用场景，它关注的是一个完整的操作链是否能够完成。对于 Web 前端来说，还关注 界面布局、内容信息是否符合预期。</li>\n<li>不管逻辑使用什么框架什么逻辑写的，只想知道浏览器上我要的交互效果，ui展示效果是不是正确的，功能使用上是不是正确的，那么这就叫E2E测试。</li>\n</ul>\n<h2 id=\"cypress\"><a href=\"#cypress\" class=\"headerlink\" title=\"cypress\"></a>cypress</h2><p>cypress是一款开箱即用,可以跑在Chrome浏览器上的测试工具。可以利用Cypress来模拟用户操作了，一方面可以测试代码是否正确，并且还能看到ui相应变化是否符合预期。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install cypress --save-dev --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>可以只写cypress需要访问的服务地址。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// cypress.json</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;baseUrl&quot;: &quot;http://localhost:8000&quot;, #测试访问的路由地址</span><br><span class=\"line\">  &quot;reporter&quot;: &quot;junit&quot;, #报告类型</span><br><span class=\"line\">  &quot;reporterOptions&quot;: &#123;</span><br><span class=\"line\">    &quot;mochaFile&quot;: &quot;results/test-[hash].xml&quot;, #输出的文件</span><br><span class=\"line\">    &quot;toConsole&quot;: true #是否输出的命令行</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;viewportHeight&quot;: 800, # viewPort也就是预览窗的高度</span><br><span class=\"line\">  &quot;viewportWidth&quot;: 1600 # viewPort也就是预览窗的宽度</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>通过cypress open本地打开测试窗口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cypress open</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://segmentfault.com/img/bVcPqQS\" alt=\"image\"></p>\n<p>点击右上角的运行所有集成化测试，或是点击单个测试用例单独测试</p>\n<h3 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── fixtures # mock数据的存储目录，这里存放了所有mock的json文件</span><br><span class=\"line\">│   ├── orders.json</span><br><span class=\"line\">│   ├── panicBuyings.json</span><br><span class=\"line\">│   └── routers.json</span><br><span class=\"line\">├── integration # 测试用例代码目录</span><br><span class=\"line\">│   ├── orderManagement.spec.js</span><br><span class=\"line\">│   └── panicBuyingManagement.spec.js</span><br><span class=\"line\">├── plugins # 插件目录</span><br><span class=\"line\">│   └── index.js</span><br><span class=\"line\">└── support</span><br><span class=\"line\">    ├── commands.js</span><br><span class=\"line\">    └── index.js</span><br></pre></td></tr></table></figure>\n<h3 id=\"代码编写\"><a href=\"#代码编写\" class=\"headerlink\" title=\"代码编写\"></a>代码编写</h3><p>模拟用户操作<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe(&apos;测试抢购订单管理&apos;, () =&gt; &#123;</span><br><span class=\"line\">  beforeEach(() =&gt; &#123; #每个测试用例调用之前的操作</span><br><span class=\"line\">    const mock = Cypress.env(&apos;MOCK&apos;) || &apos;false&apos;; # 自定义环境变量，运行时传递的话需要指定CYPRESS_前缀，这里使用是CYPRESS_MOCK=true cypress open</span><br><span class=\"line\">    cy.server(); # 如果需要mock接口的话，必须要运行server</span><br><span class=\"line\">    if (mock === true) &#123;</span><br><span class=\"line\">      cy.intercept(&apos;GET&apos;, &apos;/panic-buying/manager/orders*&apos;, &#123; fixture: &apos;orders.json&apos; &#125;).as(</span><br><span class=\"line\">        &apos;getOrders&apos;,</span><br><span class=\"line\">      ); # 拦截/panic-buying/manager/order*路由，并指定返回数据使用orders.json，定义这个接口是getOrders函数，用于后面测试使用。</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      cy.intercept(&apos;GET&apos;, &apos;/panic-buying/manager/orders*&apos;).as(&apos;getOrders&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  it(&apos;测试订单列表搜索&apos;, () =&gt; &#123;</span><br><span class=\"line\">    cy.visit(&apos;/#/rush-order/list&apos;); #访问页面路径</span><br><span class=\"line\">    cy.wait(&apos;@getOrders&apos;).its(&apos;response.statusCode&apos;).should(&apos;be.oneOf&apos;, [200, 304]); # 等待getOrders函数，也就是接口返回并判断返回状态是200或是304中的一个。</span><br><span class=\"line\">    cy.wait(1000); # 显示的等待1秒</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h3><p>更多api操作参考：<a href=\"https://docs.cypress.io/api/commands/and\" target=\"_blank\" rel=\"noopener\">Commands</a></p>\n<h4 id=\"测试套件和用例\"><a href=\"#测试套件和用例\" class=\"headerlink\" title=\"测试套件和用例\"></a>测试套件和用例</h4><ul>\n<li>describe(): 代表测试套件，里面可以设定，一个测试套件可以不包括任何钩子函数（Hook），但必须包含至少一条测试用例 it() ，能嵌套子测试套件。</li>\n<li>context(): 是 describe() 的别名，其行为方式是一致的，可以直接用 context() 代替 describe()。</li>\n<li>it(): 代表一条测试用例。</li>\n<li>……</li>\n</ul>\n<h4 id=\"钩子函数\"><a href=\"#钩子函数\" class=\"headerlink\" title=\"钩子函数\"></a>钩子函数</h4><ul>\n<li>before(): 运行 cypress via cypress open 时，打开项目时将触发该事件。每次 cypress run 执行时都会触发该事件，会在第一个用例之前运行。</li>\n<li>after()：会在跑完所有的用例之后运行。</li>\n<li>beforeEach()：会在每一个用例前运行。</li>\n<li>afterEach()：会在每一个用例结束后运行。</li>\n<li>……</li>\n</ul>\n<h4 id=\"dom节点\"><a href=\"#dom节点\" class=\"headerlink\" title=\"dom节点\"></a>dom节点</h4><ul>\n<li>get(): 用来在 DOM 树中查找 DOM 元素，get方法可以像jquery一样通过selector查找到对应的dom。</li>\n<li>children()：获取一组 DOM 元素中每个 DOM 元素的子元素。</li>\n<li>parent()：获取一组 DOM 元素的父 DOM 元素。</li>\n<li>siblings()：获取兄弟 DOM 元素等。</li>\n<li>trigger(): 在 DOM 元素上触发事件。</li>\n<li>……</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 触发dom的mouseover事件</span><br><span class=\"line\">dom.trigger(&apos;mouseover&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">// 语法使用示例</span><br><span class=\"line\">// eventName（string）event 在DOM元素上要触发的的名称。</span><br><span class=\"line\">.trigger(eventName)</span><br><span class=\"line\"></span><br><span class=\"line\">// position（string）</span><br><span class=\"line\">// 应该触发事件的位置。该center位置是默认位置。</span><br><span class=\"line\">// 有效的位置topLeft，top，topRight，left，center，right，bottomLeft，bottom，和bottomRight。</span><br><span class=\"line\">.trigger(eventName, position)</span><br><span class=\"line\"></span><br><span class=\"line\">// options: 传递选项对象以更改的默认行为</span><br><span class=\"line\">.trigger(eventName, options)</span><br><span class=\"line\"></span><br><span class=\"line\">// x（number）: 从元素左侧到触发事件的距离（单位px）。</span><br><span class=\"line\">// y（number）: 从元素顶部到触发事件的距离（单位px）。</span><br><span class=\"line\">.trigger(eventName, x, y)</span><br><span class=\"line\"></span><br><span class=\"line\">.trigger(eventName, position, options)</span><br><span class=\"line\">.trigger(eventName, x, y, options)</span><br></pre></td></tr></table></figure>\n<h4 id=\"网络接口\"><a href=\"#网络接口\" class=\"headerlink\" title=\"网络接口\"></a>网络接口</h4><ul>\n<li>intercept: 在网络层管理 HTTP 请求的行为</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cy.intercept(url, staticResponse)</span><br><span class=\"line\">cy.intercept(method, url, staticResponse)</span><br><span class=\"line\">cy.intercept(routeMatcher, staticResponse)</span><br><span class=\"line\">cy.intercept(url, routeMatcher, staticResponse)</span><br></pre></td></tr></table></figure>\n<h4 id=\"Actions行为事件\"><a href=\"#Actions行为事件\" class=\"headerlink\" title=\"Actions行为事件\"></a>Actions行为事件</h4><p>ui自动化操作页面上的元素，常用的方法输入如文本，点击元素，清空文本，点击按钮。还有一些特殊的checkbox,radio,滚动条等。cypress都可以api操作：</p>\n<ul>\n<li>type(): 往输入框输入文本元素。</li>\n<li>focus(): 聚焦DOM元素。</li>\n<li>clear(): 清空DOM元素。</li>\n<li>rightclick(): 右击 DOM 元素</li>\n<li>click()：点击 DOM 元素</li>\n<li>select(): select 选项框</li>\n</ul>\n<h2 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h2><p>有时候一个项目往往十分庞大，并不是所有组件都需要进行E2E测试，因此可以把需要进行测试的组件单独拿出来，本地部署一下，进行测试。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── cypress # cypress目录</span><br><span class=\"line\">│   ├── fixtures</span><br><span class=\"line\">│   ├── integration</span><br><span class=\"line\">│   ├── ...</span><br><span class=\"line\">│   └── plugins</span><br><span class=\"line\">├── e2e # 需要进行测试的组件代码</span><br></pre></td></tr></table></figure>\n<p>单独设置一个小项目，把需要进行测试的组件引进来，组成一个页面，对此页面进行测试。因此在开始测试前，需要先把这个页面跑起来，再开始测试。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://segmentfault.com/a/1190000014665493\" target=\"_blank\" rel=\"noopener\">前端E2E测试框架 cypress了解一下</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000039388377\" target=\"_blank\" rel=\"noopener\">UI自动化测试框架Cypress介绍和使用</a></li>\n<li><a href=\"https://juejin.cn/post/6995520480711016479\" target=\"_blank\" rel=\"noopener\">Cypress自动化测试入门使用</a></li>\n</ul>\n"},{"title":"一些调试小技巧","date":"2019-07-28T16:00:00.000Z","comments":1,"_content":"\n### 一些常用的快捷键\n\n快捷键 | 功能\n---|---\nctrl + o | 搜索文件\nctrl + shift + F | 在所有文件中搜索特定的文字\nctrl + shift + o | 在某个文件中搜索特定的文字\nctrl + G | 跳转到某一行\nctrl + L | 清除控制台的信息\nctrl + [ / ctrl + ] | 标签切换\nctrl + shift + c | 审查元素\nshift + Enter / sources -> snippets | 在控制台编写多行代码\n选中，H | 显示/隐藏元素\n\n### 一些常用的功能\n- 通过js代码来设置断点：debugger，或者直接在sources中打断点，查看堆栈，了解函数调用情况\n- elements的event listeners中可以查看元素事件监听器\n- 选中元素，右击Break on.. -> Attributes Modifications，元素改变时启动断点\n- 开发者工具打开的情况下右击chrome的刷新按钮，可清除缓存并硬重载\n","source":"_posts/前端/一些调试小技巧.md","raw":"---\ntitle: 一些调试小技巧\ndate: 2019-07-29\ntags: [前端]\ncategories: 前端\ncomments: true\n---\n\n### 一些常用的快捷键\n\n快捷键 | 功能\n---|---\nctrl + o | 搜索文件\nctrl + shift + F | 在所有文件中搜索特定的文字\nctrl + shift + o | 在某个文件中搜索特定的文字\nctrl + G | 跳转到某一行\nctrl + L | 清除控制台的信息\nctrl + [ / ctrl + ] | 标签切换\nctrl + shift + c | 审查元素\nshift + Enter / sources -> snippets | 在控制台编写多行代码\n选中，H | 显示/隐藏元素\n\n### 一些常用的功能\n- 通过js代码来设置断点：debugger，或者直接在sources中打断点，查看堆栈，了解函数调用情况\n- elements的event listeners中可以查看元素事件监听器\n- 选中元素，右击Break on.. -> Attributes Modifications，元素改变时启动断点\n- 开发者工具打开的情况下右击chrome的刷新按钮，可清除缓存并硬重载\n","slug":"前端/一些调试小技巧","published":1,"updated":"2022-07-22T10:11:26.330Z","layout":"post","photos":[],"link":"","_id":"cl5wb2ymz00c5cj384gpqt2p2","content":"<h3 id=\"一些常用的快捷键\"><a href=\"#一些常用的快捷键\" class=\"headerlink\" title=\"一些常用的快捷键\"></a>一些常用的快捷键</h3><table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ctrl + o</td>\n<td>搜索文件</td>\n</tr>\n<tr>\n<td>ctrl + shift + F</td>\n<td>在所有文件中搜索特定的文字</td>\n</tr>\n<tr>\n<td>ctrl + shift + o</td>\n<td>在某个文件中搜索特定的文字</td>\n</tr>\n<tr>\n<td>ctrl + G</td>\n<td>跳转到某一行</td>\n</tr>\n<tr>\n<td>ctrl + L</td>\n<td>清除控制台的信息</td>\n</tr>\n<tr>\n<td>ctrl + [ / ctrl + ]</td>\n<td>标签切换</td>\n</tr>\n<tr>\n<td>ctrl + shift + c</td>\n<td>审查元素</td>\n</tr>\n<tr>\n<td>shift + Enter / sources -&gt; snippets</td>\n<td>在控制台编写多行代码</td>\n</tr>\n<tr>\n<td>选中，H</td>\n<td>显示/隐藏元素</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"一些常用的功能\"><a href=\"#一些常用的功能\" class=\"headerlink\" title=\"一些常用的功能\"></a>一些常用的功能</h3><ul>\n<li>通过js代码来设置断点：debugger，或者直接在sources中打断点，查看堆栈，了解函数调用情况</li>\n<li>elements的event listeners中可以查看元素事件监听器</li>\n<li>选中元素，右击Break on.. -&gt; Attributes Modifications，元素改变时启动断点</li>\n<li>开发者工具打开的情况下右击chrome的刷新按钮，可清除缓存并硬重载</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一些常用的快捷键\"><a href=\"#一些常用的快捷键\" class=\"headerlink\" title=\"一些常用的快捷键\"></a>一些常用的快捷键</h3><table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ctrl + o</td>\n<td>搜索文件</td>\n</tr>\n<tr>\n<td>ctrl + shift + F</td>\n<td>在所有文件中搜索特定的文字</td>\n</tr>\n<tr>\n<td>ctrl + shift + o</td>\n<td>在某个文件中搜索特定的文字</td>\n</tr>\n<tr>\n<td>ctrl + G</td>\n<td>跳转到某一行</td>\n</tr>\n<tr>\n<td>ctrl + L</td>\n<td>清除控制台的信息</td>\n</tr>\n<tr>\n<td>ctrl + [ / ctrl + ]</td>\n<td>标签切换</td>\n</tr>\n<tr>\n<td>ctrl + shift + c</td>\n<td>审查元素</td>\n</tr>\n<tr>\n<td>shift + Enter / sources -&gt; snippets</td>\n<td>在控制台编写多行代码</td>\n</tr>\n<tr>\n<td>选中，H</td>\n<td>显示/隐藏元素</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"一些常用的功能\"><a href=\"#一些常用的功能\" class=\"headerlink\" title=\"一些常用的功能\"></a>一些常用的功能</h3><ul>\n<li>通过js代码来设置断点：debugger，或者直接在sources中打断点，查看堆栈，了解函数调用情况</li>\n<li>elements的event listeners中可以查看元素事件监听器</li>\n<li>选中元素，右击Break on.. -&gt; Attributes Modifications，元素改变时启动断点</li>\n<li>开发者工具打开的情况下右击chrome的刷新按钮，可清除缓存并硬重载</li>\n</ul>\n"},{"title":"前端SEO（搜索引擎优化）和语义化","date":"2020-02-22T16:00:00.000Z","comments":1,"_content":"\n### 合理的title、description、keywords\n1. title值强调重点，要靠前，不同页面title不要相同。\n2. description对页面内容高度概括，长度合适，不同页面有所不同。\n3. keywords列举重点关键词即可，不要过分堆砌关键词。 \n\n###  语义化\n语义化的标签，旨在让标签有自己的含义，就是用合理、正确的标签来展示内容，比如h1~h6定义标题。\n#### 优点\n- 易于用户阅读，css样式丢失的时候能让页面呈现清晰的结构。\n- 有利于SEO，搜索引擎根据标签来确定上下文和各个关键字的权重。\n- 方便其他设备解析，如盲人阅读器根据语义渲染网页\n- 有利于开发和维护，语义化更具可读性，代码更好维护，与CSS3关系更和谐。\n\n#### 常见语义化标签\n\n```\n<title>：页面主体内容。\n<hn>：h1~h6，分级标题，<h1> 与 <title> 协调有利于搜索引擎优化。\n<ul>：无序列表。\n<li>：有序列表。\n<small>：呈现小号字体效果，指定细则，输入免责声明、注解、署名、版权。\n<strong>：和 em 标签一样，用于强调文本，但它强调的程度更强一些。\n<em>：将其中的文本表示为强调的内容，表现为斜体。\n<mark>：使用黄色突出显示部分文本。\n<figure>：规定独立的流内容（图像、图表、照片、代码等等）（默认有40px左右margin）。\n<figcaption>：定义 figure 元素的标题，应该被置于 figure 元素的第一个或最后一个子元素的位置。\n<cite>：表示所包含的文本对某个参考文献的引用，比如书籍或者杂志的标题。\n<blockquoto>：定义块引用，块引用拥有它们自己的空间。\n<q>：短的引述（跨浏览器问题，尽量避免使用）。\n<time>：datetime属性遵循特定格式，如果忽略此属性，文本内容必须是合法的日期或者时间格式。\n<abbr>：简称或缩写。\n<dfn>：定义术语元素，与定义必须紧挨着，可以在描述列表dl元素中使用。\n<address>：作者、相关人士或组织的联系信息（电子邮件地址、指向联系信息页的链接）。\n<del>：移除的内容。\n<ins>：添加的内容。\n<code>：标记代码。\n<meter>：定义已知范围或分数值内的标量测量。（Internet Explorer 不支持 meter 标签）\n<progress>：定义运行中的进度（进程）。\n```\n\n#### h5新增语义化标签\n\n```\n<header>  定义文档或者文档的部分区域的页眉\n<nav>  描述一个含有多个超链接的区域\n<main>  定义文档的主要内容，该内容在文档中应当是独一无二的\n<article> 表示文档、页面、应用或网站中的独立结构\n<aside> 表示一个和其余页面内容几乎无关的部分\n<footer> 定义最近一个章节内容或者根节点元素的页脚\n<section> 表示文档中的一个区域（或节），比如，内容中的一个专题组。\n```\n\n### 重要内容的html代码放最前\n搜索引擎抓取html的顺序是从上到下，保证重要内容一定会被抓取\n\n### 重要内容不要用js输出\n爬虫不会执行js获取内容\n\n### 提高网站速度\n网站速度也是搜索引擎排序的一个重要指标","source":"_posts/前端/前端SEO（搜索引擎优化）和语义化.md","raw":"---\ntitle: 前端SEO（搜索引擎优化）和语义化\ndate: 2020-02-23\ntags: [前端]\ncategories: 前端\ncomments: true\n---\n\n### 合理的title、description、keywords\n1. title值强调重点，要靠前，不同页面title不要相同。\n2. description对页面内容高度概括，长度合适，不同页面有所不同。\n3. keywords列举重点关键词即可，不要过分堆砌关键词。 \n\n###  语义化\n语义化的标签，旨在让标签有自己的含义，就是用合理、正确的标签来展示内容，比如h1~h6定义标题。\n#### 优点\n- 易于用户阅读，css样式丢失的时候能让页面呈现清晰的结构。\n- 有利于SEO，搜索引擎根据标签来确定上下文和各个关键字的权重。\n- 方便其他设备解析，如盲人阅读器根据语义渲染网页\n- 有利于开发和维护，语义化更具可读性，代码更好维护，与CSS3关系更和谐。\n\n#### 常见语义化标签\n\n```\n<title>：页面主体内容。\n<hn>：h1~h6，分级标题，<h1> 与 <title> 协调有利于搜索引擎优化。\n<ul>：无序列表。\n<li>：有序列表。\n<small>：呈现小号字体效果，指定细则，输入免责声明、注解、署名、版权。\n<strong>：和 em 标签一样，用于强调文本，但它强调的程度更强一些。\n<em>：将其中的文本表示为强调的内容，表现为斜体。\n<mark>：使用黄色突出显示部分文本。\n<figure>：规定独立的流内容（图像、图表、照片、代码等等）（默认有40px左右margin）。\n<figcaption>：定义 figure 元素的标题，应该被置于 figure 元素的第一个或最后一个子元素的位置。\n<cite>：表示所包含的文本对某个参考文献的引用，比如书籍或者杂志的标题。\n<blockquoto>：定义块引用，块引用拥有它们自己的空间。\n<q>：短的引述（跨浏览器问题，尽量避免使用）。\n<time>：datetime属性遵循特定格式，如果忽略此属性，文本内容必须是合法的日期或者时间格式。\n<abbr>：简称或缩写。\n<dfn>：定义术语元素，与定义必须紧挨着，可以在描述列表dl元素中使用。\n<address>：作者、相关人士或组织的联系信息（电子邮件地址、指向联系信息页的链接）。\n<del>：移除的内容。\n<ins>：添加的内容。\n<code>：标记代码。\n<meter>：定义已知范围或分数值内的标量测量。（Internet Explorer 不支持 meter 标签）\n<progress>：定义运行中的进度（进程）。\n```\n\n#### h5新增语义化标签\n\n```\n<header>  定义文档或者文档的部分区域的页眉\n<nav>  描述一个含有多个超链接的区域\n<main>  定义文档的主要内容，该内容在文档中应当是独一无二的\n<article> 表示文档、页面、应用或网站中的独立结构\n<aside> 表示一个和其余页面内容几乎无关的部分\n<footer> 定义最近一个章节内容或者根节点元素的页脚\n<section> 表示文档中的一个区域（或节），比如，内容中的一个专题组。\n```\n\n### 重要内容的html代码放最前\n搜索引擎抓取html的顺序是从上到下，保证重要内容一定会被抓取\n\n### 重要内容不要用js输出\n爬虫不会执行js获取内容\n\n### 提高网站速度\n网站速度也是搜索引擎排序的一个重要指标","slug":"前端/前端SEO（搜索引擎优化）和语义化","published":1,"updated":"2022-07-22T10:11:23.583Z","layout":"post","photos":[],"link":"","_id":"cl5wb2yn000c9cj386tvnlnmf","content":"<h3 id=\"合理的title、description、keywords\"><a href=\"#合理的title、description、keywords\" class=\"headerlink\" title=\"合理的title、description、keywords\"></a>合理的title、description、keywords</h3><ol>\n<li>title值强调重点，要靠前，不同页面title不要相同。</li>\n<li>description对页面内容高度概括，长度合适，不同页面有所不同。</li>\n<li>keywords列举重点关键词即可，不要过分堆砌关键词。 </li>\n</ol>\n<h3 id=\"语义化\"><a href=\"#语义化\" class=\"headerlink\" title=\"语义化\"></a>语义化</h3><p>语义化的标签，旨在让标签有自己的含义，就是用合理、正确的标签来展示内容，比如h1~h6定义标题。</p>\n<h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ul>\n<li>易于用户阅读，css样式丢失的时候能让页面呈现清晰的结构。</li>\n<li>有利于SEO，搜索引擎根据标签来确定上下文和各个关键字的权重。</li>\n<li>方便其他设备解析，如盲人阅读器根据语义渲染网页</li>\n<li>有利于开发和维护，语义化更具可读性，代码更好维护，与CSS3关系更和谐。</li>\n</ul>\n<h4 id=\"常见语义化标签\"><a href=\"#常见语义化标签\" class=\"headerlink\" title=\"常见语义化标签\"></a>常见语义化标签</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;title&gt;：页面主体内容。</span><br><span class=\"line\">&lt;hn&gt;：h1~h6，分级标题，&lt;h1&gt; 与 &lt;title&gt; 协调有利于搜索引擎优化。</span><br><span class=\"line\">&lt;ul&gt;：无序列表。</span><br><span class=\"line\">&lt;li&gt;：有序列表。</span><br><span class=\"line\">&lt;small&gt;：呈现小号字体效果，指定细则，输入免责声明、注解、署名、版权。</span><br><span class=\"line\">&lt;strong&gt;：和 em 标签一样，用于强调文本，但它强调的程度更强一些。</span><br><span class=\"line\">&lt;em&gt;：将其中的文本表示为强调的内容，表现为斜体。</span><br><span class=\"line\">&lt;mark&gt;：使用黄色突出显示部分文本。</span><br><span class=\"line\">&lt;figure&gt;：规定独立的流内容（图像、图表、照片、代码等等）（默认有40px左右margin）。</span><br><span class=\"line\">&lt;figcaption&gt;：定义 figure 元素的标题，应该被置于 figure 元素的第一个或最后一个子元素的位置。</span><br><span class=\"line\">&lt;cite&gt;：表示所包含的文本对某个参考文献的引用，比如书籍或者杂志的标题。</span><br><span class=\"line\">&lt;blockquoto&gt;：定义块引用，块引用拥有它们自己的空间。</span><br><span class=\"line\">&lt;q&gt;：短的引述（跨浏览器问题，尽量避免使用）。</span><br><span class=\"line\">&lt;time&gt;：datetime属性遵循特定格式，如果忽略此属性，文本内容必须是合法的日期或者时间格式。</span><br><span class=\"line\">&lt;abbr&gt;：简称或缩写。</span><br><span class=\"line\">&lt;dfn&gt;：定义术语元素，与定义必须紧挨着，可以在描述列表dl元素中使用。</span><br><span class=\"line\">&lt;address&gt;：作者、相关人士或组织的联系信息（电子邮件地址、指向联系信息页的链接）。</span><br><span class=\"line\">&lt;del&gt;：移除的内容。</span><br><span class=\"line\">&lt;ins&gt;：添加的内容。</span><br><span class=\"line\">&lt;code&gt;：标记代码。</span><br><span class=\"line\">&lt;meter&gt;：定义已知范围或分数值内的标量测量。（Internet Explorer 不支持 meter 标签）</span><br><span class=\"line\">&lt;progress&gt;：定义运行中的进度（进程）。</span><br></pre></td></tr></table></figure>\n<h4 id=\"h5新增语义化标签\"><a href=\"#h5新增语义化标签\" class=\"headerlink\" title=\"h5新增语义化标签\"></a>h5新增语义化标签</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;header&gt;  定义文档或者文档的部分区域的页眉</span><br><span class=\"line\">&lt;nav&gt;  描述一个含有多个超链接的区域</span><br><span class=\"line\">&lt;main&gt;  定义文档的主要内容，该内容在文档中应当是独一无二的</span><br><span class=\"line\">&lt;article&gt; 表示文档、页面、应用或网站中的独立结构</span><br><span class=\"line\">&lt;aside&gt; 表示一个和其余页面内容几乎无关的部分</span><br><span class=\"line\">&lt;footer&gt; 定义最近一个章节内容或者根节点元素的页脚</span><br><span class=\"line\">&lt;section&gt; 表示文档中的一个区域（或节），比如，内容中的一个专题组。</span><br></pre></td></tr></table></figure>\n<h3 id=\"重要内容的html代码放最前\"><a href=\"#重要内容的html代码放最前\" class=\"headerlink\" title=\"重要内容的html代码放最前\"></a>重要内容的html代码放最前</h3><p>搜索引擎抓取html的顺序是从上到下，保证重要内容一定会被抓取</p>\n<h3 id=\"重要内容不要用js输出\"><a href=\"#重要内容不要用js输出\" class=\"headerlink\" title=\"重要内容不要用js输出\"></a>重要内容不要用js输出</h3><p>爬虫不会执行js获取内容</p>\n<h3 id=\"提高网站速度\"><a href=\"#提高网站速度\" class=\"headerlink\" title=\"提高网站速度\"></a>提高网站速度</h3><p>网站速度也是搜索引擎排序的一个重要指标</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"合理的title、description、keywords\"><a href=\"#合理的title、description、keywords\" class=\"headerlink\" title=\"合理的title、description、keywords\"></a>合理的title、description、keywords</h3><ol>\n<li>title值强调重点，要靠前，不同页面title不要相同。</li>\n<li>description对页面内容高度概括，长度合适，不同页面有所不同。</li>\n<li>keywords列举重点关键词即可，不要过分堆砌关键词。 </li>\n</ol>\n<h3 id=\"语义化\"><a href=\"#语义化\" class=\"headerlink\" title=\"语义化\"></a>语义化</h3><p>语义化的标签，旨在让标签有自己的含义，就是用合理、正确的标签来展示内容，比如h1~h6定义标题。</p>\n<h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ul>\n<li>易于用户阅读，css样式丢失的时候能让页面呈现清晰的结构。</li>\n<li>有利于SEO，搜索引擎根据标签来确定上下文和各个关键字的权重。</li>\n<li>方便其他设备解析，如盲人阅读器根据语义渲染网页</li>\n<li>有利于开发和维护，语义化更具可读性，代码更好维护，与CSS3关系更和谐。</li>\n</ul>\n<h4 id=\"常见语义化标签\"><a href=\"#常见语义化标签\" class=\"headerlink\" title=\"常见语义化标签\"></a>常见语义化标签</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;title&gt;：页面主体内容。</span><br><span class=\"line\">&lt;hn&gt;：h1~h6，分级标题，&lt;h1&gt; 与 &lt;title&gt; 协调有利于搜索引擎优化。</span><br><span class=\"line\">&lt;ul&gt;：无序列表。</span><br><span class=\"line\">&lt;li&gt;：有序列表。</span><br><span class=\"line\">&lt;small&gt;：呈现小号字体效果，指定细则，输入免责声明、注解、署名、版权。</span><br><span class=\"line\">&lt;strong&gt;：和 em 标签一样，用于强调文本，但它强调的程度更强一些。</span><br><span class=\"line\">&lt;em&gt;：将其中的文本表示为强调的内容，表现为斜体。</span><br><span class=\"line\">&lt;mark&gt;：使用黄色突出显示部分文本。</span><br><span class=\"line\">&lt;figure&gt;：规定独立的流内容（图像、图表、照片、代码等等）（默认有40px左右margin）。</span><br><span class=\"line\">&lt;figcaption&gt;：定义 figure 元素的标题，应该被置于 figure 元素的第一个或最后一个子元素的位置。</span><br><span class=\"line\">&lt;cite&gt;：表示所包含的文本对某个参考文献的引用，比如书籍或者杂志的标题。</span><br><span class=\"line\">&lt;blockquoto&gt;：定义块引用，块引用拥有它们自己的空间。</span><br><span class=\"line\">&lt;q&gt;：短的引述（跨浏览器问题，尽量避免使用）。</span><br><span class=\"line\">&lt;time&gt;：datetime属性遵循特定格式，如果忽略此属性，文本内容必须是合法的日期或者时间格式。</span><br><span class=\"line\">&lt;abbr&gt;：简称或缩写。</span><br><span class=\"line\">&lt;dfn&gt;：定义术语元素，与定义必须紧挨着，可以在描述列表dl元素中使用。</span><br><span class=\"line\">&lt;address&gt;：作者、相关人士或组织的联系信息（电子邮件地址、指向联系信息页的链接）。</span><br><span class=\"line\">&lt;del&gt;：移除的内容。</span><br><span class=\"line\">&lt;ins&gt;：添加的内容。</span><br><span class=\"line\">&lt;code&gt;：标记代码。</span><br><span class=\"line\">&lt;meter&gt;：定义已知范围或分数值内的标量测量。（Internet Explorer 不支持 meter 标签）</span><br><span class=\"line\">&lt;progress&gt;：定义运行中的进度（进程）。</span><br></pre></td></tr></table></figure>\n<h4 id=\"h5新增语义化标签\"><a href=\"#h5新增语义化标签\" class=\"headerlink\" title=\"h5新增语义化标签\"></a>h5新增语义化标签</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;header&gt;  定义文档或者文档的部分区域的页眉</span><br><span class=\"line\">&lt;nav&gt;  描述一个含有多个超链接的区域</span><br><span class=\"line\">&lt;main&gt;  定义文档的主要内容，该内容在文档中应当是独一无二的</span><br><span class=\"line\">&lt;article&gt; 表示文档、页面、应用或网站中的独立结构</span><br><span class=\"line\">&lt;aside&gt; 表示一个和其余页面内容几乎无关的部分</span><br><span class=\"line\">&lt;footer&gt; 定义最近一个章节内容或者根节点元素的页脚</span><br><span class=\"line\">&lt;section&gt; 表示文档中的一个区域（或节），比如，内容中的一个专题组。</span><br></pre></td></tr></table></figure>\n<h3 id=\"重要内容的html代码放最前\"><a href=\"#重要内容的html代码放最前\" class=\"headerlink\" title=\"重要内容的html代码放最前\"></a>重要内容的html代码放最前</h3><p>搜索引擎抓取html的顺序是从上到下，保证重要内容一定会被抓取</p>\n<h3 id=\"重要内容不要用js输出\"><a href=\"#重要内容不要用js输出\" class=\"headerlink\" title=\"重要内容不要用js输出\"></a>重要内容不要用js输出</h3><p>爬虫不会执行js获取内容</p>\n<h3 id=\"提高网站速度\"><a href=\"#提高网站速度\" class=\"headerlink\" title=\"提高网站速度\"></a>提高网站速度</h3><p>网站速度也是搜索引擎排序的一个重要指标</p>\n"},{"title":"vite","date":"2022-04-25T16:00:00.000Z","comments":1,"_content":"\n# 1.概述\n- 项目基本是基于webpack进行打包的，随着模块的增多及需求的迭代，启动、发布等都会越来越慢，为了对此进行优化，开展对vite的调研。\n- 调研 Vite 打包工具 与AN业务的适用性，与 Webpack 相比的差异。\n\n# 2.调研方法\n1. 使用webiste进行调研。\n2. 修改配置及处理启动时的报错。\n3. 使用vite进行打包，修改打包时的报错。\n4. 打包后执行命令进行预览，修改预览时的报错。\n# 3.调研过程\n\n以下是webpack迁移vite会遇到的一些问题\n\n```\n\"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"vite build --debug\",\n    \"serve\": \"vite preview\",\n}\n```\n\n## 3.1 启动\n### 3.1.1 环境变量引入\n1. 新建本地文件 .env.local ，该文件需添加进 .gitignore 中。\n2. 变量名需要以 VITE_xxx 的方式命名。\n3. 在配置文件中使用：\n\n```\n//.env.local\nVITE_COUNTRY = vn\nVITE_ENVIRONMENT = test\n\n// vite.config.js\nimport { defineConfig, loadEnv } from 'vite';\nexport default ({ mode }) => {\n  const env = loadEnv(mode, process.cwd());\n  const environment = env.VITE_ENV || env.VITE_ENVIRONMENT || 'test'\n  const country = env.VITE_CID || env.VITE_COUNTRY || 'my'\n\n  return defineConfig({\n\t//...\n  })\n}\n```\n\n### 3.1.2 别名\n\n```\n// vite.config.js\nexport default ({ mode }) => {\n  // ...\n\n  return defineConfig({\n    resolve: {\n      alias: [{ find: '@/', replacement: '/src/' }],\n    }\n  })\n}\n```\n\n### 3.1.3 样式\n\n问题1: [vite] Internal server error: Preprocessor dependency \"sass\" not found. Did you install it?\n\n安装sass\n\n问题2: [vite] Internal server error: Inline JavaScript is not enabled. Is it set in your options?\n\n```\nreturn defineConfig({\n    css: {\n      preprocessorOptions: {\n        less: {\n          javascriptEnabled: true,\n          modifyVars: theme\n        }\n      }\n    }\n})\n```\n\n问题3: [vite] Internal server error: '~antd/dist/antd.less' wasn't found. Tried - /Users/xinweiwang/Desktop/affiliate/web-affiliate/src/~antd/dist/antd.less,node_modules/~antd/dist/antd.less,npm://~antd/dist/antd.less,~antd/dist/antd.less\n\n1. 把theme.js中的 @import \"~antd/dist/antd.less\"; 注释。\n2. 添加插件vite-plugin-imp按需加载antd\n\n```\nreturn defineConfig({\n    plugins: [\n      vitePluginImp({\n        libList: [\n          {\n            libName: \"antd\",\n            style: (name) => `antd/es/${name}/style/`,\n          },\n        ],\n      })\n    ],\n})\n```\n\n问题4：不支持 ':export'\n\n\n问题5：Unknown theme type: undefined, name: undefined\n\nhttps://github.com/ant-design/ant-design/issues/19002\n\n```\nreturn defineConfig({\n  resolve: {\n      alias: {\n        '@ant-design/icons/lib/dist': '@ant-design/icons/lib/index.es.js'\n      },\n  }, \n})\n```\n\n### 3.1.4 配置代理\n\n```\nreturn defineConfig({\n\tserver: {\n      port: 8888,\n      host: '0.0.0.0',\n      proxy: {\n        '/api': {\n          target: `https://affiliate.${environment}.${BASE_DOMAIN_ALL[country]}/`,\n          changeOrigin: true\n        }\n      }\n    }\n})\n```\n\n### 3.1.5 引入入口文件\n\n```\n// index.html \n<script type=\"module\" src=\"/src/index.tsx\"></script>\n```\n\n### 3.1.6 启动时\n\n各种408，请求超时 ，可以删除node_modules，重新install\n\n### 3.1.7 Uncaught SyntaxError: The requested module '/global.config.js?t=1647918620356' does not provide an export named 'default'\n\nvite不支持cjs，https://github.com/vitejs/vite/issues/3024\n\n1. 方案一：可以通过预捆绑的方式处理，但那代表着需要捆绑很多个文件\n2. 方案二：把global.config.js中的module.exports改为export default，所有文件的module.exports及require都需要更改\n\n### 3.1.8 Uncaught ReferenceError: global is not defined\n\n方案一\n\n```\n// index.html\n<script>\n\tglobal = globalThis;\n</script>\n```\n\n方案二：缺点是打包时会把同名文件的文件名修改掉\n\n```\n// vite.config.js \nreturn defineConfig({\n\tdefine: {\n      global: JSON.stringify({})\n    }\n})\n```\n\n### 3.1.9 babel\n\n使用插件@vitejs/plugin-react\n\n```\n// vite.config.js\nreturn defineConfig({\n  plugins: [ \n    react({\n      babel: {\n        plugins: [],\n      },\n    }), \n  ]\n})\n```\n\n### 3.1.10 未解之谜（后来没有再出现了）\n\nhttps://github.com/vitejs/vite/issues/6241\n\nvite@2.5.10没有出现此问题，但评论说还有，所以也暂时不算是解决了。\n\n### 3.1.11 全局变量\n\ndefine中对应的值是一个常量，需要使用JSON.stringify()来表示是一个常量。\n\n```\n// vite.config.js \nconst country = env.VITE_COUNTRY;\nreturn defineConfig({\n\tdefine: {\n      COUNTRY: JSON.stringify(country)\n     }\n})\n```\n\n### 3.1.12 Uncaught Error: Dynamic require of \"/Users/xinweiwang/Desktop/affiliate/web-affiliate/node_modules/@mkt/common-component/dist/LazyImage/default-image.svg\" is not supported\n\n方案一：\n\n类似问题及解决方案：https://github.com/vitejs/vite/issues/5308\n\n使用插件@originjs/vite-plugin-commonjs处理了：\n\n```\n// vite.config.js \nconst country = env.VITE_COUNTRY;\nreturn defineConfig({ \n  plugins: [\n      viteCommonjs()\n  ]\n})\n```\n\n### 3.1.13 [vite] Internal server error: Failed to resolve import \"' + name + '\" from \"node_modules/.vite/react-app-polyfill_stable.js?v=f714c2ed\". Does the file exist?\n\n找到一个[类似问题](https://stackoverflow.com/questions/71572418/how-can-i-migrate-from-create-react-app-to-vite-in-a-scattered-complex-project)\n\n方案：使用@vitejs/plugin-legacy取代react-app-polyfill，具体配置根据实际情况而定。\n\n```\n// vite.config.js \nimport legacy from '@vitejs/plugin-legacy';\n\nreturn defineConfig({ \n  plugins: [ \n\tlegacy({\n        targets: ['ie >= 11'],\n        additionalLegacyPolyfills: ['regenerator-runtime/runtime']\n      }), \n  ]\n})\n```\n\n### 3.1.14 regeneratorRuntime is not defined\n\nimport \"regenerator-runtime\"\n\n### 3.1.15 Uncaught TypeError: Unknown theme type: undefined, name: undefined\n\n解决方案：https://github.com/ant-design/ant-design/issues/19002#issuecomment-965958565\n\n## 3.2 打包\n### 3.2.1 重名问题\n\n打包时不允许有重名现象，即使一个是类型名，一个是变量名，会报 Identifier 'xxx' has already been declared.\n\n有两处地方存在此问题：\n\n1. /src/components/Payment/BillingDetail/PaymentDetail/index.tsx：PaymentConfirmation\n2. /src/components/Payment/Setting/ZipCodeAddress/index.tsx：ZipCodeAddress\n\n### 3.2.2 压缩后大于500k的文件\n\n与业务相关，需要优化具体模块\n\n## 3.3 打包后预览\n### 3.3.1 Uncaught TypeError: Failed to resolve module specifier \"indexof\". Relative references must start with either \"/\", \"./\", or \"../\".\n\n解决方案：https://github.com/vitejs/vite/issues/2670#issuecomment-905495115\n\n### 3.3.2 Uncaught ReferenceError: require is not defined\n// vite.config.js \n\n```\nreturn defineConfig({ \n  build: {\n    commonjsOptions: {\n      transformMixedEsModules: true\n    }\n  }, \n})\n```\n\n\n### 3.3.3 Uncaught ReferenceError: exports is not defined\n\n未解决：https://github.com/rollup/plugins/issues/1014\n\n临时解决方案：https://github.com/rollup/plugins/issues/1014#issuecomment-1049512712\n\n## 3.4 Jenkins部署\n\n\n## 3.5 业务相关\n\n以下是业务相关的补充，由于不影响编译打包等，所以并不保证是包含全部的。\n\n### 3.5.1 svg\n\n使用插件[vite-plugin-svg-icons](https://github.com/vbenjs/vite-plugin-svg-icons)生成svg sprite map\n\n```\n// vite.config.js \nimport { createSvgIconsPlugin } from 'vite-plugin-svg-icons';\n\nreturn defineConfig({ \n  plugins: [  \n    createSvgIconsPlugin({\n      iconDirs: [\n\t\tpath.resolve(process.cwd(), 'src/assets/icons'),\n\t\tpath.resolve(process.cwd(), 'src/assets/svg')\n\t  ],\n\t  symbolId: '[name]'\n    }) \n  ]\n})\n\n// src/index.tsx\nimport 'virtual:svg-icons-register';\n```\n\n### 3.5.2 其余基于webpack的插件\n\n[vite插件合集](https://github.com/vitejs/awesome-vite#plugins)\n\nwebpack插件 | 类似的vite插\n---|---\nsvg-sprite-loader | vite-plugin-svg-icons\nworkbox-webpack-plugin | vite-plugin-pwa\nrealtime-translation-webpack-plugin | \nbabel-plugin-istanbul-shopee | \n\n### 3.5.3 业务相关报错\nUncaught (in promise) ReferenceError: require is not defined：类似的require都需要修改\n\n如 src/components/common/Empty\n\n```\n// 原来的写法\n<img src={require('@/assets/images/empty.png')}/>\n\n// 改为\n<img src={new URL('../../../assets/images/empty.png', import.meta.url).href}/>\n```\n\n如 src/translate/index.ts\n\n```\n// 原来的写法\nconst message = require('./messages/' + language + '.json');\nresult[language] = regExpEditLanguage(message);\n\n// 改为\nconst messages = import.meta.globEager('./messages/*.json');\nconst path = `./messages/${language}.json`;\nresult[language] = regExpEditLanguage(messages[path]);\n```\n\n# 4.调研结果\n## 4.1 原理\n\n官网有给出与传统打包工具的对比\n\n## 4.2 Webpack vs Vite\n\naction | webpack | vite\n---|---|---\n首次启动 | 90s~120s | 0.4s ~ 1s\n首次首屏 | 很快 | 约40s\n第二次启动首屏 | 很快 | 约9s\nHMR | 8s～10s | 0.05s ～ 0.2s\n打包构建 | 2min~3min | 2min ~ 3min\n\n- vite的启动比webpack快很多，但首次启动的首屏展示并不快，该加载的包还是要等加载完才展示。\n- 第二次启动时，vite由于缓存，首屏展示速度变快。\n- 官方表示，Vite HMR 更新反映到浏览器的时间小于 50ms。\n- 两者打包速度差不多。\n\n# 5.结论\n- 在开发上，特别是启动项目时，速度是有一定提升的。\n- vite还不算很成熟，有很多隐藏问题，甚至有一些问题无法从根本解决，如3.1.10。\n- 并不是所有webpack插件都有对应的vite插件，自定义的更是需要重写，工作量也许很大。\n- 一个庞大的项目，从webpack迁移vite，工作量很大，业务代码也有需要兼容的，例如各种require\n\n\n","source":"_posts/前端/vite.md","raw":"---\ntitle: vite\ndate: 2022-04-26\ntags: [前端]\ncategories: 前端\ncomments: true\n---\n\n# 1.概述\n- 项目基本是基于webpack进行打包的，随着模块的增多及需求的迭代，启动、发布等都会越来越慢，为了对此进行优化，开展对vite的调研。\n- 调研 Vite 打包工具 与AN业务的适用性，与 Webpack 相比的差异。\n\n# 2.调研方法\n1. 使用webiste进行调研。\n2. 修改配置及处理启动时的报错。\n3. 使用vite进行打包，修改打包时的报错。\n4. 打包后执行命令进行预览，修改预览时的报错。\n# 3.调研过程\n\n以下是webpack迁移vite会遇到的一些问题\n\n```\n\"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"vite build --debug\",\n    \"serve\": \"vite preview\",\n}\n```\n\n## 3.1 启动\n### 3.1.1 环境变量引入\n1. 新建本地文件 .env.local ，该文件需添加进 .gitignore 中。\n2. 变量名需要以 VITE_xxx 的方式命名。\n3. 在配置文件中使用：\n\n```\n//.env.local\nVITE_COUNTRY = vn\nVITE_ENVIRONMENT = test\n\n// vite.config.js\nimport { defineConfig, loadEnv } from 'vite';\nexport default ({ mode }) => {\n  const env = loadEnv(mode, process.cwd());\n  const environment = env.VITE_ENV || env.VITE_ENVIRONMENT || 'test'\n  const country = env.VITE_CID || env.VITE_COUNTRY || 'my'\n\n  return defineConfig({\n\t//...\n  })\n}\n```\n\n### 3.1.2 别名\n\n```\n// vite.config.js\nexport default ({ mode }) => {\n  // ...\n\n  return defineConfig({\n    resolve: {\n      alias: [{ find: '@/', replacement: '/src/' }],\n    }\n  })\n}\n```\n\n### 3.1.3 样式\n\n问题1: [vite] Internal server error: Preprocessor dependency \"sass\" not found. Did you install it?\n\n安装sass\n\n问题2: [vite] Internal server error: Inline JavaScript is not enabled. Is it set in your options?\n\n```\nreturn defineConfig({\n    css: {\n      preprocessorOptions: {\n        less: {\n          javascriptEnabled: true,\n          modifyVars: theme\n        }\n      }\n    }\n})\n```\n\n问题3: [vite] Internal server error: '~antd/dist/antd.less' wasn't found. Tried - /Users/xinweiwang/Desktop/affiliate/web-affiliate/src/~antd/dist/antd.less,node_modules/~antd/dist/antd.less,npm://~antd/dist/antd.less,~antd/dist/antd.less\n\n1. 把theme.js中的 @import \"~antd/dist/antd.less\"; 注释。\n2. 添加插件vite-plugin-imp按需加载antd\n\n```\nreturn defineConfig({\n    plugins: [\n      vitePluginImp({\n        libList: [\n          {\n            libName: \"antd\",\n            style: (name) => `antd/es/${name}/style/`,\n          },\n        ],\n      })\n    ],\n})\n```\n\n问题4：不支持 ':export'\n\n\n问题5：Unknown theme type: undefined, name: undefined\n\nhttps://github.com/ant-design/ant-design/issues/19002\n\n```\nreturn defineConfig({\n  resolve: {\n      alias: {\n        '@ant-design/icons/lib/dist': '@ant-design/icons/lib/index.es.js'\n      },\n  }, \n})\n```\n\n### 3.1.4 配置代理\n\n```\nreturn defineConfig({\n\tserver: {\n      port: 8888,\n      host: '0.0.0.0',\n      proxy: {\n        '/api': {\n          target: `https://affiliate.${environment}.${BASE_DOMAIN_ALL[country]}/`,\n          changeOrigin: true\n        }\n      }\n    }\n})\n```\n\n### 3.1.5 引入入口文件\n\n```\n// index.html \n<script type=\"module\" src=\"/src/index.tsx\"></script>\n```\n\n### 3.1.6 启动时\n\n各种408，请求超时 ，可以删除node_modules，重新install\n\n### 3.1.7 Uncaught SyntaxError: The requested module '/global.config.js?t=1647918620356' does not provide an export named 'default'\n\nvite不支持cjs，https://github.com/vitejs/vite/issues/3024\n\n1. 方案一：可以通过预捆绑的方式处理，但那代表着需要捆绑很多个文件\n2. 方案二：把global.config.js中的module.exports改为export default，所有文件的module.exports及require都需要更改\n\n### 3.1.8 Uncaught ReferenceError: global is not defined\n\n方案一\n\n```\n// index.html\n<script>\n\tglobal = globalThis;\n</script>\n```\n\n方案二：缺点是打包时会把同名文件的文件名修改掉\n\n```\n// vite.config.js \nreturn defineConfig({\n\tdefine: {\n      global: JSON.stringify({})\n    }\n})\n```\n\n### 3.1.9 babel\n\n使用插件@vitejs/plugin-react\n\n```\n// vite.config.js\nreturn defineConfig({\n  plugins: [ \n    react({\n      babel: {\n        plugins: [],\n      },\n    }), \n  ]\n})\n```\n\n### 3.1.10 未解之谜（后来没有再出现了）\n\nhttps://github.com/vitejs/vite/issues/6241\n\nvite@2.5.10没有出现此问题，但评论说还有，所以也暂时不算是解决了。\n\n### 3.1.11 全局变量\n\ndefine中对应的值是一个常量，需要使用JSON.stringify()来表示是一个常量。\n\n```\n// vite.config.js \nconst country = env.VITE_COUNTRY;\nreturn defineConfig({\n\tdefine: {\n      COUNTRY: JSON.stringify(country)\n     }\n})\n```\n\n### 3.1.12 Uncaught Error: Dynamic require of \"/Users/xinweiwang/Desktop/affiliate/web-affiliate/node_modules/@mkt/common-component/dist/LazyImage/default-image.svg\" is not supported\n\n方案一：\n\n类似问题及解决方案：https://github.com/vitejs/vite/issues/5308\n\n使用插件@originjs/vite-plugin-commonjs处理了：\n\n```\n// vite.config.js \nconst country = env.VITE_COUNTRY;\nreturn defineConfig({ \n  plugins: [\n      viteCommonjs()\n  ]\n})\n```\n\n### 3.1.13 [vite] Internal server error: Failed to resolve import \"' + name + '\" from \"node_modules/.vite/react-app-polyfill_stable.js?v=f714c2ed\". Does the file exist?\n\n找到一个[类似问题](https://stackoverflow.com/questions/71572418/how-can-i-migrate-from-create-react-app-to-vite-in-a-scattered-complex-project)\n\n方案：使用@vitejs/plugin-legacy取代react-app-polyfill，具体配置根据实际情况而定。\n\n```\n// vite.config.js \nimport legacy from '@vitejs/plugin-legacy';\n\nreturn defineConfig({ \n  plugins: [ \n\tlegacy({\n        targets: ['ie >= 11'],\n        additionalLegacyPolyfills: ['regenerator-runtime/runtime']\n      }), \n  ]\n})\n```\n\n### 3.1.14 regeneratorRuntime is not defined\n\nimport \"regenerator-runtime\"\n\n### 3.1.15 Uncaught TypeError: Unknown theme type: undefined, name: undefined\n\n解决方案：https://github.com/ant-design/ant-design/issues/19002#issuecomment-965958565\n\n## 3.2 打包\n### 3.2.1 重名问题\n\n打包时不允许有重名现象，即使一个是类型名，一个是变量名，会报 Identifier 'xxx' has already been declared.\n\n有两处地方存在此问题：\n\n1. /src/components/Payment/BillingDetail/PaymentDetail/index.tsx：PaymentConfirmation\n2. /src/components/Payment/Setting/ZipCodeAddress/index.tsx：ZipCodeAddress\n\n### 3.2.2 压缩后大于500k的文件\n\n与业务相关，需要优化具体模块\n\n## 3.3 打包后预览\n### 3.3.1 Uncaught TypeError: Failed to resolve module specifier \"indexof\". Relative references must start with either \"/\", \"./\", or \"../\".\n\n解决方案：https://github.com/vitejs/vite/issues/2670#issuecomment-905495115\n\n### 3.3.2 Uncaught ReferenceError: require is not defined\n// vite.config.js \n\n```\nreturn defineConfig({ \n  build: {\n    commonjsOptions: {\n      transformMixedEsModules: true\n    }\n  }, \n})\n```\n\n\n### 3.3.3 Uncaught ReferenceError: exports is not defined\n\n未解决：https://github.com/rollup/plugins/issues/1014\n\n临时解决方案：https://github.com/rollup/plugins/issues/1014#issuecomment-1049512712\n\n## 3.4 Jenkins部署\n\n\n## 3.5 业务相关\n\n以下是业务相关的补充，由于不影响编译打包等，所以并不保证是包含全部的。\n\n### 3.5.1 svg\n\n使用插件[vite-plugin-svg-icons](https://github.com/vbenjs/vite-plugin-svg-icons)生成svg sprite map\n\n```\n// vite.config.js \nimport { createSvgIconsPlugin } from 'vite-plugin-svg-icons';\n\nreturn defineConfig({ \n  plugins: [  \n    createSvgIconsPlugin({\n      iconDirs: [\n\t\tpath.resolve(process.cwd(), 'src/assets/icons'),\n\t\tpath.resolve(process.cwd(), 'src/assets/svg')\n\t  ],\n\t  symbolId: '[name]'\n    }) \n  ]\n})\n\n// src/index.tsx\nimport 'virtual:svg-icons-register';\n```\n\n### 3.5.2 其余基于webpack的插件\n\n[vite插件合集](https://github.com/vitejs/awesome-vite#plugins)\n\nwebpack插件 | 类似的vite插\n---|---\nsvg-sprite-loader | vite-plugin-svg-icons\nworkbox-webpack-plugin | vite-plugin-pwa\nrealtime-translation-webpack-plugin | \nbabel-plugin-istanbul-shopee | \n\n### 3.5.3 业务相关报错\nUncaught (in promise) ReferenceError: require is not defined：类似的require都需要修改\n\n如 src/components/common/Empty\n\n```\n// 原来的写法\n<img src={require('@/assets/images/empty.png')}/>\n\n// 改为\n<img src={new URL('../../../assets/images/empty.png', import.meta.url).href}/>\n```\n\n如 src/translate/index.ts\n\n```\n// 原来的写法\nconst message = require('./messages/' + language + '.json');\nresult[language] = regExpEditLanguage(message);\n\n// 改为\nconst messages = import.meta.globEager('./messages/*.json');\nconst path = `./messages/${language}.json`;\nresult[language] = regExpEditLanguage(messages[path]);\n```\n\n# 4.调研结果\n## 4.1 原理\n\n官网有给出与传统打包工具的对比\n\n## 4.2 Webpack vs Vite\n\naction | webpack | vite\n---|---|---\n首次启动 | 90s~120s | 0.4s ~ 1s\n首次首屏 | 很快 | 约40s\n第二次启动首屏 | 很快 | 约9s\nHMR | 8s～10s | 0.05s ～ 0.2s\n打包构建 | 2min~3min | 2min ~ 3min\n\n- vite的启动比webpack快很多，但首次启动的首屏展示并不快，该加载的包还是要等加载完才展示。\n- 第二次启动时，vite由于缓存，首屏展示速度变快。\n- 官方表示，Vite HMR 更新反映到浏览器的时间小于 50ms。\n- 两者打包速度差不多。\n\n# 5.结论\n- 在开发上，特别是启动项目时，速度是有一定提升的。\n- vite还不算很成熟，有很多隐藏问题，甚至有一些问题无法从根本解决，如3.1.10。\n- 并不是所有webpack插件都有对应的vite插件，自定义的更是需要重写，工作量也许很大。\n- 一个庞大的项目，从webpack迁移vite，工作量很大，业务代码也有需要兼容的，例如各种require\n\n\n","slug":"前端/vite","published":1,"updated":"2022-07-22T10:11:31.253Z","layout":"post","photos":[],"link":"","_id":"cl5wb2yn100cacj38g1wykm5x","content":"<h1 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1.概述\"></a>1.概述</h1><ul>\n<li>项目基本是基于webpack进行打包的，随着模块的增多及需求的迭代，启动、发布等都会越来越慢，为了对此进行优化，开展对vite的调研。</li>\n<li>调研 Vite 打包工具 与AN业务的适用性，与 Webpack 相比的差异。</li>\n</ul>\n<h1 id=\"2-调研方法\"><a href=\"#2-调研方法\" class=\"headerlink\" title=\"2.调研方法\"></a>2.调研方法</h1><ol>\n<li>使用webiste进行调研。</li>\n<li>修改配置及处理启动时的报错。</li>\n<li>使用vite进行打包，修改打包时的报错。</li>\n<li>打包后执行命令进行预览，修改预览时的报错。<h1 id=\"3-调研过程\"><a href=\"#3-调研过程\" class=\"headerlink\" title=\"3.调研过程\"></a>3.调研过程</h1></li>\n</ol>\n<p>以下是webpack迁移vite会遇到的一些问题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;dev&quot;: &quot;vite&quot;,</span><br><span class=\"line\">    &quot;build&quot;: &quot;vite build --debug&quot;,</span><br><span class=\"line\">    &quot;serve&quot;: &quot;vite preview&quot;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-1-启动\"><a href=\"#3-1-启动\" class=\"headerlink\" title=\"3.1 启动\"></a>3.1 启动</h2><h3 id=\"3-1-1-环境变量引入\"><a href=\"#3-1-1-环境变量引入\" class=\"headerlink\" title=\"3.1.1 环境变量引入\"></a>3.1.1 环境变量引入</h3><ol>\n<li>新建本地文件 .env.local ，该文件需添加进 .gitignore 中。</li>\n<li>变量名需要以 VITE_xxx 的方式命名。</li>\n<li>在配置文件中使用：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//.env.local</span><br><span class=\"line\">VITE_COUNTRY = vn</span><br><span class=\"line\">VITE_ENVIRONMENT = test</span><br><span class=\"line\"></span><br><span class=\"line\">// vite.config.js</span><br><span class=\"line\">import &#123; defineConfig, loadEnv &#125; from &apos;vite&apos;;</span><br><span class=\"line\">export default (&#123; mode &#125;) =&gt; &#123;</span><br><span class=\"line\">  const env = loadEnv(mode, process.cwd());</span><br><span class=\"line\">  const environment = env.VITE_ENV || env.VITE_ENVIRONMENT || &apos;test&apos;</span><br><span class=\"line\">  const country = env.VITE_CID || env.VITE_COUNTRY || &apos;my&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">  return defineConfig(&#123;</span><br><span class=\"line\">\t//...</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-1-2-别名\"><a href=\"#3-1-2-别名\" class=\"headerlink\" title=\"3.1.2 别名\"></a>3.1.2 别名</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// vite.config.js</span><br><span class=\"line\">export default (&#123; mode &#125;) =&gt; &#123;</span><br><span class=\"line\">  // ...</span><br><span class=\"line\"></span><br><span class=\"line\">  return defineConfig(&#123;</span><br><span class=\"line\">    resolve: &#123;</span><br><span class=\"line\">      alias: [&#123; find: &apos;@/&apos;, replacement: &apos;/src/&apos; &#125;],</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-1-3-样式\"><a href=\"#3-1-3-样式\" class=\"headerlink\" title=\"3.1.3 样式\"></a>3.1.3 样式</h3><p>问题1: [vite] Internal server error: Preprocessor dependency “sass” not found. Did you install it?</p>\n<p>安装sass</p>\n<p>问题2: [vite] Internal server error: Inline JavaScript is not enabled. Is it set in your options?</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">return defineConfig(&#123;</span><br><span class=\"line\">    css: &#123;</span><br><span class=\"line\">      preprocessorOptions: &#123;</span><br><span class=\"line\">        less: &#123;</span><br><span class=\"line\">          javascriptEnabled: true,</span><br><span class=\"line\">          modifyVars: theme</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>问题3: [vite] Internal server error: ‘~antd/dist/antd.less’ wasn’t found. Tried - /Users/xinweiwang/Desktop/affiliate/web-affiliate/src/~antd/dist/antd.less,node_modules/~antd/dist/antd.less,npm://~antd/dist/antd.less,~antd/dist/antd.less</p>\n<ol>\n<li>把theme.js中的 @import “~antd/dist/antd.less”; 注释。</li>\n<li>添加插件vite-plugin-imp按需加载antd</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">return defineConfig(&#123;</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">      vitePluginImp(&#123;</span><br><span class=\"line\">        libList: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            libName: &quot;antd&quot;,</span><br><span class=\"line\">            style: (name) =&gt; `antd/es/$&#123;name&#125;/style/`,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    ],</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>问题4：不支持 ‘:export’</p>\n<p>问题5：Unknown theme type: undefined, name: undefined</p>\n<p><a href=\"https://github.com/ant-design/ant-design/issues/19002\" target=\"_blank\" rel=\"noopener\">https://github.com/ant-design/ant-design/issues/19002</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">return defineConfig(&#123;</span><br><span class=\"line\">  resolve: &#123;</span><br><span class=\"line\">      alias: &#123;</span><br><span class=\"line\">        &apos;@ant-design/icons/lib/dist&apos;: &apos;@ant-design/icons/lib/index.es.js&apos;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">  &#125;, </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-1-4-配置代理\"><a href=\"#3-1-4-配置代理\" class=\"headerlink\" title=\"3.1.4 配置代理\"></a>3.1.4 配置代理</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">return defineConfig(&#123;</span><br><span class=\"line\">\tserver: &#123;</span><br><span class=\"line\">      port: 8888,</span><br><span class=\"line\">      host: &apos;0.0.0.0&apos;,</span><br><span class=\"line\">      proxy: &#123;</span><br><span class=\"line\">        &apos;/api&apos;: &#123;</span><br><span class=\"line\">          target: `https://affiliate.$&#123;environment&#125;.$&#123;BASE_DOMAIN_ALL[country]&#125;/`,</span><br><span class=\"line\">          changeOrigin: true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-1-5-引入入口文件\"><a href=\"#3-1-5-引入入口文件\" class=\"headerlink\" title=\"3.1.5 引入入口文件\"></a>3.1.5 引入入口文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// index.html </span><br><span class=\"line\">&lt;script type=&quot;module&quot; src=&quot;/src/index.tsx&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-1-6-启动时\"><a href=\"#3-1-6-启动时\" class=\"headerlink\" title=\"3.1.6 启动时\"></a>3.1.6 启动时</h3><p>各种408，请求超时 ，可以删除node_modules，重新install</p>\n<h3 id=\"3-1-7-Uncaught-SyntaxError-The-requested-module-‘-global-config-js-t-1647918620356’-does-not-provide-an-export-named-‘default’\"><a href=\"#3-1-7-Uncaught-SyntaxError-The-requested-module-‘-global-config-js-t-1647918620356’-does-not-provide-an-export-named-‘default’\" class=\"headerlink\" title=\"3.1.7 Uncaught SyntaxError: The requested module ‘/global.config.js?t=1647918620356’ does not provide an export named ‘default’\"></a>3.1.7 Uncaught SyntaxError: The requested module ‘/global.config.js?t=1647918620356’ does not provide an export named ‘default’</h3><p>vite不支持cjs，<a href=\"https://github.com/vitejs/vite/issues/3024\" target=\"_blank\" rel=\"noopener\">https://github.com/vitejs/vite/issues/3024</a></p>\n<ol>\n<li>方案一：可以通过预捆绑的方式处理，但那代表着需要捆绑很多个文件</li>\n<li>方案二：把global.config.js中的module.exports改为export default，所有文件的module.exports及require都需要更改</li>\n</ol>\n<h3 id=\"3-1-8-Uncaught-ReferenceError-global-is-not-defined\"><a href=\"#3-1-8-Uncaught-ReferenceError-global-is-not-defined\" class=\"headerlink\" title=\"3.1.8 Uncaught ReferenceError: global is not defined\"></a>3.1.8 Uncaught ReferenceError: global is not defined</h3><p>方案一</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// index.html</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\tglobal = globalThis;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>方案二：缺点是打包时会把同名文件的文件名修改掉</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// vite.config.js </span><br><span class=\"line\">return defineConfig(&#123;</span><br><span class=\"line\">\tdefine: &#123;</span><br><span class=\"line\">      global: JSON.stringify(&#123;&#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-1-9-babel\"><a href=\"#3-1-9-babel\" class=\"headerlink\" title=\"3.1.9 babel\"></a>3.1.9 babel</h3><p>使用插件@vitejs/plugin-react</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// vite.config.js</span><br><span class=\"line\">return defineConfig(&#123;</span><br><span class=\"line\">  plugins: [ </span><br><span class=\"line\">    react(&#123;</span><br><span class=\"line\">      babel: &#123;</span><br><span class=\"line\">        plugins: [],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;), </span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-1-10-未解之谜（后来没有再出现了）\"><a href=\"#3-1-10-未解之谜（后来没有再出现了）\" class=\"headerlink\" title=\"3.1.10 未解之谜（后来没有再出现了）\"></a>3.1.10 未解之谜（后来没有再出现了）</h3><p><a href=\"https://github.com/vitejs/vite/issues/6241\" target=\"_blank\" rel=\"noopener\">https://github.com/vitejs/vite/issues/6241</a></p>\n<p><a href=\"mailto:vite@2.5.10\" target=\"_blank\" rel=\"noopener\">vite@2.5.10</a>没有出现此问题，但评论说还有，所以也暂时不算是解决了。</p>\n<h3 id=\"3-1-11-全局变量\"><a href=\"#3-1-11-全局变量\" class=\"headerlink\" title=\"3.1.11 全局变量\"></a>3.1.11 全局变量</h3><p>define中对应的值是一个常量，需要使用JSON.stringify()来表示是一个常量。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// vite.config.js </span><br><span class=\"line\">const country = env.VITE_COUNTRY;</span><br><span class=\"line\">return defineConfig(&#123;</span><br><span class=\"line\">\tdefine: &#123;</span><br><span class=\"line\">      COUNTRY: JSON.stringify(country)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-1-12-Uncaught-Error-Dynamic-require-of-“-Users-xinweiwang-Desktop-affiliate-web-affiliate-node-modules-mkt-common-component-dist-LazyImage-default-image-svg”-is-not-supported\"><a href=\"#3-1-12-Uncaught-Error-Dynamic-require-of-“-Users-xinweiwang-Desktop-affiliate-web-affiliate-node-modules-mkt-common-component-dist-LazyImage-default-image-svg”-is-not-supported\" class=\"headerlink\" title=\"3.1.12 Uncaught Error: Dynamic require of “/Users/xinweiwang/Desktop/affiliate/web-affiliate/node_modules/@mkt/common-component/dist/LazyImage/default-image.svg” is not supported\"></a>3.1.12 Uncaught Error: Dynamic require of “/Users/xinweiwang/Desktop/affiliate/web-affiliate/node_modules/@mkt/common-component/dist/LazyImage/default-image.svg” is not supported</h3><p>方案一：</p>\n<p>类似问题及解决方案：<a href=\"https://github.com/vitejs/vite/issues/5308\" target=\"_blank\" rel=\"noopener\">https://github.com/vitejs/vite/issues/5308</a></p>\n<p>使用插件@originjs/vite-plugin-commonjs处理了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// vite.config.js </span><br><span class=\"line\">const country = env.VITE_COUNTRY;</span><br><span class=\"line\">return defineConfig(&#123; </span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">      viteCommonjs()</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-1-13-vite-Internal-server-error-Failed-to-resolve-import-“‘-name-‘“-from-“node-modules-vite-react-app-polyfill-stable-js-v-f714c2ed”-Does-the-file-exist\"><a href=\"#3-1-13-vite-Internal-server-error-Failed-to-resolve-import-“‘-name-‘“-from-“node-modules-vite-react-app-polyfill-stable-js-v-f714c2ed”-Does-the-file-exist\" class=\"headerlink\" title=\"3.1.13 [vite] Internal server error: Failed to resolve import “‘ + name + ‘“ from “node_modules/.vite/react-app-polyfill_stable.js?v=f714c2ed”. Does the file exist?\"></a>3.1.13 [vite] Internal server error: Failed to resolve import “‘ + name + ‘“ from “node_modules/.vite/react-app-polyfill_stable.js?v=f714c2ed”. Does the file exist?</h3><p>找到一个<a href=\"https://stackoverflow.com/questions/71572418/how-can-i-migrate-from-create-react-app-to-vite-in-a-scattered-complex-project\" target=\"_blank\" rel=\"noopener\">类似问题</a></p>\n<p>方案：使用@vitejs/plugin-legacy取代react-app-polyfill，具体配置根据实际情况而定。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// vite.config.js </span><br><span class=\"line\">import legacy from &apos;@vitejs/plugin-legacy&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">return defineConfig(&#123; </span><br><span class=\"line\">  plugins: [ </span><br><span class=\"line\">\tlegacy(&#123;</span><br><span class=\"line\">        targets: [&apos;ie &gt;= 11&apos;],</span><br><span class=\"line\">        additionalLegacyPolyfills: [&apos;regenerator-runtime/runtime&apos;]</span><br><span class=\"line\">      &#125;), </span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-1-14-regeneratorRuntime-is-not-defined\"><a href=\"#3-1-14-regeneratorRuntime-is-not-defined\" class=\"headerlink\" title=\"3.1.14 regeneratorRuntime is not defined\"></a>3.1.14 regeneratorRuntime is not defined</h3><p>import “regenerator-runtime”</p>\n<h3 id=\"3-1-15-Uncaught-TypeError-Unknown-theme-type-undefined-name-undefined\"><a href=\"#3-1-15-Uncaught-TypeError-Unknown-theme-type-undefined-name-undefined\" class=\"headerlink\" title=\"3.1.15 Uncaught TypeError: Unknown theme type: undefined, name: undefined\"></a>3.1.15 Uncaught TypeError: Unknown theme type: undefined, name: undefined</h3><p>解决方案：<a href=\"https://github.com/ant-design/ant-design/issues/19002#issuecomment-965958565\" target=\"_blank\" rel=\"noopener\">https://github.com/ant-design/ant-design/issues/19002#issuecomment-965958565</a></p>\n<h2 id=\"3-2-打包\"><a href=\"#3-2-打包\" class=\"headerlink\" title=\"3.2 打包\"></a>3.2 打包</h2><h3 id=\"3-2-1-重名问题\"><a href=\"#3-2-1-重名问题\" class=\"headerlink\" title=\"3.2.1 重名问题\"></a>3.2.1 重名问题</h3><p>打包时不允许有重名现象，即使一个是类型名，一个是变量名，会报 Identifier ‘xxx’ has already been declared.</p>\n<p>有两处地方存在此问题：</p>\n<ol>\n<li>/src/components/Payment/BillingDetail/PaymentDetail/index.tsx：PaymentConfirmation</li>\n<li>/src/components/Payment/Setting/ZipCodeAddress/index.tsx：ZipCodeAddress</li>\n</ol>\n<h3 id=\"3-2-2-压缩后大于500k的文件\"><a href=\"#3-2-2-压缩后大于500k的文件\" class=\"headerlink\" title=\"3.2.2 压缩后大于500k的文件\"></a>3.2.2 压缩后大于500k的文件</h3><p>与业务相关，需要优化具体模块</p>\n<h2 id=\"3-3-打包后预览\"><a href=\"#3-3-打包后预览\" class=\"headerlink\" title=\"3.3 打包后预览\"></a>3.3 打包后预览</h2><h3 id=\"3-3-1-Uncaught-TypeError-Failed-to-resolve-module-specifier-“indexof”-Relative-references-must-start-with-either-“-“-“-“-or-“-“\"><a href=\"#3-3-1-Uncaught-TypeError-Failed-to-resolve-module-specifier-“indexof”-Relative-references-must-start-with-either-“-“-“-“-or-“-“\" class=\"headerlink\" title=\"3.3.1 Uncaught TypeError: Failed to resolve module specifier “indexof”. Relative references must start with either “/“, “./“, or “../“.\"></a>3.3.1 Uncaught TypeError: Failed to resolve module specifier “indexof”. Relative references must start with either “/“, “./“, or “../“.</h3><p>解决方案：<a href=\"https://github.com/vitejs/vite/issues/2670#issuecomment-905495115\" target=\"_blank\" rel=\"noopener\">https://github.com/vitejs/vite/issues/2670#issuecomment-905495115</a></p>\n<h3 id=\"3-3-2-Uncaught-ReferenceError-require-is-not-defined\"><a href=\"#3-3-2-Uncaught-ReferenceError-require-is-not-defined\" class=\"headerlink\" title=\"3.3.2 Uncaught ReferenceError: require is not defined\"></a>3.3.2 Uncaught ReferenceError: require is not defined</h3><p>// vite.config.js </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">return defineConfig(&#123; </span><br><span class=\"line\">  build: &#123;</span><br><span class=\"line\">    commonjsOptions: &#123;</span><br><span class=\"line\">      transformMixedEsModules: true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-3-3-Uncaught-ReferenceError-exports-is-not-defined\"><a href=\"#3-3-3-Uncaught-ReferenceError-exports-is-not-defined\" class=\"headerlink\" title=\"3.3.3 Uncaught ReferenceError: exports is not defined\"></a>3.3.3 Uncaught ReferenceError: exports is not defined</h3><p>未解决：<a href=\"https://github.com/rollup/plugins/issues/1014\" target=\"_blank\" rel=\"noopener\">https://github.com/rollup/plugins/issues/1014</a></p>\n<p>临时解决方案：<a href=\"https://github.com/rollup/plugins/issues/1014#issuecomment-1049512712\" target=\"_blank\" rel=\"noopener\">https://github.com/rollup/plugins/issues/1014#issuecomment-1049512712</a></p>\n<h2 id=\"3-4-Jenkins部署\"><a href=\"#3-4-Jenkins部署\" class=\"headerlink\" title=\"3.4 Jenkins部署\"></a>3.4 Jenkins部署</h2><h2 id=\"3-5-业务相关\"><a href=\"#3-5-业务相关\" class=\"headerlink\" title=\"3.5 业务相关\"></a>3.5 业务相关</h2><p>以下是业务相关的补充，由于不影响编译打包等，所以并不保证是包含全部的。</p>\n<h3 id=\"3-5-1-svg\"><a href=\"#3-5-1-svg\" class=\"headerlink\" title=\"3.5.1 svg\"></a>3.5.1 svg</h3><p>使用插件<a href=\"https://github.com/vbenjs/vite-plugin-svg-icons\" target=\"_blank\" rel=\"noopener\">vite-plugin-svg-icons</a>生成svg sprite map</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// vite.config.js </span><br><span class=\"line\">import &#123; createSvgIconsPlugin &#125; from &apos;vite-plugin-svg-icons&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">return defineConfig(&#123; </span><br><span class=\"line\">  plugins: [  </span><br><span class=\"line\">    createSvgIconsPlugin(&#123;</span><br><span class=\"line\">      iconDirs: [</span><br><span class=\"line\">\t\tpath.resolve(process.cwd(), &apos;src/assets/icons&apos;),</span><br><span class=\"line\">\t\tpath.resolve(process.cwd(), &apos;src/assets/svg&apos;)</span><br><span class=\"line\">\t  ],</span><br><span class=\"line\">\t  symbolId: &apos;[name]&apos;</span><br><span class=\"line\">    &#125;) </span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">// src/index.tsx</span><br><span class=\"line\">import &apos;virtual:svg-icons-register&apos;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-5-2-其余基于webpack的插件\"><a href=\"#3-5-2-其余基于webpack的插件\" class=\"headerlink\" title=\"3.5.2 其余基于webpack的插件\"></a>3.5.2 其余基于webpack的插件</h3><p><a href=\"https://github.com/vitejs/awesome-vite#plugins\" target=\"_blank\" rel=\"noopener\">vite插件合集</a></p>\n<table>\n<thead>\n<tr>\n<th>webpack插件</th>\n<th>类似的vite插</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>svg-sprite-loader</td>\n<td>vite-plugin-svg-icons</td>\n</tr>\n<tr>\n<td>workbox-webpack-plugin</td>\n<td>vite-plugin-pwa</td>\n</tr>\n<tr>\n<td>realtime-translation-webpack-plugin</td>\n<td></td>\n</tr>\n<tr>\n<td>babel-plugin-istanbul-shopee</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"3-5-3-业务相关报错\"><a href=\"#3-5-3-业务相关报错\" class=\"headerlink\" title=\"3.5.3 业务相关报错\"></a>3.5.3 业务相关报错</h3><p>Uncaught (in promise) ReferenceError: require is not defined：类似的require都需要修改</p>\n<p>如 src/components/common/Empty</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 原来的写法</span><br><span class=\"line\">&lt;img src=&#123;require(&apos;@/assets/images/empty.png&apos;)&#125;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// 改为</span><br><span class=\"line\">&lt;img src=&#123;new URL(&apos;../../../assets/images/empty.png&apos;, import.meta.url).href&#125;/&gt;</span><br></pre></td></tr></table></figure>\n<p>如 src/translate/index.ts</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 原来的写法</span><br><span class=\"line\">const message = require(&apos;./messages/&apos; + language + &apos;.json&apos;);</span><br><span class=\"line\">result[language] = regExpEditLanguage(message);</span><br><span class=\"line\"></span><br><span class=\"line\">// 改为</span><br><span class=\"line\">const messages = import.meta.globEager(&apos;./messages/*.json&apos;);</span><br><span class=\"line\">const path = `./messages/$&#123;language&#125;.json`;</span><br><span class=\"line\">result[language] = regExpEditLanguage(messages[path]);</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-调研结果\"><a href=\"#4-调研结果\" class=\"headerlink\" title=\"4.调研结果\"></a>4.调研结果</h1><h2 id=\"4-1-原理\"><a href=\"#4-1-原理\" class=\"headerlink\" title=\"4.1 原理\"></a>4.1 原理</h2><p>官网有给出与传统打包工具的对比</p>\n<h2 id=\"4-2-Webpack-vs-Vite\"><a href=\"#4-2-Webpack-vs-Vite\" class=\"headerlink\" title=\"4.2 Webpack vs Vite\"></a>4.2 Webpack vs Vite</h2><table>\n<thead>\n<tr>\n<th>action</th>\n<th>webpack</th>\n<th>vite</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>首次启动</td>\n<td>90s~120s</td>\n<td>0.4s ~ 1s</td>\n</tr>\n<tr>\n<td>首次首屏</td>\n<td>很快</td>\n<td>约40s</td>\n</tr>\n<tr>\n<td>第二次启动首屏</td>\n<td>很快</td>\n<td>约9s</td>\n</tr>\n<tr>\n<td>HMR</td>\n<td>8s～10s</td>\n<td>0.05s ～ 0.2s</td>\n</tr>\n<tr>\n<td>打包构建</td>\n<td>2min~3min</td>\n<td>2min ~ 3min</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>vite的启动比webpack快很多，但首次启动的首屏展示并不快，该加载的包还是要等加载完才展示。</li>\n<li>第二次启动时，vite由于缓存，首屏展示速度变快。</li>\n<li>官方表示，Vite HMR 更新反映到浏览器的时间小于 50ms。</li>\n<li>两者打包速度差不多。</li>\n</ul>\n<h1 id=\"5-结论\"><a href=\"#5-结论\" class=\"headerlink\" title=\"5.结论\"></a>5.结论</h1><ul>\n<li>在开发上，特别是启动项目时，速度是有一定提升的。</li>\n<li>vite还不算很成熟，有很多隐藏问题，甚至有一些问题无法从根本解决，如3.1.10。</li>\n<li>并不是所有webpack插件都有对应的vite插件，自定义的更是需要重写，工作量也许很大。</li>\n<li>一个庞大的项目，从webpack迁移vite，工作量很大，业务代码也有需要兼容的，例如各种require</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1.概述\"></a>1.概述</h1><ul>\n<li>项目基本是基于webpack进行打包的，随着模块的增多及需求的迭代，启动、发布等都会越来越慢，为了对此进行优化，开展对vite的调研。</li>\n<li>调研 Vite 打包工具 与AN业务的适用性，与 Webpack 相比的差异。</li>\n</ul>\n<h1 id=\"2-调研方法\"><a href=\"#2-调研方法\" class=\"headerlink\" title=\"2.调研方法\"></a>2.调研方法</h1><ol>\n<li>使用webiste进行调研。</li>\n<li>修改配置及处理启动时的报错。</li>\n<li>使用vite进行打包，修改打包时的报错。</li>\n<li>打包后执行命令进行预览，修改预览时的报错。<h1 id=\"3-调研过程\"><a href=\"#3-调研过程\" class=\"headerlink\" title=\"3.调研过程\"></a>3.调研过程</h1></li>\n</ol>\n<p>以下是webpack迁移vite会遇到的一些问题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;dev&quot;: &quot;vite&quot;,</span><br><span class=\"line\">    &quot;build&quot;: &quot;vite build --debug&quot;,</span><br><span class=\"line\">    &quot;serve&quot;: &quot;vite preview&quot;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-1-启动\"><a href=\"#3-1-启动\" class=\"headerlink\" title=\"3.1 启动\"></a>3.1 启动</h2><h3 id=\"3-1-1-环境变量引入\"><a href=\"#3-1-1-环境变量引入\" class=\"headerlink\" title=\"3.1.1 环境变量引入\"></a>3.1.1 环境变量引入</h3><ol>\n<li>新建本地文件 .env.local ，该文件需添加进 .gitignore 中。</li>\n<li>变量名需要以 VITE_xxx 的方式命名。</li>\n<li>在配置文件中使用：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//.env.local</span><br><span class=\"line\">VITE_COUNTRY = vn</span><br><span class=\"line\">VITE_ENVIRONMENT = test</span><br><span class=\"line\"></span><br><span class=\"line\">// vite.config.js</span><br><span class=\"line\">import &#123; defineConfig, loadEnv &#125; from &apos;vite&apos;;</span><br><span class=\"line\">export default (&#123; mode &#125;) =&gt; &#123;</span><br><span class=\"line\">  const env = loadEnv(mode, process.cwd());</span><br><span class=\"line\">  const environment = env.VITE_ENV || env.VITE_ENVIRONMENT || &apos;test&apos;</span><br><span class=\"line\">  const country = env.VITE_CID || env.VITE_COUNTRY || &apos;my&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">  return defineConfig(&#123;</span><br><span class=\"line\">\t//...</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-1-2-别名\"><a href=\"#3-1-2-别名\" class=\"headerlink\" title=\"3.1.2 别名\"></a>3.1.2 别名</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// vite.config.js</span><br><span class=\"line\">export default (&#123; mode &#125;) =&gt; &#123;</span><br><span class=\"line\">  // ...</span><br><span class=\"line\"></span><br><span class=\"line\">  return defineConfig(&#123;</span><br><span class=\"line\">    resolve: &#123;</span><br><span class=\"line\">      alias: [&#123; find: &apos;@/&apos;, replacement: &apos;/src/&apos; &#125;],</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-1-3-样式\"><a href=\"#3-1-3-样式\" class=\"headerlink\" title=\"3.1.3 样式\"></a>3.1.3 样式</h3><p>问题1: [vite] Internal server error: Preprocessor dependency “sass” not found. Did you install it?</p>\n<p>安装sass</p>\n<p>问题2: [vite] Internal server error: Inline JavaScript is not enabled. Is it set in your options?</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">return defineConfig(&#123;</span><br><span class=\"line\">    css: &#123;</span><br><span class=\"line\">      preprocessorOptions: &#123;</span><br><span class=\"line\">        less: &#123;</span><br><span class=\"line\">          javascriptEnabled: true,</span><br><span class=\"line\">          modifyVars: theme</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>问题3: [vite] Internal server error: ‘~antd/dist/antd.less’ wasn’t found. Tried - /Users/xinweiwang/Desktop/affiliate/web-affiliate/src/~antd/dist/antd.less,node_modules/~antd/dist/antd.less,npm://~antd/dist/antd.less,~antd/dist/antd.less</p>\n<ol>\n<li>把theme.js中的 @import “~antd/dist/antd.less”; 注释。</li>\n<li>添加插件vite-plugin-imp按需加载antd</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">return defineConfig(&#123;</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">      vitePluginImp(&#123;</span><br><span class=\"line\">        libList: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            libName: &quot;antd&quot;,</span><br><span class=\"line\">            style: (name) =&gt; `antd/es/$&#123;name&#125;/style/`,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    ],</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>问题4：不支持 ‘:export’</p>\n<p>问题5：Unknown theme type: undefined, name: undefined</p>\n<p><a href=\"https://github.com/ant-design/ant-design/issues/19002\" target=\"_blank\" rel=\"noopener\">https://github.com/ant-design/ant-design/issues/19002</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">return defineConfig(&#123;</span><br><span class=\"line\">  resolve: &#123;</span><br><span class=\"line\">      alias: &#123;</span><br><span class=\"line\">        &apos;@ant-design/icons/lib/dist&apos;: &apos;@ant-design/icons/lib/index.es.js&apos;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">  &#125;, </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-1-4-配置代理\"><a href=\"#3-1-4-配置代理\" class=\"headerlink\" title=\"3.1.4 配置代理\"></a>3.1.4 配置代理</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">return defineConfig(&#123;</span><br><span class=\"line\">\tserver: &#123;</span><br><span class=\"line\">      port: 8888,</span><br><span class=\"line\">      host: &apos;0.0.0.0&apos;,</span><br><span class=\"line\">      proxy: &#123;</span><br><span class=\"line\">        &apos;/api&apos;: &#123;</span><br><span class=\"line\">          target: `https://affiliate.$&#123;environment&#125;.$&#123;BASE_DOMAIN_ALL[country]&#125;/`,</span><br><span class=\"line\">          changeOrigin: true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-1-5-引入入口文件\"><a href=\"#3-1-5-引入入口文件\" class=\"headerlink\" title=\"3.1.5 引入入口文件\"></a>3.1.5 引入入口文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// index.html </span><br><span class=\"line\">&lt;script type=&quot;module&quot; src=&quot;/src/index.tsx&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-1-6-启动时\"><a href=\"#3-1-6-启动时\" class=\"headerlink\" title=\"3.1.6 启动时\"></a>3.1.6 启动时</h3><p>各种408，请求超时 ，可以删除node_modules，重新install</p>\n<h3 id=\"3-1-7-Uncaught-SyntaxError-The-requested-module-‘-global-config-js-t-1647918620356’-does-not-provide-an-export-named-‘default’\"><a href=\"#3-1-7-Uncaught-SyntaxError-The-requested-module-‘-global-config-js-t-1647918620356’-does-not-provide-an-export-named-‘default’\" class=\"headerlink\" title=\"3.1.7 Uncaught SyntaxError: The requested module ‘/global.config.js?t=1647918620356’ does not provide an export named ‘default’\"></a>3.1.7 Uncaught SyntaxError: The requested module ‘/global.config.js?t=1647918620356’ does not provide an export named ‘default’</h3><p>vite不支持cjs，<a href=\"https://github.com/vitejs/vite/issues/3024\" target=\"_blank\" rel=\"noopener\">https://github.com/vitejs/vite/issues/3024</a></p>\n<ol>\n<li>方案一：可以通过预捆绑的方式处理，但那代表着需要捆绑很多个文件</li>\n<li>方案二：把global.config.js中的module.exports改为export default，所有文件的module.exports及require都需要更改</li>\n</ol>\n<h3 id=\"3-1-8-Uncaught-ReferenceError-global-is-not-defined\"><a href=\"#3-1-8-Uncaught-ReferenceError-global-is-not-defined\" class=\"headerlink\" title=\"3.1.8 Uncaught ReferenceError: global is not defined\"></a>3.1.8 Uncaught ReferenceError: global is not defined</h3><p>方案一</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// index.html</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\tglobal = globalThis;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>方案二：缺点是打包时会把同名文件的文件名修改掉</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// vite.config.js </span><br><span class=\"line\">return defineConfig(&#123;</span><br><span class=\"line\">\tdefine: &#123;</span><br><span class=\"line\">      global: JSON.stringify(&#123;&#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-1-9-babel\"><a href=\"#3-1-9-babel\" class=\"headerlink\" title=\"3.1.9 babel\"></a>3.1.9 babel</h3><p>使用插件@vitejs/plugin-react</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// vite.config.js</span><br><span class=\"line\">return defineConfig(&#123;</span><br><span class=\"line\">  plugins: [ </span><br><span class=\"line\">    react(&#123;</span><br><span class=\"line\">      babel: &#123;</span><br><span class=\"line\">        plugins: [],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;), </span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-1-10-未解之谜（后来没有再出现了）\"><a href=\"#3-1-10-未解之谜（后来没有再出现了）\" class=\"headerlink\" title=\"3.1.10 未解之谜（后来没有再出现了）\"></a>3.1.10 未解之谜（后来没有再出现了）</h3><p><a href=\"https://github.com/vitejs/vite/issues/6241\" target=\"_blank\" rel=\"noopener\">https://github.com/vitejs/vite/issues/6241</a></p>\n<p><a href=\"mailto:vite@2.5.10\" target=\"_blank\" rel=\"noopener\">vite@2.5.10</a>没有出现此问题，但评论说还有，所以也暂时不算是解决了。</p>\n<h3 id=\"3-1-11-全局变量\"><a href=\"#3-1-11-全局变量\" class=\"headerlink\" title=\"3.1.11 全局变量\"></a>3.1.11 全局变量</h3><p>define中对应的值是一个常量，需要使用JSON.stringify()来表示是一个常量。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// vite.config.js </span><br><span class=\"line\">const country = env.VITE_COUNTRY;</span><br><span class=\"line\">return defineConfig(&#123;</span><br><span class=\"line\">\tdefine: &#123;</span><br><span class=\"line\">      COUNTRY: JSON.stringify(country)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-1-12-Uncaught-Error-Dynamic-require-of-“-Users-xinweiwang-Desktop-affiliate-web-affiliate-node-modules-mkt-common-component-dist-LazyImage-default-image-svg”-is-not-supported\"><a href=\"#3-1-12-Uncaught-Error-Dynamic-require-of-“-Users-xinweiwang-Desktop-affiliate-web-affiliate-node-modules-mkt-common-component-dist-LazyImage-default-image-svg”-is-not-supported\" class=\"headerlink\" title=\"3.1.12 Uncaught Error: Dynamic require of “/Users/xinweiwang/Desktop/affiliate/web-affiliate/node_modules/@mkt/common-component/dist/LazyImage/default-image.svg” is not supported\"></a>3.1.12 Uncaught Error: Dynamic require of “/Users/xinweiwang/Desktop/affiliate/web-affiliate/node_modules/@mkt/common-component/dist/LazyImage/default-image.svg” is not supported</h3><p>方案一：</p>\n<p>类似问题及解决方案：<a href=\"https://github.com/vitejs/vite/issues/5308\" target=\"_blank\" rel=\"noopener\">https://github.com/vitejs/vite/issues/5308</a></p>\n<p>使用插件@originjs/vite-plugin-commonjs处理了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// vite.config.js </span><br><span class=\"line\">const country = env.VITE_COUNTRY;</span><br><span class=\"line\">return defineConfig(&#123; </span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">      viteCommonjs()</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-1-13-vite-Internal-server-error-Failed-to-resolve-import-“‘-name-‘“-from-“node-modules-vite-react-app-polyfill-stable-js-v-f714c2ed”-Does-the-file-exist\"><a href=\"#3-1-13-vite-Internal-server-error-Failed-to-resolve-import-“‘-name-‘“-from-“node-modules-vite-react-app-polyfill-stable-js-v-f714c2ed”-Does-the-file-exist\" class=\"headerlink\" title=\"3.1.13 [vite] Internal server error: Failed to resolve import “‘ + name + ‘“ from “node_modules/.vite/react-app-polyfill_stable.js?v=f714c2ed”. Does the file exist?\"></a>3.1.13 [vite] Internal server error: Failed to resolve import “‘ + name + ‘“ from “node_modules/.vite/react-app-polyfill_stable.js?v=f714c2ed”. Does the file exist?</h3><p>找到一个<a href=\"https://stackoverflow.com/questions/71572418/how-can-i-migrate-from-create-react-app-to-vite-in-a-scattered-complex-project\" target=\"_blank\" rel=\"noopener\">类似问题</a></p>\n<p>方案：使用@vitejs/plugin-legacy取代react-app-polyfill，具体配置根据实际情况而定。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// vite.config.js </span><br><span class=\"line\">import legacy from &apos;@vitejs/plugin-legacy&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">return defineConfig(&#123; </span><br><span class=\"line\">  plugins: [ </span><br><span class=\"line\">\tlegacy(&#123;</span><br><span class=\"line\">        targets: [&apos;ie &gt;= 11&apos;],</span><br><span class=\"line\">        additionalLegacyPolyfills: [&apos;regenerator-runtime/runtime&apos;]</span><br><span class=\"line\">      &#125;), </span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-1-14-regeneratorRuntime-is-not-defined\"><a href=\"#3-1-14-regeneratorRuntime-is-not-defined\" class=\"headerlink\" title=\"3.1.14 regeneratorRuntime is not defined\"></a>3.1.14 regeneratorRuntime is not defined</h3><p>import “regenerator-runtime”</p>\n<h3 id=\"3-1-15-Uncaught-TypeError-Unknown-theme-type-undefined-name-undefined\"><a href=\"#3-1-15-Uncaught-TypeError-Unknown-theme-type-undefined-name-undefined\" class=\"headerlink\" title=\"3.1.15 Uncaught TypeError: Unknown theme type: undefined, name: undefined\"></a>3.1.15 Uncaught TypeError: Unknown theme type: undefined, name: undefined</h3><p>解决方案：<a href=\"https://github.com/ant-design/ant-design/issues/19002#issuecomment-965958565\" target=\"_blank\" rel=\"noopener\">https://github.com/ant-design/ant-design/issues/19002#issuecomment-965958565</a></p>\n<h2 id=\"3-2-打包\"><a href=\"#3-2-打包\" class=\"headerlink\" title=\"3.2 打包\"></a>3.2 打包</h2><h3 id=\"3-2-1-重名问题\"><a href=\"#3-2-1-重名问题\" class=\"headerlink\" title=\"3.2.1 重名问题\"></a>3.2.1 重名问题</h3><p>打包时不允许有重名现象，即使一个是类型名，一个是变量名，会报 Identifier ‘xxx’ has already been declared.</p>\n<p>有两处地方存在此问题：</p>\n<ol>\n<li>/src/components/Payment/BillingDetail/PaymentDetail/index.tsx：PaymentConfirmation</li>\n<li>/src/components/Payment/Setting/ZipCodeAddress/index.tsx：ZipCodeAddress</li>\n</ol>\n<h3 id=\"3-2-2-压缩后大于500k的文件\"><a href=\"#3-2-2-压缩后大于500k的文件\" class=\"headerlink\" title=\"3.2.2 压缩后大于500k的文件\"></a>3.2.2 压缩后大于500k的文件</h3><p>与业务相关，需要优化具体模块</p>\n<h2 id=\"3-3-打包后预览\"><a href=\"#3-3-打包后预览\" class=\"headerlink\" title=\"3.3 打包后预览\"></a>3.3 打包后预览</h2><h3 id=\"3-3-1-Uncaught-TypeError-Failed-to-resolve-module-specifier-“indexof”-Relative-references-must-start-with-either-“-“-“-“-or-“-“\"><a href=\"#3-3-1-Uncaught-TypeError-Failed-to-resolve-module-specifier-“indexof”-Relative-references-must-start-with-either-“-“-“-“-or-“-“\" class=\"headerlink\" title=\"3.3.1 Uncaught TypeError: Failed to resolve module specifier “indexof”. Relative references must start with either “/“, “./“, or “../“.\"></a>3.3.1 Uncaught TypeError: Failed to resolve module specifier “indexof”. Relative references must start with either “/“, “./“, or “../“.</h3><p>解决方案：<a href=\"https://github.com/vitejs/vite/issues/2670#issuecomment-905495115\" target=\"_blank\" rel=\"noopener\">https://github.com/vitejs/vite/issues/2670#issuecomment-905495115</a></p>\n<h3 id=\"3-3-2-Uncaught-ReferenceError-require-is-not-defined\"><a href=\"#3-3-2-Uncaught-ReferenceError-require-is-not-defined\" class=\"headerlink\" title=\"3.3.2 Uncaught ReferenceError: require is not defined\"></a>3.3.2 Uncaught ReferenceError: require is not defined</h3><p>// vite.config.js </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">return defineConfig(&#123; </span><br><span class=\"line\">  build: &#123;</span><br><span class=\"line\">    commonjsOptions: &#123;</span><br><span class=\"line\">      transformMixedEsModules: true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-3-3-Uncaught-ReferenceError-exports-is-not-defined\"><a href=\"#3-3-3-Uncaught-ReferenceError-exports-is-not-defined\" class=\"headerlink\" title=\"3.3.3 Uncaught ReferenceError: exports is not defined\"></a>3.3.3 Uncaught ReferenceError: exports is not defined</h3><p>未解决：<a href=\"https://github.com/rollup/plugins/issues/1014\" target=\"_blank\" rel=\"noopener\">https://github.com/rollup/plugins/issues/1014</a></p>\n<p>临时解决方案：<a href=\"https://github.com/rollup/plugins/issues/1014#issuecomment-1049512712\" target=\"_blank\" rel=\"noopener\">https://github.com/rollup/plugins/issues/1014#issuecomment-1049512712</a></p>\n<h2 id=\"3-4-Jenkins部署\"><a href=\"#3-4-Jenkins部署\" class=\"headerlink\" title=\"3.4 Jenkins部署\"></a>3.4 Jenkins部署</h2><h2 id=\"3-5-业务相关\"><a href=\"#3-5-业务相关\" class=\"headerlink\" title=\"3.5 业务相关\"></a>3.5 业务相关</h2><p>以下是业务相关的补充，由于不影响编译打包等，所以并不保证是包含全部的。</p>\n<h3 id=\"3-5-1-svg\"><a href=\"#3-5-1-svg\" class=\"headerlink\" title=\"3.5.1 svg\"></a>3.5.1 svg</h3><p>使用插件<a href=\"https://github.com/vbenjs/vite-plugin-svg-icons\" target=\"_blank\" rel=\"noopener\">vite-plugin-svg-icons</a>生成svg sprite map</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// vite.config.js </span><br><span class=\"line\">import &#123; createSvgIconsPlugin &#125; from &apos;vite-plugin-svg-icons&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">return defineConfig(&#123; </span><br><span class=\"line\">  plugins: [  </span><br><span class=\"line\">    createSvgIconsPlugin(&#123;</span><br><span class=\"line\">      iconDirs: [</span><br><span class=\"line\">\t\tpath.resolve(process.cwd(), &apos;src/assets/icons&apos;),</span><br><span class=\"line\">\t\tpath.resolve(process.cwd(), &apos;src/assets/svg&apos;)</span><br><span class=\"line\">\t  ],</span><br><span class=\"line\">\t  symbolId: &apos;[name]&apos;</span><br><span class=\"line\">    &#125;) </span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">// src/index.tsx</span><br><span class=\"line\">import &apos;virtual:svg-icons-register&apos;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-5-2-其余基于webpack的插件\"><a href=\"#3-5-2-其余基于webpack的插件\" class=\"headerlink\" title=\"3.5.2 其余基于webpack的插件\"></a>3.5.2 其余基于webpack的插件</h3><p><a href=\"https://github.com/vitejs/awesome-vite#plugins\" target=\"_blank\" rel=\"noopener\">vite插件合集</a></p>\n<table>\n<thead>\n<tr>\n<th>webpack插件</th>\n<th>类似的vite插</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>svg-sprite-loader</td>\n<td>vite-plugin-svg-icons</td>\n</tr>\n<tr>\n<td>workbox-webpack-plugin</td>\n<td>vite-plugin-pwa</td>\n</tr>\n<tr>\n<td>realtime-translation-webpack-plugin</td>\n<td></td>\n</tr>\n<tr>\n<td>babel-plugin-istanbul-shopee</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"3-5-3-业务相关报错\"><a href=\"#3-5-3-业务相关报错\" class=\"headerlink\" title=\"3.5.3 业务相关报错\"></a>3.5.3 业务相关报错</h3><p>Uncaught (in promise) ReferenceError: require is not defined：类似的require都需要修改</p>\n<p>如 src/components/common/Empty</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 原来的写法</span><br><span class=\"line\">&lt;img src=&#123;require(&apos;@/assets/images/empty.png&apos;)&#125;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// 改为</span><br><span class=\"line\">&lt;img src=&#123;new URL(&apos;../../../assets/images/empty.png&apos;, import.meta.url).href&#125;/&gt;</span><br></pre></td></tr></table></figure>\n<p>如 src/translate/index.ts</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 原来的写法</span><br><span class=\"line\">const message = require(&apos;./messages/&apos; + language + &apos;.json&apos;);</span><br><span class=\"line\">result[language] = regExpEditLanguage(message);</span><br><span class=\"line\"></span><br><span class=\"line\">// 改为</span><br><span class=\"line\">const messages = import.meta.globEager(&apos;./messages/*.json&apos;);</span><br><span class=\"line\">const path = `./messages/$&#123;language&#125;.json`;</span><br><span class=\"line\">result[language] = regExpEditLanguage(messages[path]);</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-调研结果\"><a href=\"#4-调研结果\" class=\"headerlink\" title=\"4.调研结果\"></a>4.调研结果</h1><h2 id=\"4-1-原理\"><a href=\"#4-1-原理\" class=\"headerlink\" title=\"4.1 原理\"></a>4.1 原理</h2><p>官网有给出与传统打包工具的对比</p>\n<h2 id=\"4-2-Webpack-vs-Vite\"><a href=\"#4-2-Webpack-vs-Vite\" class=\"headerlink\" title=\"4.2 Webpack vs Vite\"></a>4.2 Webpack vs Vite</h2><table>\n<thead>\n<tr>\n<th>action</th>\n<th>webpack</th>\n<th>vite</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>首次启动</td>\n<td>90s~120s</td>\n<td>0.4s ~ 1s</td>\n</tr>\n<tr>\n<td>首次首屏</td>\n<td>很快</td>\n<td>约40s</td>\n</tr>\n<tr>\n<td>第二次启动首屏</td>\n<td>很快</td>\n<td>约9s</td>\n</tr>\n<tr>\n<td>HMR</td>\n<td>8s～10s</td>\n<td>0.05s ～ 0.2s</td>\n</tr>\n<tr>\n<td>打包构建</td>\n<td>2min~3min</td>\n<td>2min ~ 3min</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>vite的启动比webpack快很多，但首次启动的首屏展示并不快，该加载的包还是要等加载完才展示。</li>\n<li>第二次启动时，vite由于缓存，首屏展示速度变快。</li>\n<li>官方表示，Vite HMR 更新反映到浏览器的时间小于 50ms。</li>\n<li>两者打包速度差不多。</li>\n</ul>\n<h1 id=\"5-结论\"><a href=\"#5-结论\" class=\"headerlink\" title=\"5.结论\"></a>5.结论</h1><ul>\n<li>在开发上，特别是启动项目时，速度是有一定提升的。</li>\n<li>vite还不算很成熟，有很多隐藏问题，甚至有一些问题无法从根本解决，如3.1.10。</li>\n<li>并不是所有webpack插件都有对应的vite插件，自定义的更是需要重写，工作量也许很大。</li>\n<li>一个庞大的项目，从webpack迁移vite，工作量很大，业务代码也有需要兼容的，例如各种require</li>\n</ul>\n"},{"title":"whistle插件：whistle.script","date":"2021-02-19T16:00:00.000Z","comments":1,"_content":"\n### whistle.script\nwhistle.script为whistle的一个扩展脚本插件，可以直接在界面上引用全局安装的Node模块及Node的内容模块编写脚本操作请求及其响应，所有正常Node程序可以实现的功能，都可以通过该插件实现，包括：\n\n1. HTTP[s]:\n    - 动态设置whistle规则\n    - 拦截请求响应\n    - 控制请求响应速度\n    - 修改请求url、请求方法、请求头、请求内容\n    - 修改响应状态码、响应头、响应内容\n    - 在插件界面的Console上显示脚本程序 console.xxx 的内容，如果可以打印响应的内容或调试信息等\n2. WebSocket:\n    - 动态设置whistle规则\n    - 拦截请求响应\n    - 修改发送或收到的数据\n    - 直接向WebSocket客户端或服务端发送数据\n    - 在插件界面的Console上显示脚本程序 console.xxx 的内容，如果可以打印发送和接收到的数据或调试信息等，从而通过该插件可以直接查看WebSocket的数据\n3. Tunnel: 基本功能同WebSocket，可以用来直接操作Socket请求，如Protobuf协议的请求等\n\n### 安装\n\n```\nnpm install -g whistle.script\n# Mac、Linux用户可能需要加sudo\nsudo npm install -g whistle.script\n```\n安装插件后要重启whistle才可以打开插件，否则unknown\n\n### 使用\n打开script插件的界面，创建一个名字为 test 的脚本:\n- 可以通过 Plugins->Home->script打开或右键并选择 在新标签页中打开\n- 或者直接访问 http://local.whistlejs.com/plugin.script\n\n#### 设置规则\n1. 设置HTTP或HTTPs请求的whistle规则(操作HTTPs需要开启HTTPs拦截)\n\n在界面中的test 脚本输入\n\n```\n exports.handleRequestRules = (ctx) => {\n \t// ctx.fullUrl 可以获取请求url\n \t// ctx.headers 可以获取请求头\n \t// ctx.options 里面包含一些特殊的请求头字段，分别可以获取一些额外信息，如请求方法、设置的规则等\n \tctx.rules = ['www.qq.com file://{test.html}'];\n  \tctx.values = { 'test.html': 'Hello world.' };\n };\n```\n如果里面包含一些异步方法可以采用generator函数或async函数，即：exports.handleRequestRules = function* (ctx) {} 或 exports.handleRequestRules = async () => {}\n\n在whistle的Rules配置界面上输入规则:\n\n```\nwhistle.script://test www.ifeng.com www.qq.com www.baidu.com echo.websocket.org\n```\n\n如果需要通过配置给脚本传递一些额外参数，可以如下配置(注意中间不能有空格):\n\n```\nwhistle.script://test(a,b,c) www.ifeng.com www.qq.com www.baidu.com echo.websocket.org\n```\n\n可以在脚本中通过 process.args 获取:\n\n```\nexports.handleRequestRules = (ctx) => {\n   console.log(process.args); // output: [\"a\", \"b\", \"c\"]\n   ctx.rules = ['www.qq.com file://{test.html}'];\n   ctx.values = { 'test.html': 'Hello world.' };\n };\n```\n\n2. 设置WebSocket请求的规则(需要开启HTTPs拦截):\n\n```\nexports.handleWebSocketRules = (ctx) => {\n   // ctx.fullUrl 可以获取请求url\n   // ctx.headers 可以获取请求头\n   // ctx.options 里面包含一些特殊的请求头字段，分别可以获取一些额外信息，如请求方法、设置的规则等\n   this.rules = '127.0.0.1 echo.websocket.org';\n };\n```\n\n接下来的操作同上。\n\n3. 设置Tunnel请求的规则(要测试可以暂时关闭HTTPs拦截):\n\n```\nexports.handleTunnel = (ctx) => {\n   // ctx.fullUrl 可以获取请求url\n   // ctx.headers 可以获取请求头\n   // ctx.options 里面包含一些特殊的请求头字段，分别可以获取一些额外信息，如请求方法、设置的规则等\n   this.rules = '127.0.0.1 www.baidu.com';\n };\n```\n\n接下来的操作同上。\n\n#### 操作请求\n1. 操作HTTP或HTTPs请求(操作HTTPs需要开启HTTPs拦截)\n\n```\nexports.handleRequest = function* (ctx, next) {\n   // ctx.fullUrl 可以获取请求url\n   // ctx.headers 可以获取请求头\n   // ctx.options 里面包含一些特殊的请求头字段，分别可以获取一些额外信息，如请设置的规则等\n   // ctx.method 获取和设置请求方法\n   // const reqBody = yield ctx.getReqBody(); 获取请求body的Buffer数据，如果没有数据返回null\n   // const reqText = yield ctx.getReqText();  获取请求body的文本，如果没有返回''\n   // const formData = yield ctx.getReqForm(); 获取表单对象，如果不是表单，返回空对象{}\n   // console.log(ctx.method, ctx.headers, reqBody);\n   // ctx.req.body = String| Buffer | Stream | null，修改请求的内容\n   // 只有执行next方法后才可以把正常的请求发送出去\n   // 如果需要自定义请求，可以通过全局的request方法操作\n   // console.log(request);\n   // next方法可以设置next({ host, port });\n   const { statusCode, headers } = yield next(); \n   console.log(ctx.fullUrl, statusCode, headers);\n   // const resBody = yield ctx.getResBody();\n   // const resText = yield ctx.getResText();\n   // ctx.status = 404; 修改响应状态码\n   // ctx.set(headers); 批量修改响应头\n   // ctx.set('x-test', 'abc'); 修改响应头\n   // ctx.body = String| Buffer | Stream | null; 修改响应内容\n };\n \n // 如果Node >= 7.6，可以采用async await的方式\n exports.handleRequest = async (ctx, next) => {\n   // do sth\n   // next方法可以设置next({ host, port });\n   const { statusCode, headers } = await next(); \n   // do sth\n };\n```\n\n在whistle的Rules配置界面上输入规则:\n\n```\n# 这里不能用whistle.script，否则请求不会转发到handleRequest\n# whistle.script只会执行handleXxxRules\n# 你也可以通过在handleXxxRules里面设置 script://test(a,b,c)，实现转发\n\nscript://test www.ifeng.com www.qq.com www.baidu.com echo.websocket.org\n```\n\n需要在配置中带上参数，可以参考上面的规则设置\n\n2. 操作WebSocket请求(需要开启HTTPs拦截)\n\n```\n// Node < 7.6可以改用genrator和yield\n exports.handleWebSocket = async (req, connect) => {\n  // connect方法可以设置connect({ host, port });\n  const res = await connect();\n  res.on('message', (data) => {\n    console.log('Received: ', data);\n    req.send(data);\n  });\n  req.on('message', (data) => {\n    console.log('Sent: ', data);\n    res.send(data);\n  });\n };\n```\n\nwhistle规则配置同上\n\n3. 操作Tunnel请求\n\n```\n// Node >= 7.6可以改用async和await\n exports.handleTunnel = function* (req, connect) {\n  // connect方法可以设置connect({ host, port });\n  const res = yield connect();\n  req.pipe(res).pipe(req);\n  // 也可以参考上面操作WebSocket，自己监听data和write方法处理，这样就可以直接修改和打印内容\n };\n```\n\nwhistle规则配置同上\n\n### 参考链接\n[whistle.script](https://github.com/whistle-plugins/whistle.script)","source":"_posts/前端/whistle插件：whistle.script.md","raw":"---\ntitle: whistle插件：whistle.script\ndate: 2021-02-20\ntags: [前端]\ncategories: 前端\ncomments: true\n---\n\n### whistle.script\nwhistle.script为whistle的一个扩展脚本插件，可以直接在界面上引用全局安装的Node模块及Node的内容模块编写脚本操作请求及其响应，所有正常Node程序可以实现的功能，都可以通过该插件实现，包括：\n\n1. HTTP[s]:\n    - 动态设置whistle规则\n    - 拦截请求响应\n    - 控制请求响应速度\n    - 修改请求url、请求方法、请求头、请求内容\n    - 修改响应状态码、响应头、响应内容\n    - 在插件界面的Console上显示脚本程序 console.xxx 的内容，如果可以打印响应的内容或调试信息等\n2. WebSocket:\n    - 动态设置whistle规则\n    - 拦截请求响应\n    - 修改发送或收到的数据\n    - 直接向WebSocket客户端或服务端发送数据\n    - 在插件界面的Console上显示脚本程序 console.xxx 的内容，如果可以打印发送和接收到的数据或调试信息等，从而通过该插件可以直接查看WebSocket的数据\n3. Tunnel: 基本功能同WebSocket，可以用来直接操作Socket请求，如Protobuf协议的请求等\n\n### 安装\n\n```\nnpm install -g whistle.script\n# Mac、Linux用户可能需要加sudo\nsudo npm install -g whistle.script\n```\n安装插件后要重启whistle才可以打开插件，否则unknown\n\n### 使用\n打开script插件的界面，创建一个名字为 test 的脚本:\n- 可以通过 Plugins->Home->script打开或右键并选择 在新标签页中打开\n- 或者直接访问 http://local.whistlejs.com/plugin.script\n\n#### 设置规则\n1. 设置HTTP或HTTPs请求的whistle规则(操作HTTPs需要开启HTTPs拦截)\n\n在界面中的test 脚本输入\n\n```\n exports.handleRequestRules = (ctx) => {\n \t// ctx.fullUrl 可以获取请求url\n \t// ctx.headers 可以获取请求头\n \t// ctx.options 里面包含一些特殊的请求头字段，分别可以获取一些额外信息，如请求方法、设置的规则等\n \tctx.rules = ['www.qq.com file://{test.html}'];\n  \tctx.values = { 'test.html': 'Hello world.' };\n };\n```\n如果里面包含一些异步方法可以采用generator函数或async函数，即：exports.handleRequestRules = function* (ctx) {} 或 exports.handleRequestRules = async () => {}\n\n在whistle的Rules配置界面上输入规则:\n\n```\nwhistle.script://test www.ifeng.com www.qq.com www.baidu.com echo.websocket.org\n```\n\n如果需要通过配置给脚本传递一些额外参数，可以如下配置(注意中间不能有空格):\n\n```\nwhistle.script://test(a,b,c) www.ifeng.com www.qq.com www.baidu.com echo.websocket.org\n```\n\n可以在脚本中通过 process.args 获取:\n\n```\nexports.handleRequestRules = (ctx) => {\n   console.log(process.args); // output: [\"a\", \"b\", \"c\"]\n   ctx.rules = ['www.qq.com file://{test.html}'];\n   ctx.values = { 'test.html': 'Hello world.' };\n };\n```\n\n2. 设置WebSocket请求的规则(需要开启HTTPs拦截):\n\n```\nexports.handleWebSocketRules = (ctx) => {\n   // ctx.fullUrl 可以获取请求url\n   // ctx.headers 可以获取请求头\n   // ctx.options 里面包含一些特殊的请求头字段，分别可以获取一些额外信息，如请求方法、设置的规则等\n   this.rules = '127.0.0.1 echo.websocket.org';\n };\n```\n\n接下来的操作同上。\n\n3. 设置Tunnel请求的规则(要测试可以暂时关闭HTTPs拦截):\n\n```\nexports.handleTunnel = (ctx) => {\n   // ctx.fullUrl 可以获取请求url\n   // ctx.headers 可以获取请求头\n   // ctx.options 里面包含一些特殊的请求头字段，分别可以获取一些额外信息，如请求方法、设置的规则等\n   this.rules = '127.0.0.1 www.baidu.com';\n };\n```\n\n接下来的操作同上。\n\n#### 操作请求\n1. 操作HTTP或HTTPs请求(操作HTTPs需要开启HTTPs拦截)\n\n```\nexports.handleRequest = function* (ctx, next) {\n   // ctx.fullUrl 可以获取请求url\n   // ctx.headers 可以获取请求头\n   // ctx.options 里面包含一些特殊的请求头字段，分别可以获取一些额外信息，如请设置的规则等\n   // ctx.method 获取和设置请求方法\n   // const reqBody = yield ctx.getReqBody(); 获取请求body的Buffer数据，如果没有数据返回null\n   // const reqText = yield ctx.getReqText();  获取请求body的文本，如果没有返回''\n   // const formData = yield ctx.getReqForm(); 获取表单对象，如果不是表单，返回空对象{}\n   // console.log(ctx.method, ctx.headers, reqBody);\n   // ctx.req.body = String| Buffer | Stream | null，修改请求的内容\n   // 只有执行next方法后才可以把正常的请求发送出去\n   // 如果需要自定义请求，可以通过全局的request方法操作\n   // console.log(request);\n   // next方法可以设置next({ host, port });\n   const { statusCode, headers } = yield next(); \n   console.log(ctx.fullUrl, statusCode, headers);\n   // const resBody = yield ctx.getResBody();\n   // const resText = yield ctx.getResText();\n   // ctx.status = 404; 修改响应状态码\n   // ctx.set(headers); 批量修改响应头\n   // ctx.set('x-test', 'abc'); 修改响应头\n   // ctx.body = String| Buffer | Stream | null; 修改响应内容\n };\n \n // 如果Node >= 7.6，可以采用async await的方式\n exports.handleRequest = async (ctx, next) => {\n   // do sth\n   // next方法可以设置next({ host, port });\n   const { statusCode, headers } = await next(); \n   // do sth\n };\n```\n\n在whistle的Rules配置界面上输入规则:\n\n```\n# 这里不能用whistle.script，否则请求不会转发到handleRequest\n# whistle.script只会执行handleXxxRules\n# 你也可以通过在handleXxxRules里面设置 script://test(a,b,c)，实现转发\n\nscript://test www.ifeng.com www.qq.com www.baidu.com echo.websocket.org\n```\n\n需要在配置中带上参数，可以参考上面的规则设置\n\n2. 操作WebSocket请求(需要开启HTTPs拦截)\n\n```\n// Node < 7.6可以改用genrator和yield\n exports.handleWebSocket = async (req, connect) => {\n  // connect方法可以设置connect({ host, port });\n  const res = await connect();\n  res.on('message', (data) => {\n    console.log('Received: ', data);\n    req.send(data);\n  });\n  req.on('message', (data) => {\n    console.log('Sent: ', data);\n    res.send(data);\n  });\n };\n```\n\nwhistle规则配置同上\n\n3. 操作Tunnel请求\n\n```\n// Node >= 7.6可以改用async和await\n exports.handleTunnel = function* (req, connect) {\n  // connect方法可以设置connect({ host, port });\n  const res = yield connect();\n  req.pipe(res).pipe(req);\n  // 也可以参考上面操作WebSocket，自己监听data和write方法处理，这样就可以直接修改和打印内容\n };\n```\n\nwhistle规则配置同上\n\n### 参考链接\n[whistle.script](https://github.com/whistle-plugins/whistle.script)","slug":"前端/whistle插件：whistle.script","published":1,"updated":"2022-07-22T10:11:37.131Z","layout":"post","photos":[],"link":"","_id":"cl5wb2yn200cfcj38s4frgqle","content":"<h3 id=\"whistle-script\"><a href=\"#whistle-script\" class=\"headerlink\" title=\"whistle.script\"></a>whistle.script</h3><p>whistle.script为whistle的一个扩展脚本插件，可以直接在界面上引用全局安装的Node模块及Node的内容模块编写脚本操作请求及其响应，所有正常Node程序可以实现的功能，都可以通过该插件实现，包括：</p>\n<ol>\n<li>HTTP[s]:<ul>\n<li>动态设置whistle规则</li>\n<li>拦截请求响应</li>\n<li>控制请求响应速度</li>\n<li>修改请求url、请求方法、请求头、请求内容</li>\n<li>修改响应状态码、响应头、响应内容</li>\n<li>在插件界面的Console上显示脚本程序 console.xxx 的内容，如果可以打印响应的内容或调试信息等</li>\n</ul>\n</li>\n<li>WebSocket:<ul>\n<li>动态设置whistle规则</li>\n<li>拦截请求响应</li>\n<li>修改发送或收到的数据</li>\n<li>直接向WebSocket客户端或服务端发送数据</li>\n<li>在插件界面的Console上显示脚本程序 console.xxx 的内容，如果可以打印发送和接收到的数据或调试信息等，从而通过该插件可以直接查看WebSocket的数据</li>\n</ul>\n</li>\n<li>Tunnel: 基本功能同WebSocket，可以用来直接操作Socket请求，如Protobuf协议的请求等</li>\n</ol>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g whistle.script</span><br><span class=\"line\"># Mac、Linux用户可能需要加sudo</span><br><span class=\"line\">sudo npm install -g whistle.script</span><br></pre></td></tr></table></figure>\n<p>安装插件后要重启whistle才可以打开插件，否则unknown</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>打开script插件的界面，创建一个名字为 test 的脚本:</p>\n<ul>\n<li>可以通过 Plugins-&gt;Home-&gt;script打开或右键并选择 在新标签页中打开</li>\n<li>或者直接访问 <a href=\"http://local.whistlejs.com/plugin.script\" target=\"_blank\" rel=\"noopener\">http://local.whistlejs.com/plugin.script</a></li>\n</ul>\n<h4 id=\"设置规则\"><a href=\"#设置规则\" class=\"headerlink\" title=\"设置规则\"></a>设置规则</h4><ol>\n<li>设置HTTP或HTTPs请求的whistle规则(操作HTTPs需要开启HTTPs拦截)</li>\n</ol>\n<p>在界面中的test 脚本输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.handleRequestRules = (ctx) =&gt; &#123;</span><br><span class=\"line\">\t// ctx.fullUrl 可以获取请求url</span><br><span class=\"line\">\t// ctx.headers 可以获取请求头</span><br><span class=\"line\">\t// ctx.options 里面包含一些特殊的请求头字段，分别可以获取一些额外信息，如请求方法、设置的规则等</span><br><span class=\"line\">\tctx.rules = [&apos;www.qq.com file://&#123;test.html&#125;&apos;];</span><br><span class=\"line\"> \tctx.values = &#123; &apos;test.html&apos;: &apos;Hello world.&apos; &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>如果里面包含一些异步方法可以采用generator函数或async函数，即：exports.handleRequestRules = function* (ctx) {} 或 exports.handleRequestRules = async () =&gt; {}</p>\n<p>在whistle的Rules配置界面上输入规则:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">whistle.script://test www.ifeng.com www.qq.com www.baidu.com echo.websocket.org</span><br></pre></td></tr></table></figure>\n<p>如果需要通过配置给脚本传递一些额外参数，可以如下配置(注意中间不能有空格):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">whistle.script://test(a,b,c) www.ifeng.com www.qq.com www.baidu.com echo.websocket.org</span><br></pre></td></tr></table></figure>\n<p>可以在脚本中通过 process.args 获取:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.handleRequestRules = (ctx) =&gt; &#123;</span><br><span class=\"line\">   console.log(process.args); // output: [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span><br><span class=\"line\">   ctx.rules = [&apos;www.qq.com file://&#123;test.html&#125;&apos;];</span><br><span class=\"line\">   ctx.values = &#123; &apos;test.html&apos;: &apos;Hello world.&apos; &#125;;</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>设置WebSocket请求的规则(需要开启HTTPs拦截):</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.handleWebSocketRules = (ctx) =&gt; &#123;</span><br><span class=\"line\">   // ctx.fullUrl 可以获取请求url</span><br><span class=\"line\">   // ctx.headers 可以获取请求头</span><br><span class=\"line\">   // ctx.options 里面包含一些特殊的请求头字段，分别可以获取一些额外信息，如请求方法、设置的规则等</span><br><span class=\"line\">   this.rules = &apos;127.0.0.1 echo.websocket.org&apos;;</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n<p>接下来的操作同上。</p>\n<ol start=\"3\">\n<li>设置Tunnel请求的规则(要测试可以暂时关闭HTTPs拦截):</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.handleTunnel = (ctx) =&gt; &#123;</span><br><span class=\"line\">   // ctx.fullUrl 可以获取请求url</span><br><span class=\"line\">   // ctx.headers 可以获取请求头</span><br><span class=\"line\">   // ctx.options 里面包含一些特殊的请求头字段，分别可以获取一些额外信息，如请求方法、设置的规则等</span><br><span class=\"line\">   this.rules = &apos;127.0.0.1 www.baidu.com&apos;;</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n<p>接下来的操作同上。</p>\n<h4 id=\"操作请求\"><a href=\"#操作请求\" class=\"headerlink\" title=\"操作请求\"></a>操作请求</h4><ol>\n<li>操作HTTP或HTTPs请求(操作HTTPs需要开启HTTPs拦截)</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.handleRequest = function* (ctx, next) &#123;</span><br><span class=\"line\">   // ctx.fullUrl 可以获取请求url</span><br><span class=\"line\">   // ctx.headers 可以获取请求头</span><br><span class=\"line\">   // ctx.options 里面包含一些特殊的请求头字段，分别可以获取一些额外信息，如请设置的规则等</span><br><span class=\"line\">   // ctx.method 获取和设置请求方法</span><br><span class=\"line\">   // const reqBody = yield ctx.getReqBody(); 获取请求body的Buffer数据，如果没有数据返回null</span><br><span class=\"line\">   // const reqText = yield ctx.getReqText();  获取请求body的文本，如果没有返回&apos;&apos;</span><br><span class=\"line\">   // const formData = yield ctx.getReqForm(); 获取表单对象，如果不是表单，返回空对象&#123;&#125;</span><br><span class=\"line\">   // console.log(ctx.method, ctx.headers, reqBody);</span><br><span class=\"line\">   // ctx.req.body = String| Buffer | Stream | null，修改请求的内容</span><br><span class=\"line\">   // 只有执行next方法后才可以把正常的请求发送出去</span><br><span class=\"line\">   // 如果需要自定义请求，可以通过全局的request方法操作</span><br><span class=\"line\">   // console.log(request);</span><br><span class=\"line\">   // next方法可以设置next(&#123; host, port &#125;);</span><br><span class=\"line\">   const &#123; statusCode, headers &#125; = yield next(); </span><br><span class=\"line\">   console.log(ctx.fullUrl, statusCode, headers);</span><br><span class=\"line\">   // const resBody = yield ctx.getResBody();</span><br><span class=\"line\">   // const resText = yield ctx.getResText();</span><br><span class=\"line\">   // ctx.status = 404; 修改响应状态码</span><br><span class=\"line\">   // ctx.set(headers); 批量修改响应头</span><br><span class=\"line\">   // ctx.set(&apos;x-test&apos;, &apos;abc&apos;); 修改响应头</span><br><span class=\"line\">   // ctx.body = String| Buffer | Stream | null; 修改响应内容</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"> // 如果Node &gt;= 7.6，可以采用async await的方式</span><br><span class=\"line\"> exports.handleRequest = async (ctx, next) =&gt; &#123;</span><br><span class=\"line\">   // do sth</span><br><span class=\"line\">   // next方法可以设置next(&#123; host, port &#125;);</span><br><span class=\"line\">   const &#123; statusCode, headers &#125; = await next(); </span><br><span class=\"line\">   // do sth</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n<p>在whistle的Rules配置界面上输入规则:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 这里不能用whistle.script，否则请求不会转发到handleRequest</span><br><span class=\"line\"># whistle.script只会执行handleXxxRules</span><br><span class=\"line\"># 你也可以通过在handleXxxRules里面设置 script://test(a,b,c)，实现转发</span><br><span class=\"line\"></span><br><span class=\"line\">script://test www.ifeng.com www.qq.com www.baidu.com echo.websocket.org</span><br></pre></td></tr></table></figure>\n<p>需要在配置中带上参数，可以参考上面的规则设置</p>\n<ol start=\"2\">\n<li>操作WebSocket请求(需要开启HTTPs拦截)</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Node &lt; 7.6可以改用genrator和yield</span><br><span class=\"line\"> exports.handleWebSocket = async (req, connect) =&gt; &#123;</span><br><span class=\"line\">  // connect方法可以设置connect(&#123; host, port &#125;);</span><br><span class=\"line\">  const res = await connect();</span><br><span class=\"line\">  res.on(&apos;message&apos;, (data) =&gt; &#123;</span><br><span class=\"line\">    console.log(&apos;Received: &apos;, data);</span><br><span class=\"line\">    req.send(data);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  req.on(&apos;message&apos;, (data) =&gt; &#123;</span><br><span class=\"line\">    console.log(&apos;Sent: &apos;, data);</span><br><span class=\"line\">    res.send(data);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n<p>whistle规则配置同上</p>\n<ol start=\"3\">\n<li>操作Tunnel请求</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Node &gt;= 7.6可以改用async和await</span><br><span class=\"line\"> exports.handleTunnel = function* (req, connect) &#123;</span><br><span class=\"line\">  // connect方法可以设置connect(&#123; host, port &#125;);</span><br><span class=\"line\">  const res = yield connect();</span><br><span class=\"line\">  req.pipe(res).pipe(req);</span><br><span class=\"line\">  // 也可以参考上面操作WebSocket，自己监听data和write方法处理，这样就可以直接修改和打印内容</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n<p>whistle规则配置同上</p>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"https://github.com/whistle-plugins/whistle.script\" target=\"_blank\" rel=\"noopener\">whistle.script</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"whistle-script\"><a href=\"#whistle-script\" class=\"headerlink\" title=\"whistle.script\"></a>whistle.script</h3><p>whistle.script为whistle的一个扩展脚本插件，可以直接在界面上引用全局安装的Node模块及Node的内容模块编写脚本操作请求及其响应，所有正常Node程序可以实现的功能，都可以通过该插件实现，包括：</p>\n<ol>\n<li>HTTP[s]:<ul>\n<li>动态设置whistle规则</li>\n<li>拦截请求响应</li>\n<li>控制请求响应速度</li>\n<li>修改请求url、请求方法、请求头、请求内容</li>\n<li>修改响应状态码、响应头、响应内容</li>\n<li>在插件界面的Console上显示脚本程序 console.xxx 的内容，如果可以打印响应的内容或调试信息等</li>\n</ul>\n</li>\n<li>WebSocket:<ul>\n<li>动态设置whistle规则</li>\n<li>拦截请求响应</li>\n<li>修改发送或收到的数据</li>\n<li>直接向WebSocket客户端或服务端发送数据</li>\n<li>在插件界面的Console上显示脚本程序 console.xxx 的内容，如果可以打印发送和接收到的数据或调试信息等，从而通过该插件可以直接查看WebSocket的数据</li>\n</ul>\n</li>\n<li>Tunnel: 基本功能同WebSocket，可以用来直接操作Socket请求，如Protobuf协议的请求等</li>\n</ol>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g whistle.script</span><br><span class=\"line\"># Mac、Linux用户可能需要加sudo</span><br><span class=\"line\">sudo npm install -g whistle.script</span><br></pre></td></tr></table></figure>\n<p>安装插件后要重启whistle才可以打开插件，否则unknown</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>打开script插件的界面，创建一个名字为 test 的脚本:</p>\n<ul>\n<li>可以通过 Plugins-&gt;Home-&gt;script打开或右键并选择 在新标签页中打开</li>\n<li>或者直接访问 <a href=\"http://local.whistlejs.com/plugin.script\" target=\"_blank\" rel=\"noopener\">http://local.whistlejs.com/plugin.script</a></li>\n</ul>\n<h4 id=\"设置规则\"><a href=\"#设置规则\" class=\"headerlink\" title=\"设置规则\"></a>设置规则</h4><ol>\n<li>设置HTTP或HTTPs请求的whistle规则(操作HTTPs需要开启HTTPs拦截)</li>\n</ol>\n<p>在界面中的test 脚本输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.handleRequestRules = (ctx) =&gt; &#123;</span><br><span class=\"line\">\t// ctx.fullUrl 可以获取请求url</span><br><span class=\"line\">\t// ctx.headers 可以获取请求头</span><br><span class=\"line\">\t// ctx.options 里面包含一些特殊的请求头字段，分别可以获取一些额外信息，如请求方法、设置的规则等</span><br><span class=\"line\">\tctx.rules = [&apos;www.qq.com file://&#123;test.html&#125;&apos;];</span><br><span class=\"line\"> \tctx.values = &#123; &apos;test.html&apos;: &apos;Hello world.&apos; &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>如果里面包含一些异步方法可以采用generator函数或async函数，即：exports.handleRequestRules = function* (ctx) {} 或 exports.handleRequestRules = async () =&gt; {}</p>\n<p>在whistle的Rules配置界面上输入规则:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">whistle.script://test www.ifeng.com www.qq.com www.baidu.com echo.websocket.org</span><br></pre></td></tr></table></figure>\n<p>如果需要通过配置给脚本传递一些额外参数，可以如下配置(注意中间不能有空格):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">whistle.script://test(a,b,c) www.ifeng.com www.qq.com www.baidu.com echo.websocket.org</span><br></pre></td></tr></table></figure>\n<p>可以在脚本中通过 process.args 获取:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.handleRequestRules = (ctx) =&gt; &#123;</span><br><span class=\"line\">   console.log(process.args); // output: [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span><br><span class=\"line\">   ctx.rules = [&apos;www.qq.com file://&#123;test.html&#125;&apos;];</span><br><span class=\"line\">   ctx.values = &#123; &apos;test.html&apos;: &apos;Hello world.&apos; &#125;;</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>设置WebSocket请求的规则(需要开启HTTPs拦截):</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.handleWebSocketRules = (ctx) =&gt; &#123;</span><br><span class=\"line\">   // ctx.fullUrl 可以获取请求url</span><br><span class=\"line\">   // ctx.headers 可以获取请求头</span><br><span class=\"line\">   // ctx.options 里面包含一些特殊的请求头字段，分别可以获取一些额外信息，如请求方法、设置的规则等</span><br><span class=\"line\">   this.rules = &apos;127.0.0.1 echo.websocket.org&apos;;</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n<p>接下来的操作同上。</p>\n<ol start=\"3\">\n<li>设置Tunnel请求的规则(要测试可以暂时关闭HTTPs拦截):</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.handleTunnel = (ctx) =&gt; &#123;</span><br><span class=\"line\">   // ctx.fullUrl 可以获取请求url</span><br><span class=\"line\">   // ctx.headers 可以获取请求头</span><br><span class=\"line\">   // ctx.options 里面包含一些特殊的请求头字段，分别可以获取一些额外信息，如请求方法、设置的规则等</span><br><span class=\"line\">   this.rules = &apos;127.0.0.1 www.baidu.com&apos;;</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n<p>接下来的操作同上。</p>\n<h4 id=\"操作请求\"><a href=\"#操作请求\" class=\"headerlink\" title=\"操作请求\"></a>操作请求</h4><ol>\n<li>操作HTTP或HTTPs请求(操作HTTPs需要开启HTTPs拦截)</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.handleRequest = function* (ctx, next) &#123;</span><br><span class=\"line\">   // ctx.fullUrl 可以获取请求url</span><br><span class=\"line\">   // ctx.headers 可以获取请求头</span><br><span class=\"line\">   // ctx.options 里面包含一些特殊的请求头字段，分别可以获取一些额外信息，如请设置的规则等</span><br><span class=\"line\">   // ctx.method 获取和设置请求方法</span><br><span class=\"line\">   // const reqBody = yield ctx.getReqBody(); 获取请求body的Buffer数据，如果没有数据返回null</span><br><span class=\"line\">   // const reqText = yield ctx.getReqText();  获取请求body的文本，如果没有返回&apos;&apos;</span><br><span class=\"line\">   // const formData = yield ctx.getReqForm(); 获取表单对象，如果不是表单，返回空对象&#123;&#125;</span><br><span class=\"line\">   // console.log(ctx.method, ctx.headers, reqBody);</span><br><span class=\"line\">   // ctx.req.body = String| Buffer | Stream | null，修改请求的内容</span><br><span class=\"line\">   // 只有执行next方法后才可以把正常的请求发送出去</span><br><span class=\"line\">   // 如果需要自定义请求，可以通过全局的request方法操作</span><br><span class=\"line\">   // console.log(request);</span><br><span class=\"line\">   // next方法可以设置next(&#123; host, port &#125;);</span><br><span class=\"line\">   const &#123; statusCode, headers &#125; = yield next(); </span><br><span class=\"line\">   console.log(ctx.fullUrl, statusCode, headers);</span><br><span class=\"line\">   // const resBody = yield ctx.getResBody();</span><br><span class=\"line\">   // const resText = yield ctx.getResText();</span><br><span class=\"line\">   // ctx.status = 404; 修改响应状态码</span><br><span class=\"line\">   // ctx.set(headers); 批量修改响应头</span><br><span class=\"line\">   // ctx.set(&apos;x-test&apos;, &apos;abc&apos;); 修改响应头</span><br><span class=\"line\">   // ctx.body = String| Buffer | Stream | null; 修改响应内容</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"> // 如果Node &gt;= 7.6，可以采用async await的方式</span><br><span class=\"line\"> exports.handleRequest = async (ctx, next) =&gt; &#123;</span><br><span class=\"line\">   // do sth</span><br><span class=\"line\">   // next方法可以设置next(&#123; host, port &#125;);</span><br><span class=\"line\">   const &#123; statusCode, headers &#125; = await next(); </span><br><span class=\"line\">   // do sth</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n<p>在whistle的Rules配置界面上输入规则:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 这里不能用whistle.script，否则请求不会转发到handleRequest</span><br><span class=\"line\"># whistle.script只会执行handleXxxRules</span><br><span class=\"line\"># 你也可以通过在handleXxxRules里面设置 script://test(a,b,c)，实现转发</span><br><span class=\"line\"></span><br><span class=\"line\">script://test www.ifeng.com www.qq.com www.baidu.com echo.websocket.org</span><br></pre></td></tr></table></figure>\n<p>需要在配置中带上参数，可以参考上面的规则设置</p>\n<ol start=\"2\">\n<li>操作WebSocket请求(需要开启HTTPs拦截)</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Node &lt; 7.6可以改用genrator和yield</span><br><span class=\"line\"> exports.handleWebSocket = async (req, connect) =&gt; &#123;</span><br><span class=\"line\">  // connect方法可以设置connect(&#123; host, port &#125;);</span><br><span class=\"line\">  const res = await connect();</span><br><span class=\"line\">  res.on(&apos;message&apos;, (data) =&gt; &#123;</span><br><span class=\"line\">    console.log(&apos;Received: &apos;, data);</span><br><span class=\"line\">    req.send(data);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  req.on(&apos;message&apos;, (data) =&gt; &#123;</span><br><span class=\"line\">    console.log(&apos;Sent: &apos;, data);</span><br><span class=\"line\">    res.send(data);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n<p>whistle规则配置同上</p>\n<ol start=\"3\">\n<li>操作Tunnel请求</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Node &gt;= 7.6可以改用async和await</span><br><span class=\"line\"> exports.handleTunnel = function* (req, connect) &#123;</span><br><span class=\"line\">  // connect方法可以设置connect(&#123; host, port &#125;);</span><br><span class=\"line\">  const res = yield connect();</span><br><span class=\"line\">  req.pipe(res).pipe(req);</span><br><span class=\"line\">  // 也可以参考上面操作WebSocket，自己监听data和write方法处理，这样就可以直接修改和打印内容</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n<p>whistle规则配置同上</p>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"https://github.com/whistle-plugins/whistle.script\" target=\"_blank\" rel=\"noopener\">whistle.script</a></p>\n"},{"title":"前端学习路线规划","date":"2018-01-22T16:00:00.000Z","comments":1,"_content":"\n# 前端学习路线规划\n## 一、代码编写工具\n### **sublime Text 3**:\n 1. sublime text编辑器单从界面看非常简洁，可以说让人一见倾心的感觉。完全符合码农的口味~~。功能上也不复杂，就跟记事本似的，很容易上手。\n \n 2. 可以自由扩展，sublime提供了安装插件的方式，可以任意安装你想要的插件.\n \n## 二、学习路线规划\n\n### 1.  熟练使用 HTML、CSS\nHTML 是标签语言，可以构建前端页面的骨架；CSS是层叠样式控制表，可以构建前端页面的外貌\n\n这部分比较简单，到网上搜资料，书籍视频非常多。css中盒子模型，流动，block，inline，层叠，样式优先级等这些比较重要。最后再深入了解下浏览器差异性，ie9以下兼容简单了解就行了，ie9以下浏览器被淘汰掉是趋势，低版本没必要浪费大量时间去学习兼容主流浏览器，google chrome浏览器、firefox浏览器、safari浏览器、opera浏览器即可。浏览器差异内容很多，建议在实践中多多积累。\n\n```\n推荐书籍：《Head First HTML 与 CSS (第2版)》\n          《CSS 禅意花园(修订版)》\n```\n\n### 2.javascript部分（最重要的部分）\n难点，也是重点，要学的内容实在很多，如果没有其他编程语言的基础的话，学起来可能要费些力，有很多比较抽象的概念，必须要深入理解，比如闭包、原型、面向对象、封装等，要理解透彻。看书是必不可少的，找一本优秀的js书从头到尾深入学习了。另外，js面向对象编程必须要学习，非常重要，个人推荐一本书《javascript高级程序设计》。边学边练，实践出真知。\n\n\n```\n推荐教程：网易云课堂上 李炎恢老师的视频，讲得很详细，讲的是和那本红宝书一样的内容\n          多动手写demo\n推荐书籍：《Javascript 权威指南》\n         《JavaScript 高级程序设计(第3版)》\n```\n\n\n### 3.jQuery学习（这不是一个框架，是一个类库）\n这些基础知识掌握好之后，还需要学jQuery，这是一个非常优秀的Javascript库，大型开发必备。它简化了Javascript的复杂操作，消除了Javascript跨平台兼容问题，提供了大量实用方法，有良好的文档和帮助手册，是一个非常成熟的Javascript库。\n\n\n```\n推荐教程：网易云课堂上 李炎恢老师的视频，多动手写demo\n推荐书籍：《锋利的jquery》\n```\n\n\n### 4.ajax的学习\n通过在后台与服务器进行数据交换，AJAX可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新，ajax是现在前端后台交互的主要方式。\n     \n```\n掌握的知识点：js原生的发送ajax的方法\n             jq的简便的发送ajax的方法\n```\n\n### 5.git\nGit是目前世界上最先进的分布式版本控制系统，适合于在团队合作时进行版本控制，提高开发效率\n\n```\n推荐教程：廖雪峰老师的关于git的教程博客\n```\n\n### 6.理解前端语言新标准 HTML5、CSS3、ES6 及其特性\n熟练使用 HTML、CSS、JavaScript 还需要我们理解其语言最新相关标准：HTML5、CSS3 和 ES6(ECMAScript6)。\n\n- HTML 5 里新增了许多特性：语义化和新的音频、视频支持等；\n- CSS 3 被划分为模块，解决了 CSS2 为等待各个标准统一而耗费大量时间才能推进的不足之处，同时也提供了 2D、3D、动画效果等新特性；\n- ECMAScript6 等于 JavaScript - DOM - BOM，是 JavaScript 在 2015 年的最新标准，因为 ES6 对标准改动较大，前端开发者常常将一个前端项目是否支持 ES6 作为推进前端新技术的重要桥梁之一。ES6 将箭头函数、let 变量声明命令、Promise 编程、模块化编程等新特性纳入其标准中，得到了各大浏览器最新版本的支持。\n\n\n```\n扩展阅读：《ES6 标准入门(第2版)》\n          《深入理解ES6》\n```\n\n### 7.掌握浏览器兼容、响应式布局相关解决方案\n早期占据浏览器半壁江山的IE浏览器上存在的众多浏览器兼容问题，耗费了当时前端开发者的大量开发时间。虽然说现在的前端开发者已经不需要考虑太多的浏览器兼容问题，对其概念的了解有利于了解前端历史包袱或在未来足以应对一些面向特殊群体(早期 IE 浏览器使用者)的前端项目。\n**关于IE浏览器的兼容性问题在李炎恢老师的那个视频有详细的讲解**\n\n响应式布局和单页面应用是当代前端开发者的必备技能。从 Web Pages 到 Web App 时代，我们开发的前端项目有越来越多的可能需要同时在电脑端和手机端进行访问，一个有良好响应式布局的前端项目可以一个代码运行在多种不同分辨率的平台之上。\n\n## 三、现在前端主流的框架\n### 1. vuejs :2016年最火的前端框架（MVVC框架）\n\n是一套用于构建用户界面的渐进式框架Vue的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。\n\n**常用于单页面应用的开发**\n\n\n```\n掌握的要点：(vue全家桶)\n   1.vue-router\n   2.vuex\n   3.vue-resource\n   4.vue-cli\n   5.Element-ui\n   \n推荐教程：详细阅读官网教程，中国人自己研发的，有中文版，不难\n```\n### 2. Reactjs\nReact 是一个用于构建用户界面的 javascript 库。\n\nReact主要用于构建UI，很多人认为 React 是 MVC 中的 V（视图）。\n\nReact 起源于 Facebook 的内部项目，用来架设 Instagram 的网站，并于 2013 年 5 月开源。\n\nReact 拥有较高的性能，代码逻辑非常简单，越来越多的人已开始关注和使用它。\n\n**React特点：**\n\n```\n1.声明式设计 −React采用声明范式，可以轻松描述应用。\n2.高效 −React通过对DOM的模拟，最大限度地减少与DOM的交互。\n3.灵活 −React可以与已知的库或框架很好地配合。\n4.JSX − JSX 是 JavaScript 语法的扩展。React 开发不一定使用 JSX ，但我们建议使用它。\n5.组件 − 通过 React 构建组件，使得代码更加容易得到复用，能够很好的应用在大项目的开发中。\n6.单向响应的数据流 − React实现了单向响应的数据流，从而减少了重复代码，这也是它为什么比传统数据绑定更简单。\n\n\n```\n\n```\n掌握的知识点：（React全家桶技术）\n  1.Reactjs\n  2.React生命周期\n  3.React Router\n  4.Redux\n  5.React Native(主要用于移动端的开发)\n```\n## 3.AngularJS（国外开发大型项目常用框架）\nAngularJS的四大功能：\n1. MVC\n\n  将后台的MVC模式写入了前端语言中。我总觉得前端语言将来会很叼，从node.js开始我就又一种这样的感觉。可能在很久之后取代后端语言不是没有可能的。\n  \n 2. 模块化\n\n  就是一系列函数的集合，当应用被启动时，这些函数就会被执行。主要利用angular.module来定义模块。也是Angular.js的亮点。\n  \n3. 指令属性\n\n我自己的理解就是比html标签更加具有属性和方法的指令标签\n\n4. 双向数据绑定\n\n传统的数据绑定是单向绑定，数据只能从model和controller生成需要的html，但是不能返过来使用。只是单方向的。双向数据绑定:也就是说我在前面填写，后面直接生成代码，将填写的显示出来。双向的意思就是如果view修改了属性值，那么model机会看到这个改变。相反也是一样的。\n\n## 4. 小程序（类似一个前端开发框架）\n```\n推荐教程：官网上的小程序开发文档，尝试动手写一下小程序\n```\n\n\n## 5.nodejs(前端用来写后台的工具)\n\n简单的说 Node.js 就是运行在服务端的 JavaScript。\n\nNode.js 是一个基于Chrome JavaScript 运行时建立的一个平台。\n\nNode.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。\n```\n推荐教程：官网的教程\n```\n\n\n## 四、一些常用的ui框架\n   #### 1. Bootstrape：最好的响应式css框架\n   #### 2. Element-ui：完美适应vuejs的ui框架\n   #### 3. Amazeui：Amaze UI 是一个轻量级、 Mobile first 的前端框架, 基于开源社区流行前端框架编写的。\n   #### 4. Aliceui\n   #### 5.Echart：最好的图表制作框架\n   \n   ####   ·····\n   \n## 六、前端最好掌握的一些常用技能\n   1. Markdown笔记的使用，程序员专用笔记本\n   2. github的使用：全球最大的开源代码网站，在上面你可以找到全世界所有出名项目的源代码，被称为人类的知识宝库。\n   3. 用github page搭建个人博客，上传个人项目到github上，面试加分必备项\n   4. 移动端的开发\n   5. 前端web开发命名规范，谷歌、百度命名标准\n   \n      等等·······","source":"_posts/前端/前端学习路线规划.md","raw":"---\ntitle: 前端学习路线规划\ndate: 2018-01-23\ntags: [前端]\ncategories: 前端\ncomments: true\n---\n\n# 前端学习路线规划\n## 一、代码编写工具\n### **sublime Text 3**:\n 1. sublime text编辑器单从界面看非常简洁，可以说让人一见倾心的感觉。完全符合码农的口味~~。功能上也不复杂，就跟记事本似的，很容易上手。\n \n 2. 可以自由扩展，sublime提供了安装插件的方式，可以任意安装你想要的插件.\n \n## 二、学习路线规划\n\n### 1.  熟练使用 HTML、CSS\nHTML 是标签语言，可以构建前端页面的骨架；CSS是层叠样式控制表，可以构建前端页面的外貌\n\n这部分比较简单，到网上搜资料，书籍视频非常多。css中盒子模型，流动，block，inline，层叠，样式优先级等这些比较重要。最后再深入了解下浏览器差异性，ie9以下兼容简单了解就行了，ie9以下浏览器被淘汰掉是趋势，低版本没必要浪费大量时间去学习兼容主流浏览器，google chrome浏览器、firefox浏览器、safari浏览器、opera浏览器即可。浏览器差异内容很多，建议在实践中多多积累。\n\n```\n推荐书籍：《Head First HTML 与 CSS (第2版)》\n          《CSS 禅意花园(修订版)》\n```\n\n### 2.javascript部分（最重要的部分）\n难点，也是重点，要学的内容实在很多，如果没有其他编程语言的基础的话，学起来可能要费些力，有很多比较抽象的概念，必须要深入理解，比如闭包、原型、面向对象、封装等，要理解透彻。看书是必不可少的，找一本优秀的js书从头到尾深入学习了。另外，js面向对象编程必须要学习，非常重要，个人推荐一本书《javascript高级程序设计》。边学边练，实践出真知。\n\n\n```\n推荐教程：网易云课堂上 李炎恢老师的视频，讲得很详细，讲的是和那本红宝书一样的内容\n          多动手写demo\n推荐书籍：《Javascript 权威指南》\n         《JavaScript 高级程序设计(第3版)》\n```\n\n\n### 3.jQuery学习（这不是一个框架，是一个类库）\n这些基础知识掌握好之后，还需要学jQuery，这是一个非常优秀的Javascript库，大型开发必备。它简化了Javascript的复杂操作，消除了Javascript跨平台兼容问题，提供了大量实用方法，有良好的文档和帮助手册，是一个非常成熟的Javascript库。\n\n\n```\n推荐教程：网易云课堂上 李炎恢老师的视频，多动手写demo\n推荐书籍：《锋利的jquery》\n```\n\n\n### 4.ajax的学习\n通过在后台与服务器进行数据交换，AJAX可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新，ajax是现在前端后台交互的主要方式。\n     \n```\n掌握的知识点：js原生的发送ajax的方法\n             jq的简便的发送ajax的方法\n```\n\n### 5.git\nGit是目前世界上最先进的分布式版本控制系统，适合于在团队合作时进行版本控制，提高开发效率\n\n```\n推荐教程：廖雪峰老师的关于git的教程博客\n```\n\n### 6.理解前端语言新标准 HTML5、CSS3、ES6 及其特性\n熟练使用 HTML、CSS、JavaScript 还需要我们理解其语言最新相关标准：HTML5、CSS3 和 ES6(ECMAScript6)。\n\n- HTML 5 里新增了许多特性：语义化和新的音频、视频支持等；\n- CSS 3 被划分为模块，解决了 CSS2 为等待各个标准统一而耗费大量时间才能推进的不足之处，同时也提供了 2D、3D、动画效果等新特性；\n- ECMAScript6 等于 JavaScript - DOM - BOM，是 JavaScript 在 2015 年的最新标准，因为 ES6 对标准改动较大，前端开发者常常将一个前端项目是否支持 ES6 作为推进前端新技术的重要桥梁之一。ES6 将箭头函数、let 变量声明命令、Promise 编程、模块化编程等新特性纳入其标准中，得到了各大浏览器最新版本的支持。\n\n\n```\n扩展阅读：《ES6 标准入门(第2版)》\n          《深入理解ES6》\n```\n\n### 7.掌握浏览器兼容、响应式布局相关解决方案\n早期占据浏览器半壁江山的IE浏览器上存在的众多浏览器兼容问题，耗费了当时前端开发者的大量开发时间。虽然说现在的前端开发者已经不需要考虑太多的浏览器兼容问题，对其概念的了解有利于了解前端历史包袱或在未来足以应对一些面向特殊群体(早期 IE 浏览器使用者)的前端项目。\n**关于IE浏览器的兼容性问题在李炎恢老师的那个视频有详细的讲解**\n\n响应式布局和单页面应用是当代前端开发者的必备技能。从 Web Pages 到 Web App 时代，我们开发的前端项目有越来越多的可能需要同时在电脑端和手机端进行访问，一个有良好响应式布局的前端项目可以一个代码运行在多种不同分辨率的平台之上。\n\n## 三、现在前端主流的框架\n### 1. vuejs :2016年最火的前端框架（MVVC框架）\n\n是一套用于构建用户界面的渐进式框架Vue的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。\n\n**常用于单页面应用的开发**\n\n\n```\n掌握的要点：(vue全家桶)\n   1.vue-router\n   2.vuex\n   3.vue-resource\n   4.vue-cli\n   5.Element-ui\n   \n推荐教程：详细阅读官网教程，中国人自己研发的，有中文版，不难\n```\n### 2. Reactjs\nReact 是一个用于构建用户界面的 javascript 库。\n\nReact主要用于构建UI，很多人认为 React 是 MVC 中的 V（视图）。\n\nReact 起源于 Facebook 的内部项目，用来架设 Instagram 的网站，并于 2013 年 5 月开源。\n\nReact 拥有较高的性能，代码逻辑非常简单，越来越多的人已开始关注和使用它。\n\n**React特点：**\n\n```\n1.声明式设计 −React采用声明范式，可以轻松描述应用。\n2.高效 −React通过对DOM的模拟，最大限度地减少与DOM的交互。\n3.灵活 −React可以与已知的库或框架很好地配合。\n4.JSX − JSX 是 JavaScript 语法的扩展。React 开发不一定使用 JSX ，但我们建议使用它。\n5.组件 − 通过 React 构建组件，使得代码更加容易得到复用，能够很好的应用在大项目的开发中。\n6.单向响应的数据流 − React实现了单向响应的数据流，从而减少了重复代码，这也是它为什么比传统数据绑定更简单。\n\n\n```\n\n```\n掌握的知识点：（React全家桶技术）\n  1.Reactjs\n  2.React生命周期\n  3.React Router\n  4.Redux\n  5.React Native(主要用于移动端的开发)\n```\n## 3.AngularJS（国外开发大型项目常用框架）\nAngularJS的四大功能：\n1. MVC\n\n  将后台的MVC模式写入了前端语言中。我总觉得前端语言将来会很叼，从node.js开始我就又一种这样的感觉。可能在很久之后取代后端语言不是没有可能的。\n  \n 2. 模块化\n\n  就是一系列函数的集合，当应用被启动时，这些函数就会被执行。主要利用angular.module来定义模块。也是Angular.js的亮点。\n  \n3. 指令属性\n\n我自己的理解就是比html标签更加具有属性和方法的指令标签\n\n4. 双向数据绑定\n\n传统的数据绑定是单向绑定，数据只能从model和controller生成需要的html，但是不能返过来使用。只是单方向的。双向数据绑定:也就是说我在前面填写，后面直接生成代码，将填写的显示出来。双向的意思就是如果view修改了属性值，那么model机会看到这个改变。相反也是一样的。\n\n## 4. 小程序（类似一个前端开发框架）\n```\n推荐教程：官网上的小程序开发文档，尝试动手写一下小程序\n```\n\n\n## 5.nodejs(前端用来写后台的工具)\n\n简单的说 Node.js 就是运行在服务端的 JavaScript。\n\nNode.js 是一个基于Chrome JavaScript 运行时建立的一个平台。\n\nNode.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。\n```\n推荐教程：官网的教程\n```\n\n\n## 四、一些常用的ui框架\n   #### 1. Bootstrape：最好的响应式css框架\n   #### 2. Element-ui：完美适应vuejs的ui框架\n   #### 3. Amazeui：Amaze UI 是一个轻量级、 Mobile first 的前端框架, 基于开源社区流行前端框架编写的。\n   #### 4. Aliceui\n   #### 5.Echart：最好的图表制作框架\n   \n   ####   ·····\n   \n## 六、前端最好掌握的一些常用技能\n   1. Markdown笔记的使用，程序员专用笔记本\n   2. github的使用：全球最大的开源代码网站，在上面你可以找到全世界所有出名项目的源代码，被称为人类的知识宝库。\n   3. 用github page搭建个人博客，上传个人项目到github上，面试加分必备项\n   4. 移动端的开发\n   5. 前端web开发命名规范，谷歌、百度命名标准\n   \n      等等·······","slug":"前端/前端学习路线规划","published":1,"updated":"2022-07-22T10:12:09.287Z","layout":"post","photos":[],"link":"","_id":"cl5wb2yn200cgcj387ohbdtxz","content":"<h1 id=\"前端学习路线规划\"><a href=\"#前端学习路线规划\" class=\"headerlink\" title=\"前端学习路线规划\"></a>前端学习路线规划</h1><h2 id=\"一、代码编写工具\"><a href=\"#一、代码编写工具\" class=\"headerlink\" title=\"一、代码编写工具\"></a>一、代码编写工具</h2><h3 id=\"sublime-Text-3\"><a href=\"#sublime-Text-3\" class=\"headerlink\" title=\"sublime Text 3:\"></a><strong>sublime Text 3</strong>:</h3><ol>\n<li><p>sublime text编辑器单从界面看非常简洁，可以说让人一见倾心的感觉。完全符合码农的口味~~。功能上也不复杂，就跟记事本似的，很容易上手。</p>\n</li>\n<li><p>可以自由扩展，sublime提供了安装插件的方式，可以任意安装你想要的插件.</p>\n</li>\n</ol>\n<h2 id=\"二、学习路线规划\"><a href=\"#二、学习路线规划\" class=\"headerlink\" title=\"二、学习路线规划\"></a>二、学习路线规划</h2><h3 id=\"1-熟练使用-HTML、CSS\"><a href=\"#1-熟练使用-HTML、CSS\" class=\"headerlink\" title=\"1.  熟练使用 HTML、CSS\"></a>1.  熟练使用 HTML、CSS</h3><p>HTML 是标签语言，可以构建前端页面的骨架；CSS是层叠样式控制表，可以构建前端页面的外貌</p>\n<p>这部分比较简单，到网上搜资料，书籍视频非常多。css中盒子模型，流动，block，inline，层叠，样式优先级等这些比较重要。最后再深入了解下浏览器差异性，ie9以下兼容简单了解就行了，ie9以下浏览器被淘汰掉是趋势，低版本没必要浪费大量时间去学习兼容主流浏览器，google chrome浏览器、firefox浏览器、safari浏览器、opera浏览器即可。浏览器差异内容很多，建议在实践中多多积累。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">推荐书籍：《Head First HTML 与 CSS (第2版)》</span><br><span class=\"line\">          《CSS 禅意花园(修订版)》</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-javascript部分（最重要的部分）\"><a href=\"#2-javascript部分（最重要的部分）\" class=\"headerlink\" title=\"2.javascript部分（最重要的部分）\"></a>2.javascript部分（最重要的部分）</h3><p>难点，也是重点，要学的内容实在很多，如果没有其他编程语言的基础的话，学起来可能要费些力，有很多比较抽象的概念，必须要深入理解，比如闭包、原型、面向对象、封装等，要理解透彻。看书是必不可少的，找一本优秀的js书从头到尾深入学习了。另外，js面向对象编程必须要学习，非常重要，个人推荐一本书《javascript高级程序设计》。边学边练，实践出真知。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">推荐教程：网易云课堂上 李炎恢老师的视频，讲得很详细，讲的是和那本红宝书一样的内容</span><br><span class=\"line\">          多动手写demo</span><br><span class=\"line\">推荐书籍：《Javascript 权威指南》</span><br><span class=\"line\">         《JavaScript 高级程序设计(第3版)》</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-jQuery学习（这不是一个框架，是一个类库）\"><a href=\"#3-jQuery学习（这不是一个框架，是一个类库）\" class=\"headerlink\" title=\"3.jQuery学习（这不是一个框架，是一个类库）\"></a>3.jQuery学习（这不是一个框架，是一个类库）</h3><p>这些基础知识掌握好之后，还需要学jQuery，这是一个非常优秀的Javascript库，大型开发必备。它简化了Javascript的复杂操作，消除了Javascript跨平台兼容问题，提供了大量实用方法，有良好的文档和帮助手册，是一个非常成熟的Javascript库。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">推荐教程：网易云课堂上 李炎恢老师的视频，多动手写demo</span><br><span class=\"line\">推荐书籍：《锋利的jquery》</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-ajax的学习\"><a href=\"#4-ajax的学习\" class=\"headerlink\" title=\"4.ajax的学习\"></a>4.ajax的学习</h3><p>通过在后台与服务器进行数据交换，AJAX可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新，ajax是现在前端后台交互的主要方式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">掌握的知识点：js原生的发送ajax的方法</span><br><span class=\"line\">             jq的简便的发送ajax的方法</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-git\"><a href=\"#5-git\" class=\"headerlink\" title=\"5.git\"></a>5.git</h3><p>Git是目前世界上最先进的分布式版本控制系统，适合于在团队合作时进行版本控制，提高开发效率</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">推荐教程：廖雪峰老师的关于git的教程博客</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-理解前端语言新标准-HTML5、CSS3、ES6-及其特性\"><a href=\"#6-理解前端语言新标准-HTML5、CSS3、ES6-及其特性\" class=\"headerlink\" title=\"6.理解前端语言新标准 HTML5、CSS3、ES6 及其特性\"></a>6.理解前端语言新标准 HTML5、CSS3、ES6 及其特性</h3><p>熟练使用 HTML、CSS、JavaScript 还需要我们理解其语言最新相关标准：HTML5、CSS3 和 ES6(ECMAScript6)。</p>\n<ul>\n<li>HTML 5 里新增了许多特性：语义化和新的音频、视频支持等；</li>\n<li>CSS 3 被划分为模块，解决了 CSS2 为等待各个标准统一而耗费大量时间才能推进的不足之处，同时也提供了 2D、3D、动画效果等新特性；</li>\n<li>ECMAScript6 等于 JavaScript - DOM - BOM，是 JavaScript 在 2015 年的最新标准，因为 ES6 对标准改动较大，前端开发者常常将一个前端项目是否支持 ES6 作为推进前端新技术的重要桥梁之一。ES6 将箭头函数、let 变量声明命令、Promise 编程、模块化编程等新特性纳入其标准中，得到了各大浏览器最新版本的支持。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">扩展阅读：《ES6 标准入门(第2版)》</span><br><span class=\"line\">          《深入理解ES6》</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-掌握浏览器兼容、响应式布局相关解决方案\"><a href=\"#7-掌握浏览器兼容、响应式布局相关解决方案\" class=\"headerlink\" title=\"7.掌握浏览器兼容、响应式布局相关解决方案\"></a>7.掌握浏览器兼容、响应式布局相关解决方案</h3><p>早期占据浏览器半壁江山的IE浏览器上存在的众多浏览器兼容问题，耗费了当时前端开发者的大量开发时间。虽然说现在的前端开发者已经不需要考虑太多的浏览器兼容问题，对其概念的了解有利于了解前端历史包袱或在未来足以应对一些面向特殊群体(早期 IE 浏览器使用者)的前端项目。<br><strong>关于IE浏览器的兼容性问题在李炎恢老师的那个视频有详细的讲解</strong></p>\n<p>响应式布局和单页面应用是当代前端开发者的必备技能。从 Web Pages 到 Web App 时代，我们开发的前端项目有越来越多的可能需要同时在电脑端和手机端进行访问，一个有良好响应式布局的前端项目可以一个代码运行在多种不同分辨率的平台之上。</p>\n<h2 id=\"三、现在前端主流的框架\"><a href=\"#三、现在前端主流的框架\" class=\"headerlink\" title=\"三、现在前端主流的框架\"></a>三、现在前端主流的框架</h2><h3 id=\"1-vuejs-2016年最火的前端框架（MVVC框架）\"><a href=\"#1-vuejs-2016年最火的前端框架（MVVC框架）\" class=\"headerlink\" title=\"1. vuejs :2016年最火的前端框架（MVVC框架）\"></a>1. vuejs :2016年最火的前端框架（MVVC框架）</h3><p>是一套用于构建用户界面的渐进式框架Vue的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p>\n<p><strong>常用于单页面应用的开发</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">掌握的要点：(vue全家桶)</span><br><span class=\"line\">   1.vue-router</span><br><span class=\"line\">   2.vuex</span><br><span class=\"line\">   3.vue-resource</span><br><span class=\"line\">   4.vue-cli</span><br><span class=\"line\">   5.Element-ui</span><br><span class=\"line\">   </span><br><span class=\"line\">推荐教程：详细阅读官网教程，中国人自己研发的，有中文版，不难</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-Reactjs\"><a href=\"#2-Reactjs\" class=\"headerlink\" title=\"2. Reactjs\"></a>2. Reactjs</h3><p>React 是一个用于构建用户界面的 javascript 库。</p>\n<p>React主要用于构建UI，很多人认为 React 是 MVC 中的 V（视图）。</p>\n<p>React 起源于 Facebook 的内部项目，用来架设 Instagram 的网站，并于 2013 年 5 月开源。</p>\n<p>React 拥有较高的性能，代码逻辑非常简单，越来越多的人已开始关注和使用它。</p>\n<p><strong>React特点：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.声明式设计 −React采用声明范式，可以轻松描述应用。</span><br><span class=\"line\">2.高效 −React通过对DOM的模拟，最大限度地减少与DOM的交互。</span><br><span class=\"line\">3.灵活 −React可以与已知的库或框架很好地配合。</span><br><span class=\"line\">4.JSX − JSX 是 JavaScript 语法的扩展。React 开发不一定使用 JSX ，但我们建议使用它。</span><br><span class=\"line\">5.组件 − 通过 React 构建组件，使得代码更加容易得到复用，能够很好的应用在大项目的开发中。</span><br><span class=\"line\">6.单向响应的数据流 − React实现了单向响应的数据流，从而减少了重复代码，这也是它为什么比传统数据绑定更简单。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">掌握的知识点：（React全家桶技术）</span><br><span class=\"line\">  1.Reactjs</span><br><span class=\"line\">  2.React生命周期</span><br><span class=\"line\">  3.React Router</span><br><span class=\"line\">  4.Redux</span><br><span class=\"line\">  5.React Native(主要用于移动端的开发)</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-AngularJS（国外开发大型项目常用框架）\"><a href=\"#3-AngularJS（国外开发大型项目常用框架）\" class=\"headerlink\" title=\"3.AngularJS（国外开发大型项目常用框架）\"></a>3.AngularJS（国外开发大型项目常用框架）</h2><p>AngularJS的四大功能：</p>\n<ol>\n<li><p>MVC</p>\n<p>将后台的MVC模式写入了前端语言中。我总觉得前端语言将来会很叼，从node.js开始我就又一种这样的感觉。可能在很久之后取代后端语言不是没有可能的。</p>\n<ol start=\"2\">\n<li>模块化</li>\n</ol>\n<p>就是一系列函数的集合，当应用被启动时，这些函数就会被执行。主要利用angular.module来定义模块。也是Angular.js的亮点。</p>\n</li>\n<li><p>指令属性</p>\n</li>\n</ol>\n<p>我自己的理解就是比html标签更加具有属性和方法的指令标签</p>\n<ol start=\"4\">\n<li>双向数据绑定</li>\n</ol>\n<p>传统的数据绑定是单向绑定，数据只能从model和controller生成需要的html，但是不能返过来使用。只是单方向的。双向数据绑定:也就是说我在前面填写，后面直接生成代码，将填写的显示出来。双向的意思就是如果view修改了属性值，那么model机会看到这个改变。相反也是一样的。</p>\n<h2 id=\"4-小程序（类似一个前端开发框架）\"><a href=\"#4-小程序（类似一个前端开发框架）\" class=\"headerlink\" title=\"4. 小程序（类似一个前端开发框架）\"></a>4. 小程序（类似一个前端开发框架）</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">推荐教程：官网上的小程序开发文档，尝试动手写一下小程序</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-nodejs-前端用来写后台的工具\"><a href=\"#5-nodejs-前端用来写后台的工具\" class=\"headerlink\" title=\"5.nodejs(前端用来写后台的工具)\"></a>5.nodejs(前端用来写后台的工具)</h2><p>简单的说 Node.js 就是运行在服务端的 JavaScript。</p>\n<p>Node.js 是一个基于Chrome JavaScript 运行时建立的一个平台。</p>\n<p>Node.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">推荐教程：官网的教程</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"四、一些常用的ui框架\"><a href=\"#四、一些常用的ui框架\" class=\"headerlink\" title=\"四、一些常用的ui框架\"></a>四、一些常用的ui框架</h2><h4 id=\"1-Bootstrape：最好的响应式css框架\"><a href=\"#1-Bootstrape：最好的响应式css框架\" class=\"headerlink\" title=\"1. Bootstrape：最好的响应式css框架\"></a>1. Bootstrape：最好的响应式css框架</h4><h4 id=\"2-Element-ui：完美适应vuejs的ui框架\"><a href=\"#2-Element-ui：完美适应vuejs的ui框架\" class=\"headerlink\" title=\"2. Element-ui：完美适应vuejs的ui框架\"></a>2. Element-ui：完美适应vuejs的ui框架</h4><h4 id=\"3-Amazeui：Amaze-UI-是一个轻量级、-Mobile-first-的前端框架-基于开源社区流行前端框架编写的。\"><a href=\"#3-Amazeui：Amaze-UI-是一个轻量级、-Mobile-first-的前端框架-基于开源社区流行前端框架编写的。\" class=\"headerlink\" title=\"3. Amazeui：Amaze UI 是一个轻量级、 Mobile first 的前端框架, 基于开源社区流行前端框架编写的。\"></a>3. Amazeui：Amaze UI 是一个轻量级、 Mobile first 的前端框架, 基于开源社区流行前端框架编写的。</h4><h4 id=\"4-Aliceui\"><a href=\"#4-Aliceui\" class=\"headerlink\" title=\"4. Aliceui\"></a>4. Aliceui</h4><h4 id=\"5-Echart：最好的图表制作框架\"><a href=\"#5-Echart：最好的图表制作框架\" class=\"headerlink\" title=\"5.Echart：最好的图表制作框架\"></a>5.Echart：最好的图表制作框架</h4><h4 id=\"·····\"><a href=\"#·····\" class=\"headerlink\" title=\"·····\"></a>·····</h4><h2 id=\"六、前端最好掌握的一些常用技能\"><a href=\"#六、前端最好掌握的一些常用技能\" class=\"headerlink\" title=\"六、前端最好掌握的一些常用技能\"></a>六、前端最好掌握的一些常用技能</h2><ol>\n<li>Markdown笔记的使用，程序员专用笔记本</li>\n<li>github的使用：全球最大的开源代码网站，在上面你可以找到全世界所有出名项目的源代码，被称为人类的知识宝库。</li>\n<li>用github page搭建个人博客，上传个人项目到github上，面试加分必备项</li>\n<li>移动端的开发</li>\n<li><p>前端web开发命名规范，谷歌、百度命名标准</p>\n<p>等等·······</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前端学习路线规划\"><a href=\"#前端学习路线规划\" class=\"headerlink\" title=\"前端学习路线规划\"></a>前端学习路线规划</h1><h2 id=\"一、代码编写工具\"><a href=\"#一、代码编写工具\" class=\"headerlink\" title=\"一、代码编写工具\"></a>一、代码编写工具</h2><h3 id=\"sublime-Text-3\"><a href=\"#sublime-Text-3\" class=\"headerlink\" title=\"sublime Text 3:\"></a><strong>sublime Text 3</strong>:</h3><ol>\n<li><p>sublime text编辑器单从界面看非常简洁，可以说让人一见倾心的感觉。完全符合码农的口味~~。功能上也不复杂，就跟记事本似的，很容易上手。</p>\n</li>\n<li><p>可以自由扩展，sublime提供了安装插件的方式，可以任意安装你想要的插件.</p>\n</li>\n</ol>\n<h2 id=\"二、学习路线规划\"><a href=\"#二、学习路线规划\" class=\"headerlink\" title=\"二、学习路线规划\"></a>二、学习路线规划</h2><h3 id=\"1-熟练使用-HTML、CSS\"><a href=\"#1-熟练使用-HTML、CSS\" class=\"headerlink\" title=\"1.  熟练使用 HTML、CSS\"></a>1.  熟练使用 HTML、CSS</h3><p>HTML 是标签语言，可以构建前端页面的骨架；CSS是层叠样式控制表，可以构建前端页面的外貌</p>\n<p>这部分比较简单，到网上搜资料，书籍视频非常多。css中盒子模型，流动，block，inline，层叠，样式优先级等这些比较重要。最后再深入了解下浏览器差异性，ie9以下兼容简单了解就行了，ie9以下浏览器被淘汰掉是趋势，低版本没必要浪费大量时间去学习兼容主流浏览器，google chrome浏览器、firefox浏览器、safari浏览器、opera浏览器即可。浏览器差异内容很多，建议在实践中多多积累。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">推荐书籍：《Head First HTML 与 CSS (第2版)》</span><br><span class=\"line\">          《CSS 禅意花园(修订版)》</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-javascript部分（最重要的部分）\"><a href=\"#2-javascript部分（最重要的部分）\" class=\"headerlink\" title=\"2.javascript部分（最重要的部分）\"></a>2.javascript部分（最重要的部分）</h3><p>难点，也是重点，要学的内容实在很多，如果没有其他编程语言的基础的话，学起来可能要费些力，有很多比较抽象的概念，必须要深入理解，比如闭包、原型、面向对象、封装等，要理解透彻。看书是必不可少的，找一本优秀的js书从头到尾深入学习了。另外，js面向对象编程必须要学习，非常重要，个人推荐一本书《javascript高级程序设计》。边学边练，实践出真知。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">推荐教程：网易云课堂上 李炎恢老师的视频，讲得很详细，讲的是和那本红宝书一样的内容</span><br><span class=\"line\">          多动手写demo</span><br><span class=\"line\">推荐书籍：《Javascript 权威指南》</span><br><span class=\"line\">         《JavaScript 高级程序设计(第3版)》</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-jQuery学习（这不是一个框架，是一个类库）\"><a href=\"#3-jQuery学习（这不是一个框架，是一个类库）\" class=\"headerlink\" title=\"3.jQuery学习（这不是一个框架，是一个类库）\"></a>3.jQuery学习（这不是一个框架，是一个类库）</h3><p>这些基础知识掌握好之后，还需要学jQuery，这是一个非常优秀的Javascript库，大型开发必备。它简化了Javascript的复杂操作，消除了Javascript跨平台兼容问题，提供了大量实用方法，有良好的文档和帮助手册，是一个非常成熟的Javascript库。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">推荐教程：网易云课堂上 李炎恢老师的视频，多动手写demo</span><br><span class=\"line\">推荐书籍：《锋利的jquery》</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-ajax的学习\"><a href=\"#4-ajax的学习\" class=\"headerlink\" title=\"4.ajax的学习\"></a>4.ajax的学习</h3><p>通过在后台与服务器进行数据交换，AJAX可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新，ajax是现在前端后台交互的主要方式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">掌握的知识点：js原生的发送ajax的方法</span><br><span class=\"line\">             jq的简便的发送ajax的方法</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-git\"><a href=\"#5-git\" class=\"headerlink\" title=\"5.git\"></a>5.git</h3><p>Git是目前世界上最先进的分布式版本控制系统，适合于在团队合作时进行版本控制，提高开发效率</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">推荐教程：廖雪峰老师的关于git的教程博客</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-理解前端语言新标准-HTML5、CSS3、ES6-及其特性\"><a href=\"#6-理解前端语言新标准-HTML5、CSS3、ES6-及其特性\" class=\"headerlink\" title=\"6.理解前端语言新标准 HTML5、CSS3、ES6 及其特性\"></a>6.理解前端语言新标准 HTML5、CSS3、ES6 及其特性</h3><p>熟练使用 HTML、CSS、JavaScript 还需要我们理解其语言最新相关标准：HTML5、CSS3 和 ES6(ECMAScript6)。</p>\n<ul>\n<li>HTML 5 里新增了许多特性：语义化和新的音频、视频支持等；</li>\n<li>CSS 3 被划分为模块，解决了 CSS2 为等待各个标准统一而耗费大量时间才能推进的不足之处，同时也提供了 2D、3D、动画效果等新特性；</li>\n<li>ECMAScript6 等于 JavaScript - DOM - BOM，是 JavaScript 在 2015 年的最新标准，因为 ES6 对标准改动较大，前端开发者常常将一个前端项目是否支持 ES6 作为推进前端新技术的重要桥梁之一。ES6 将箭头函数、let 变量声明命令、Promise 编程、模块化编程等新特性纳入其标准中，得到了各大浏览器最新版本的支持。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">扩展阅读：《ES6 标准入门(第2版)》</span><br><span class=\"line\">          《深入理解ES6》</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-掌握浏览器兼容、响应式布局相关解决方案\"><a href=\"#7-掌握浏览器兼容、响应式布局相关解决方案\" class=\"headerlink\" title=\"7.掌握浏览器兼容、响应式布局相关解决方案\"></a>7.掌握浏览器兼容、响应式布局相关解决方案</h3><p>早期占据浏览器半壁江山的IE浏览器上存在的众多浏览器兼容问题，耗费了当时前端开发者的大量开发时间。虽然说现在的前端开发者已经不需要考虑太多的浏览器兼容问题，对其概念的了解有利于了解前端历史包袱或在未来足以应对一些面向特殊群体(早期 IE 浏览器使用者)的前端项目。<br><strong>关于IE浏览器的兼容性问题在李炎恢老师的那个视频有详细的讲解</strong></p>\n<p>响应式布局和单页面应用是当代前端开发者的必备技能。从 Web Pages 到 Web App 时代，我们开发的前端项目有越来越多的可能需要同时在电脑端和手机端进行访问，一个有良好响应式布局的前端项目可以一个代码运行在多种不同分辨率的平台之上。</p>\n<h2 id=\"三、现在前端主流的框架\"><a href=\"#三、现在前端主流的框架\" class=\"headerlink\" title=\"三、现在前端主流的框架\"></a>三、现在前端主流的框架</h2><h3 id=\"1-vuejs-2016年最火的前端框架（MVVC框架）\"><a href=\"#1-vuejs-2016年最火的前端框架（MVVC框架）\" class=\"headerlink\" title=\"1. vuejs :2016年最火的前端框架（MVVC框架）\"></a>1. vuejs :2016年最火的前端框架（MVVC框架）</h3><p>是一套用于构建用户界面的渐进式框架Vue的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p>\n<p><strong>常用于单页面应用的开发</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">掌握的要点：(vue全家桶)</span><br><span class=\"line\">   1.vue-router</span><br><span class=\"line\">   2.vuex</span><br><span class=\"line\">   3.vue-resource</span><br><span class=\"line\">   4.vue-cli</span><br><span class=\"line\">   5.Element-ui</span><br><span class=\"line\">   </span><br><span class=\"line\">推荐教程：详细阅读官网教程，中国人自己研发的，有中文版，不难</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-Reactjs\"><a href=\"#2-Reactjs\" class=\"headerlink\" title=\"2. Reactjs\"></a>2. Reactjs</h3><p>React 是一个用于构建用户界面的 javascript 库。</p>\n<p>React主要用于构建UI，很多人认为 React 是 MVC 中的 V（视图）。</p>\n<p>React 起源于 Facebook 的内部项目，用来架设 Instagram 的网站，并于 2013 年 5 月开源。</p>\n<p>React 拥有较高的性能，代码逻辑非常简单，越来越多的人已开始关注和使用它。</p>\n<p><strong>React特点：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.声明式设计 −React采用声明范式，可以轻松描述应用。</span><br><span class=\"line\">2.高效 −React通过对DOM的模拟，最大限度地减少与DOM的交互。</span><br><span class=\"line\">3.灵活 −React可以与已知的库或框架很好地配合。</span><br><span class=\"line\">4.JSX − JSX 是 JavaScript 语法的扩展。React 开发不一定使用 JSX ，但我们建议使用它。</span><br><span class=\"line\">5.组件 − 通过 React 构建组件，使得代码更加容易得到复用，能够很好的应用在大项目的开发中。</span><br><span class=\"line\">6.单向响应的数据流 − React实现了单向响应的数据流，从而减少了重复代码，这也是它为什么比传统数据绑定更简单。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">掌握的知识点：（React全家桶技术）</span><br><span class=\"line\">  1.Reactjs</span><br><span class=\"line\">  2.React生命周期</span><br><span class=\"line\">  3.React Router</span><br><span class=\"line\">  4.Redux</span><br><span class=\"line\">  5.React Native(主要用于移动端的开发)</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-AngularJS（国外开发大型项目常用框架）\"><a href=\"#3-AngularJS（国外开发大型项目常用框架）\" class=\"headerlink\" title=\"3.AngularJS（国外开发大型项目常用框架）\"></a>3.AngularJS（国外开发大型项目常用框架）</h2><p>AngularJS的四大功能：</p>\n<ol>\n<li><p>MVC</p>\n<p>将后台的MVC模式写入了前端语言中。我总觉得前端语言将来会很叼，从node.js开始我就又一种这样的感觉。可能在很久之后取代后端语言不是没有可能的。</p>\n<ol start=\"2\">\n<li>模块化</li>\n</ol>\n<p>就是一系列函数的集合，当应用被启动时，这些函数就会被执行。主要利用angular.module来定义模块。也是Angular.js的亮点。</p>\n</li>\n<li><p>指令属性</p>\n</li>\n</ol>\n<p>我自己的理解就是比html标签更加具有属性和方法的指令标签</p>\n<ol start=\"4\">\n<li>双向数据绑定</li>\n</ol>\n<p>传统的数据绑定是单向绑定，数据只能从model和controller生成需要的html，但是不能返过来使用。只是单方向的。双向数据绑定:也就是说我在前面填写，后面直接生成代码，将填写的显示出来。双向的意思就是如果view修改了属性值，那么model机会看到这个改变。相反也是一样的。</p>\n<h2 id=\"4-小程序（类似一个前端开发框架）\"><a href=\"#4-小程序（类似一个前端开发框架）\" class=\"headerlink\" title=\"4. 小程序（类似一个前端开发框架）\"></a>4. 小程序（类似一个前端开发框架）</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">推荐教程：官网上的小程序开发文档，尝试动手写一下小程序</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-nodejs-前端用来写后台的工具\"><a href=\"#5-nodejs-前端用来写后台的工具\" class=\"headerlink\" title=\"5.nodejs(前端用来写后台的工具)\"></a>5.nodejs(前端用来写后台的工具)</h2><p>简单的说 Node.js 就是运行在服务端的 JavaScript。</p>\n<p>Node.js 是一个基于Chrome JavaScript 运行时建立的一个平台。</p>\n<p>Node.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">推荐教程：官网的教程</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"四、一些常用的ui框架\"><a href=\"#四、一些常用的ui框架\" class=\"headerlink\" title=\"四、一些常用的ui框架\"></a>四、一些常用的ui框架</h2><h4 id=\"1-Bootstrape：最好的响应式css框架\"><a href=\"#1-Bootstrape：最好的响应式css框架\" class=\"headerlink\" title=\"1. Bootstrape：最好的响应式css框架\"></a>1. Bootstrape：最好的响应式css框架</h4><h4 id=\"2-Element-ui：完美适应vuejs的ui框架\"><a href=\"#2-Element-ui：完美适应vuejs的ui框架\" class=\"headerlink\" title=\"2. Element-ui：完美适应vuejs的ui框架\"></a>2. Element-ui：完美适应vuejs的ui框架</h4><h4 id=\"3-Amazeui：Amaze-UI-是一个轻量级、-Mobile-first-的前端框架-基于开源社区流行前端框架编写的。\"><a href=\"#3-Amazeui：Amaze-UI-是一个轻量级、-Mobile-first-的前端框架-基于开源社区流行前端框架编写的。\" class=\"headerlink\" title=\"3. Amazeui：Amaze UI 是一个轻量级、 Mobile first 的前端框架, 基于开源社区流行前端框架编写的。\"></a>3. Amazeui：Amaze UI 是一个轻量级、 Mobile first 的前端框架, 基于开源社区流行前端框架编写的。</h4><h4 id=\"4-Aliceui\"><a href=\"#4-Aliceui\" class=\"headerlink\" title=\"4. Aliceui\"></a>4. Aliceui</h4><h4 id=\"5-Echart：最好的图表制作框架\"><a href=\"#5-Echart：最好的图表制作框架\" class=\"headerlink\" title=\"5.Echart：最好的图表制作框架\"></a>5.Echart：最好的图表制作框架</h4><h4 id=\"·····\"><a href=\"#·····\" class=\"headerlink\" title=\"·····\"></a>·····</h4><h2 id=\"六、前端最好掌握的一些常用技能\"><a href=\"#六、前端最好掌握的一些常用技能\" class=\"headerlink\" title=\"六、前端最好掌握的一些常用技能\"></a>六、前端最好掌握的一些常用技能</h2><ol>\n<li>Markdown笔记的使用，程序员专用笔记本</li>\n<li>github的使用：全球最大的开源代码网站，在上面你可以找到全世界所有出名项目的源代码，被称为人类的知识宝库。</li>\n<li>用github page搭建个人博客，上传个人项目到github上，面试加分必备项</li>\n<li>移动端的开发</li>\n<li><p>前端web开发命名规范，谷歌、百度命名标准</p>\n<p>等等·······</p>\n</li>\n</ol>\n"},{"title":"回流（Reflow）和重绘（Repaint）","date":"2020-02-14T16:00:00.000Z","comments":1,"_content":"\n### 浏览器渲染\n解析HTML，生成DOM树，解析CSS，生成CSSOM树。将DOM树和CSSOM树结合，生成渲染树（Render Tree）。\n\n### 回流\n当render tree中的一部分(或全部)因为元素的规模尺寸，布局，隐藏等改变而需要重新构建。这就称为回流。\n\n每个页面至少需要一次回流，就是在页面第一次加载的时候，这时候是一定会发生回流的，因为要构建render tree。\n\n### 重绘\n当render tree中的一些元素需要更新属性，而这些属性只是影响元素的外观，风格，而不会影响布局的，比如background-color。则就叫称为重绘。\n\n\n\n> 回流必定触发重绘，而重绘不一定触发回流。","source":"_posts/前端/回流（Reflow）和重绘（Repaint）.md","raw":"---\ntitle: 回流（Reflow）和重绘（Repaint）\ndate: 2020-02-15\ntags: [前端]\ncategories: 前端\ncomments: true\n---\n\n### 浏览器渲染\n解析HTML，生成DOM树，解析CSS，生成CSSOM树。将DOM树和CSSOM树结合，生成渲染树（Render Tree）。\n\n### 回流\n当render tree中的一部分(或全部)因为元素的规模尺寸，布局，隐藏等改变而需要重新构建。这就称为回流。\n\n每个页面至少需要一次回流，就是在页面第一次加载的时候，这时候是一定会发生回流的，因为要构建render tree。\n\n### 重绘\n当render tree中的一些元素需要更新属性，而这些属性只是影响元素的外观，风格，而不会影响布局的，比如background-color。则就叫称为重绘。\n\n\n\n> 回流必定触发重绘，而重绘不一定触发回流。","slug":"前端/回流（Reflow）和重绘（Repaint）","published":1,"updated":"2022-07-22T10:11:30.419Z","layout":"post","photos":[],"link":"","_id":"cl5wb2yn300ckcj38ff04o1n6","content":"<h3 id=\"浏览器渲染\"><a href=\"#浏览器渲染\" class=\"headerlink\" title=\"浏览器渲染\"></a>浏览器渲染</h3><p>解析HTML，生成DOM树，解析CSS，生成CSSOM树。将DOM树和CSSOM树结合，生成渲染树（Render Tree）。</p>\n<h3 id=\"回流\"><a href=\"#回流\" class=\"headerlink\" title=\"回流\"></a>回流</h3><p>当render tree中的一部分(或全部)因为元素的规模尺寸，布局，隐藏等改变而需要重新构建。这就称为回流。</p>\n<p>每个页面至少需要一次回流，就是在页面第一次加载的时候，这时候是一定会发生回流的，因为要构建render tree。</p>\n<h3 id=\"重绘\"><a href=\"#重绘\" class=\"headerlink\" title=\"重绘\"></a>重绘</h3><p>当render tree中的一些元素需要更新属性，而这些属性只是影响元素的外观，风格，而不会影响布局的，比如background-color。则就叫称为重绘。</p>\n<blockquote>\n<p>回流必定触发重绘，而重绘不一定触发回流。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"浏览器渲染\"><a href=\"#浏览器渲染\" class=\"headerlink\" title=\"浏览器渲染\"></a>浏览器渲染</h3><p>解析HTML，生成DOM树，解析CSS，生成CSSOM树。将DOM树和CSSOM树结合，生成渲染树（Render Tree）。</p>\n<h3 id=\"回流\"><a href=\"#回流\" class=\"headerlink\" title=\"回流\"></a>回流</h3><p>当render tree中的一部分(或全部)因为元素的规模尺寸，布局，隐藏等改变而需要重新构建。这就称为回流。</p>\n<p>每个页面至少需要一次回流，就是在页面第一次加载的时候，这时候是一定会发生回流的，因为要构建render tree。</p>\n<h3 id=\"重绘\"><a href=\"#重绘\" class=\"headerlink\" title=\"重绘\"></a>重绘</h3><p>当render tree中的一些元素需要更新属性，而这些属性只是影响元素的外观，风格，而不会影响布局的，比如background-color。则就叫称为重绘。</p>\n<blockquote>\n<p>回流必定触发重绘，而重绘不一定触发回流。</p>\n</blockquote>\n"},{"title":"本地存储方式","date":"2019-03-04T16:00:00.000Z","comments":1,"_content":"\n### cookie、localStorage、sessionStorage\n相同：在本地（浏览器端）存储数据。\n\n不同\n- localStorage只要在相同的协议、相同的主机名、相同的端口下，就能读取/修改到同一份localStorage数据。\n- sessionStorage比localStorage更严苛一点，除了协议、主机名、端口外，还要求在同一窗口（也就是浏览器的标签页）下。\n- localStorage是永久存储，除非手动删除。\n- sessionStorage当会话结束（当前页面关闭的时候，自动销毁）\n- cookie的数据会在每一次发送http请求的时候，同时发送给服务器，而localStorage、sessionStorage不会。\n- 每个cookie存放的内容大小有限制，一般为4kb。","source":"_posts/前端/本地存储方式.md","raw":"---\ntitle: 本地存储方式\ndate: 2019-03-05\ntags: [前端]\ncategories: 前端\ncomments: true\n---\n\n### cookie、localStorage、sessionStorage\n相同：在本地（浏览器端）存储数据。\n\n不同\n- localStorage只要在相同的协议、相同的主机名、相同的端口下，就能读取/修改到同一份localStorage数据。\n- sessionStorage比localStorage更严苛一点，除了协议、主机名、端口外，还要求在同一窗口（也就是浏览器的标签页）下。\n- localStorage是永久存储，除非手动删除。\n- sessionStorage当会话结束（当前页面关闭的时候，自动销毁）\n- cookie的数据会在每一次发送http请求的时候，同时发送给服务器，而localStorage、sessionStorage不会。\n- 每个cookie存放的内容大小有限制，一般为4kb。","slug":"前端/本地存储方式","published":1,"updated":"2022-07-22T10:11:01.094Z","layout":"post","photos":[],"link":"","_id":"cl5wb2yn400cmcj389e818l05","content":"<h3 id=\"cookie、localStorage、sessionStorage\"><a href=\"#cookie、localStorage、sessionStorage\" class=\"headerlink\" title=\"cookie、localStorage、sessionStorage\"></a>cookie、localStorage、sessionStorage</h3><p>相同：在本地（浏览器端）存储数据。</p>\n<p>不同</p>\n<ul>\n<li>localStorage只要在相同的协议、相同的主机名、相同的端口下，就能读取/修改到同一份localStorage数据。</li>\n<li>sessionStorage比localStorage更严苛一点，除了协议、主机名、端口外，还要求在同一窗口（也就是浏览器的标签页）下。</li>\n<li>localStorage是永久存储，除非手动删除。</li>\n<li>sessionStorage当会话结束（当前页面关闭的时候，自动销毁）</li>\n<li>cookie的数据会在每一次发送http请求的时候，同时发送给服务器，而localStorage、sessionStorage不会。</li>\n<li>每个cookie存放的内容大小有限制，一般为4kb。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"cookie、localStorage、sessionStorage\"><a href=\"#cookie、localStorage、sessionStorage\" class=\"headerlink\" title=\"cookie、localStorage、sessionStorage\"></a>cookie、localStorage、sessionStorage</h3><p>相同：在本地（浏览器端）存储数据。</p>\n<p>不同</p>\n<ul>\n<li>localStorage只要在相同的协议、相同的主机名、相同的端口下，就能读取/修改到同一份localStorage数据。</li>\n<li>sessionStorage比localStorage更严苛一点，除了协议、主机名、端口外，还要求在同一窗口（也就是浏览器的标签页）下。</li>\n<li>localStorage是永久存储，除非手动删除。</li>\n<li>sessionStorage当会话结束（当前页面关闭的时候，自动销毁）</li>\n<li>cookie的数据会在每一次发送http请求的时候，同时发送给服务器，而localStorage、sessionStorage不会。</li>\n<li>每个cookie存放的内容大小有限制，一般为4kb。</li>\n</ul>\n"},{"title":"浏览器兼容问题","date":"2019-04-24T16:00:00.000Z","comments":1,"_content":"\n### css\n不同浏览器的标签默认的margin和padding不同\n\n```\n//解决\n*{\n    padding:0;\n    margin:0;\n}\n```\n对于一些新特性，低版本浏览器不兼容，可以用渐进增强或优雅降级。\n\n### js\n#### 阻止冒泡\n\n```\nfunction canclebubble(event){ \n    var event = event||window.event; //兼容火狐\n    if(event.stopPropagation){   \n        event.stopPropagation(); //标准浏览器\n    }else{ \n        event.cancaleBubble==true; //老ie \n    } \n}  \n```\n#### 取消默认事件\n\n```\nfunction stopevent(event){ \n    var event = event||window.event; //兼容火狐\n    if(event.preventDefault){\n        event.preventDefault(); //标准浏览器 \n    }else{\n        event.returnValue==false; //老ie \n    } \n} \n\n```\n注意\n1. event代表事件的状态，例如触发event对象的元素、鼠标的位置及状态、按下的键等等；\n2. event对象只在事件发生的过程中才有效。\n3. firefox里的event跟IE里的不同，IE里的是全局变量，随时可用；firefox里的要用参数引导才能用，是运行时的临时变量。\n4. 在IE/Opera中是window.event，在Firefox中是event；而事件的对象，在IE中是window.event.srcElement，在Firefox中是event.target，Opera中两者都可用。","source":"_posts/前端/浏览器兼容问题.md","raw":"---\ntitle: 浏览器兼容问题\ndate: 2019-04-25\ntags: [前端]\ncategories: 前端\ncomments: true\n---\n\n### css\n不同浏览器的标签默认的margin和padding不同\n\n```\n//解决\n*{\n    padding:0;\n    margin:0;\n}\n```\n对于一些新特性，低版本浏览器不兼容，可以用渐进增强或优雅降级。\n\n### js\n#### 阻止冒泡\n\n```\nfunction canclebubble(event){ \n    var event = event||window.event; //兼容火狐\n    if(event.stopPropagation){   \n        event.stopPropagation(); //标准浏览器\n    }else{ \n        event.cancaleBubble==true; //老ie \n    } \n}  \n```\n#### 取消默认事件\n\n```\nfunction stopevent(event){ \n    var event = event||window.event; //兼容火狐\n    if(event.preventDefault){\n        event.preventDefault(); //标准浏览器 \n    }else{\n        event.returnValue==false; //老ie \n    } \n} \n\n```\n注意\n1. event代表事件的状态，例如触发event对象的元素、鼠标的位置及状态、按下的键等等；\n2. event对象只在事件发生的过程中才有效。\n3. firefox里的event跟IE里的不同，IE里的是全局变量，随时可用；firefox里的要用参数引导才能用，是运行时的临时变量。\n4. 在IE/Opera中是window.event，在Firefox中是event；而事件的对象，在IE中是window.event.srcElement，在Firefox中是event.target，Opera中两者都可用。","slug":"前端/浏览器兼容问题","published":1,"updated":"2022-07-22T10:11:32.881Z","layout":"post","photos":[],"link":"","_id":"cl5wb2yn500cqcj38r6eobbbb","content":"<h3 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a>css</h3><p>不同浏览器的标签默认的margin和padding不同</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//解决</span><br><span class=\"line\">*&#123;</span><br><span class=\"line\">    padding:0;</span><br><span class=\"line\">    margin:0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于一些新特性，低版本浏览器不兼容，可以用渐进增强或优雅降级。</p>\n<h3 id=\"js\"><a href=\"#js\" class=\"headerlink\" title=\"js\"></a>js</h3><h4 id=\"阻止冒泡\"><a href=\"#阻止冒泡\" class=\"headerlink\" title=\"阻止冒泡\"></a>阻止冒泡</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function canclebubble(event)&#123; </span><br><span class=\"line\">    var event = event||window.event; //兼容火狐</span><br><span class=\"line\">    if(event.stopPropagation)&#123;   </span><br><span class=\"line\">        event.stopPropagation(); //标准浏览器</span><br><span class=\"line\">    &#125;else&#123; </span><br><span class=\"line\">        event.cancaleBubble==true; //老ie </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"取消默认事件\"><a href=\"#取消默认事件\" class=\"headerlink\" title=\"取消默认事件\"></a>取消默认事件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function stopevent(event)&#123; </span><br><span class=\"line\">    var event = event||window.event; //兼容火狐</span><br><span class=\"line\">    if(event.preventDefault)&#123;</span><br><span class=\"line\">        event.preventDefault(); //标准浏览器 </span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        event.returnValue==false; //老ie </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意</p>\n<ol>\n<li>event代表事件的状态，例如触发event对象的元素、鼠标的位置及状态、按下的键等等；</li>\n<li>event对象只在事件发生的过程中才有效。</li>\n<li>firefox里的event跟IE里的不同，IE里的是全局变量，随时可用；firefox里的要用参数引导才能用，是运行时的临时变量。</li>\n<li>在IE/Opera中是window.event，在Firefox中是event；而事件的对象，在IE中是window.event.srcElement，在Firefox中是event.target，Opera中两者都可用。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a>css</h3><p>不同浏览器的标签默认的margin和padding不同</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//解决</span><br><span class=\"line\">*&#123;</span><br><span class=\"line\">    padding:0;</span><br><span class=\"line\">    margin:0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于一些新特性，低版本浏览器不兼容，可以用渐进增强或优雅降级。</p>\n<h3 id=\"js\"><a href=\"#js\" class=\"headerlink\" title=\"js\"></a>js</h3><h4 id=\"阻止冒泡\"><a href=\"#阻止冒泡\" class=\"headerlink\" title=\"阻止冒泡\"></a>阻止冒泡</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function canclebubble(event)&#123; </span><br><span class=\"line\">    var event = event||window.event; //兼容火狐</span><br><span class=\"line\">    if(event.stopPropagation)&#123;   </span><br><span class=\"line\">        event.stopPropagation(); //标准浏览器</span><br><span class=\"line\">    &#125;else&#123; </span><br><span class=\"line\">        event.cancaleBubble==true; //老ie </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"取消默认事件\"><a href=\"#取消默认事件\" class=\"headerlink\" title=\"取消默认事件\"></a>取消默认事件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function stopevent(event)&#123; </span><br><span class=\"line\">    var event = event||window.event; //兼容火狐</span><br><span class=\"line\">    if(event.preventDefault)&#123;</span><br><span class=\"line\">        event.preventDefault(); //标准浏览器 </span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        event.returnValue==false; //老ie </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意</p>\n<ol>\n<li>event代表事件的状态，例如触发event对象的元素、鼠标的位置及状态、按下的键等等；</li>\n<li>event对象只在事件发生的过程中才有效。</li>\n<li>firefox里的event跟IE里的不同，IE里的是全局变量，随时可用；firefox里的要用参数引导才能用，是运行时的临时变量。</li>\n<li>在IE/Opera中是window.event，在Firefox中是event；而事件的对象，在IE中是window.event.srcElement，在Firefox中是event.target，Opera中两者都可用。</li>\n</ol>\n"},{"title":"whistle：利用whistle mock 数据","date":"2020-07-16T16:00:00.000Z","comments":1,"_content":"\n## vase\nvase 是 whistle 提供了一个强大的 mock 数据的插件，强大之处是可以结合 js 语句 + mock 语法去生成数据。\n\n### 安装\n\n```\n$ npm i -g whistle.vase\n```\n\n### 使用\n在whistle界面的“Plugins”菜单中可以打开 vase 的界面\n\n#### mock 语法\n在vase界面新建配置 “mock_json_demo”，并选择模板为 mock，输入\n\n```\n// mock 语法\n{\n    \"list|5\": [\n        {\n            \"name\": \"@string\",\n            \"avatar\": \"http://lorempixel.com/100/100/\",\n            \"id|+1\": 10000\n        }\n    ]\n}\n```\n然后在“Rules”中配置一条规则\n\n```\nhttp://mock.local/data.json vase://mock_json_demo\n```\n打开测试地址 http://mock.local/data.json ，即可看到模拟的数据。\n\n#### js 语法\n在vase界面新建配置 “json_engine_script”，并选择模板为 script，输入\n\n```\n// js 语法\nvar json = merge({\n    page: req.query.pi, // 取url查询参数的分页字段，加到要返回的数据里，达到模拟分页数据的效果\n    total: 60\n}, render('mock_json_demo', null, 'mock')); // render 可以渲染上文提到名为“mock_json_demo”的数据模板，返回一个json\n \nif (req.query.callback) { // 如果查询参数带了callback，则返回jsonp\n    out(header('content-type', 'application/javascript; charset=utf8'));\n    var json_text = join([req.query.callback + '(', json, ')']); // join是内置方法，可合并一组数据\n    out(json_text); // 向body输出数据\n} else { // 没有callback则返回json\n    out(header('content-type', 'application/json; charset=utf8'));\n    out(json);\n}\n```\n然后在“Rules”中配置一条规则\n\n```\nhttp://mock.local/data.json vase://json_engine_script\n```\n打开 http://mock.local/data.json?callback=cb&pi=1 ，即可看到模拟的数据，可尝试改变、删除 callback、pi 参数，会发现返回的数据会随之改变。","source":"_posts/前端/whistle：利用whistle mock 数据.md","raw":"---\ntitle: whistle：利用whistle mock 数据\ndate: 2020-07-17\ntags: [前端]\ncategories: 前端\ncomments: true\n---\n\n## vase\nvase 是 whistle 提供了一个强大的 mock 数据的插件，强大之处是可以结合 js 语句 + mock 语法去生成数据。\n\n### 安装\n\n```\n$ npm i -g whistle.vase\n```\n\n### 使用\n在whistle界面的“Plugins”菜单中可以打开 vase 的界面\n\n#### mock 语法\n在vase界面新建配置 “mock_json_demo”，并选择模板为 mock，输入\n\n```\n// mock 语法\n{\n    \"list|5\": [\n        {\n            \"name\": \"@string\",\n            \"avatar\": \"http://lorempixel.com/100/100/\",\n            \"id|+1\": 10000\n        }\n    ]\n}\n```\n然后在“Rules”中配置一条规则\n\n```\nhttp://mock.local/data.json vase://mock_json_demo\n```\n打开测试地址 http://mock.local/data.json ，即可看到模拟的数据。\n\n#### js 语法\n在vase界面新建配置 “json_engine_script”，并选择模板为 script，输入\n\n```\n// js 语法\nvar json = merge({\n    page: req.query.pi, // 取url查询参数的分页字段，加到要返回的数据里，达到模拟分页数据的效果\n    total: 60\n}, render('mock_json_demo', null, 'mock')); // render 可以渲染上文提到名为“mock_json_demo”的数据模板，返回一个json\n \nif (req.query.callback) { // 如果查询参数带了callback，则返回jsonp\n    out(header('content-type', 'application/javascript; charset=utf8'));\n    var json_text = join([req.query.callback + '(', json, ')']); // join是内置方法，可合并一组数据\n    out(json_text); // 向body输出数据\n} else { // 没有callback则返回json\n    out(header('content-type', 'application/json; charset=utf8'));\n    out(json);\n}\n```\n然后在“Rules”中配置一条规则\n\n```\nhttp://mock.local/data.json vase://json_engine_script\n```\n打开 http://mock.local/data.json?callback=cb&pi=1 ，即可看到模拟的数据，可尝试改变、删除 callback、pi 参数，会发现返回的数据会随之改变。","slug":"前端/whistle：利用whistle mock 数据","published":1,"updated":"2022-07-22T10:11:22.563Z","layout":"post","photos":[],"link":"","_id":"cl5wb2yn600cscj381rwcqqlu","content":"<h2 id=\"vase\"><a href=\"#vase\" class=\"headerlink\" title=\"vase\"></a>vase</h2><p>vase 是 whistle 提供了一个强大的 mock 数据的插件，强大之处是可以结合 js 语句 + mock 语法去生成数据。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm i -g whistle.vase</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>在whistle界面的“Plugins”菜单中可以打开 vase 的界面</p>\n<h4 id=\"mock-语法\"><a href=\"#mock-语法\" class=\"headerlink\" title=\"mock 语法\"></a>mock 语法</h4><p>在vase界面新建配置 “mock_json_demo”，并选择模板为 mock，输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// mock 语法</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;list|5&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;name&quot;: &quot;@string&quot;,</span><br><span class=\"line\">            &quot;avatar&quot;: &quot;http://lorempixel.com/100/100/&quot;,</span><br><span class=\"line\">            &quot;id|+1&quot;: 10000</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在“Rules”中配置一条规则</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://mock.local/data.json vase://mock_json_demo</span><br></pre></td></tr></table></figure>\n<p>打开测试地址 <a href=\"http://mock.local/data.json\" target=\"_blank\" rel=\"noopener\">http://mock.local/data.json</a> ，即可看到模拟的数据。</p>\n<h4 id=\"js-语法\"><a href=\"#js-语法\" class=\"headerlink\" title=\"js 语法\"></a>js 语法</h4><p>在vase界面新建配置 “json_engine_script”，并选择模板为 script，输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// js 语法</span><br><span class=\"line\">var json = merge(&#123;</span><br><span class=\"line\">    page: req.query.pi, // 取url查询参数的分页字段，加到要返回的数据里，达到模拟分页数据的效果</span><br><span class=\"line\">    total: 60</span><br><span class=\"line\">&#125;, render(&apos;mock_json_demo&apos;, null, &apos;mock&apos;)); // render 可以渲染上文提到名为“mock_json_demo”的数据模板，返回一个json</span><br><span class=\"line\"> </span><br><span class=\"line\">if (req.query.callback) &#123; // 如果查询参数带了callback，则返回jsonp</span><br><span class=\"line\">    out(header(&apos;content-type&apos;, &apos;application/javascript; charset=utf8&apos;));</span><br><span class=\"line\">    var json_text = join([req.query.callback + &apos;(&apos;, json, &apos;)&apos;]); // join是内置方法，可合并一组数据</span><br><span class=\"line\">    out(json_text); // 向body输出数据</span><br><span class=\"line\">&#125; else &#123; // 没有callback则返回json</span><br><span class=\"line\">    out(header(&apos;content-type&apos;, &apos;application/json; charset=utf8&apos;));</span><br><span class=\"line\">    out(json);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在“Rules”中配置一条规则</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://mock.local/data.json vase://json_engine_script</span><br></pre></td></tr></table></figure>\n<p>打开 <a href=\"http://mock.local/data.json?callback=cb&amp;pi=1\" target=\"_blank\" rel=\"noopener\">http://mock.local/data.json?callback=cb&amp;pi=1</a> ，即可看到模拟的数据，可尝试改变、删除 callback、pi 参数，会发现返回的数据会随之改变。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"vase\"><a href=\"#vase\" class=\"headerlink\" title=\"vase\"></a>vase</h2><p>vase 是 whistle 提供了一个强大的 mock 数据的插件，强大之处是可以结合 js 语句 + mock 语法去生成数据。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm i -g whistle.vase</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>在whistle界面的“Plugins”菜单中可以打开 vase 的界面</p>\n<h4 id=\"mock-语法\"><a href=\"#mock-语法\" class=\"headerlink\" title=\"mock 语法\"></a>mock 语法</h4><p>在vase界面新建配置 “mock_json_demo”，并选择模板为 mock，输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// mock 语法</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;list|5&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;name&quot;: &quot;@string&quot;,</span><br><span class=\"line\">            &quot;avatar&quot;: &quot;http://lorempixel.com/100/100/&quot;,</span><br><span class=\"line\">            &quot;id|+1&quot;: 10000</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在“Rules”中配置一条规则</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://mock.local/data.json vase://mock_json_demo</span><br></pre></td></tr></table></figure>\n<p>打开测试地址 <a href=\"http://mock.local/data.json\" target=\"_blank\" rel=\"noopener\">http://mock.local/data.json</a> ，即可看到模拟的数据。</p>\n<h4 id=\"js-语法\"><a href=\"#js-语法\" class=\"headerlink\" title=\"js 语法\"></a>js 语法</h4><p>在vase界面新建配置 “json_engine_script”，并选择模板为 script，输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// js 语法</span><br><span class=\"line\">var json = merge(&#123;</span><br><span class=\"line\">    page: req.query.pi, // 取url查询参数的分页字段，加到要返回的数据里，达到模拟分页数据的效果</span><br><span class=\"line\">    total: 60</span><br><span class=\"line\">&#125;, render(&apos;mock_json_demo&apos;, null, &apos;mock&apos;)); // render 可以渲染上文提到名为“mock_json_demo”的数据模板，返回一个json</span><br><span class=\"line\"> </span><br><span class=\"line\">if (req.query.callback) &#123; // 如果查询参数带了callback，则返回jsonp</span><br><span class=\"line\">    out(header(&apos;content-type&apos;, &apos;application/javascript; charset=utf8&apos;));</span><br><span class=\"line\">    var json_text = join([req.query.callback + &apos;(&apos;, json, &apos;)&apos;]); // join是内置方法，可合并一组数据</span><br><span class=\"line\">    out(json_text); // 向body输出数据</span><br><span class=\"line\">&#125; else &#123; // 没有callback则返回json</span><br><span class=\"line\">    out(header(&apos;content-type&apos;, &apos;application/json; charset=utf8&apos;));</span><br><span class=\"line\">    out(json);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在“Rules”中配置一条规则</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://mock.local/data.json vase://json_engine_script</span><br></pre></td></tr></table></figure>\n<p>打开 <a href=\"http://mock.local/data.json?callback=cb&amp;pi=1\" target=\"_blank\" rel=\"noopener\">http://mock.local/data.json?callback=cb&amp;pi=1</a> ，即可看到模拟的数据，可尝试改变、删除 callback、pi 参数，会发现返回的数据会随之改变。</p>\n"},{"title":"浏览器本地缓存","date":"2020-05-13T16:00:00.000Z","comments":1,"_content":"\n### 定义\n缓存是性能优化中简单高效的一种优化方式。\n\n和本地存储不一样，浏览器缓存是浏览器请求网站留下的资源副本。\n### 好处\n1. 减少带宽消耗\n2. 提升性能\n3. 缓解服务器压力\n\n### 缓存位置\n1. Service Worker\n2. Memory Cache\n3. Disk Cache\n4. Push Cache\n\n### 缓存策略\n浏览器第一次向服务器发起请求拿到请求结果后，根据请求资源时返回的响应头来确定该不该缓存。\n#### 浏览器常见字段\n- Expires：告知客户端资源缓存失效的绝对时间。\n- Cache-Control：告知客户端或服务器如何处理缓存\n   1. max-age=xxx：表示缓存内容将在缓存时间的xxx秒后失效\n   2. no-cache：表示可以缓存，但每次用都要去向服务器验证缓存是否可用。\n   3. no-store：表示所有内容都不会缓存。\n   4. private：客户端可以缓存。\n   5. public：客户端和代理服务器都可以缓存。默认值。\n- Last-Modified：资源最后一次修改时间。\n- Etag：文件的特殊标识。用于文件内容对比，判断内容是否修改。\n- Cache-Control优先级高于Expires。\n- Etag优先级高于Last-Modified。\n\n#### 强缓存\n1. 根据本地缓存资源的header中的Expires和Cache-Control来判断是否命中强缓存。\n2. 如果命中强缓存则返回缓存的数据。\n3. 如果没有命中则进入协商缓存。\n\n\n#### 协商缓存\n1. 如果没有命中强缓存，浏览器会将本地缓存资源的header中的Last-Modified和Etag的值分别放入请求头的IF-Modified-Since和IF-None-Match字段中，向服务器发送请求，由服务器根据请求中的相关header信息来对比结果是否命中协商缓存。\n2. 若命中即资源未更新，则服务器返回新的响应header信息且返回的http状态为304，但是并不返回资源内容，它会显示一个Not Modified的字符串，来告知浏览器使用缓存。\n3. 否则返回最新的数据，并将新数据存入缓存。\n\n\n#### 总结\n当浏览器再次访问一个已经访问过的资源时，会\n1. 先判断是否存在缓存，再看是否命中强缓存，如果命中，就直接使用缓存了。\n2. 如果没有命中强缓存，就发请求到服务器检查是否命中协商缓存。\n3. 如果命中协商缓存，服务器会返回 304。\n4. 告诉浏览器使用本地缓存。\n5. 否则，返回最新的资源。\n\n### 拓展 \n#### ctrl+F5和F5的区别\nF5只是刷新本地缓存，强缓存无效，协商缓存有效；ctrl+F5是强缓存与协商缓存均无效，重新向服务器请求。\n\n#### 禁止浏览器缓存方法\n1. 设置响应头\n\n```\n//把Cache-Control设置为no-cache\n<meta HTTP-EQUIV=\"Cache-Control\" CONTENT=\"no-cache\">\n```\n2. 在访问的url后添加一个参数，可以是随机数或者时间戳。这样url时刻在变化，就要重新发送http请求\n","source":"_posts/前端/浏览器本地缓存.md","raw":"---\ntitle: 浏览器本地缓存\ndate: 2020-05-14\ntags: [前端]\ncategories: 前端\ncomments: true\n---\n\n### 定义\n缓存是性能优化中简单高效的一种优化方式。\n\n和本地存储不一样，浏览器缓存是浏览器请求网站留下的资源副本。\n### 好处\n1. 减少带宽消耗\n2. 提升性能\n3. 缓解服务器压力\n\n### 缓存位置\n1. Service Worker\n2. Memory Cache\n3. Disk Cache\n4. Push Cache\n\n### 缓存策略\n浏览器第一次向服务器发起请求拿到请求结果后，根据请求资源时返回的响应头来确定该不该缓存。\n#### 浏览器常见字段\n- Expires：告知客户端资源缓存失效的绝对时间。\n- Cache-Control：告知客户端或服务器如何处理缓存\n   1. max-age=xxx：表示缓存内容将在缓存时间的xxx秒后失效\n   2. no-cache：表示可以缓存，但每次用都要去向服务器验证缓存是否可用。\n   3. no-store：表示所有内容都不会缓存。\n   4. private：客户端可以缓存。\n   5. public：客户端和代理服务器都可以缓存。默认值。\n- Last-Modified：资源最后一次修改时间。\n- Etag：文件的特殊标识。用于文件内容对比，判断内容是否修改。\n- Cache-Control优先级高于Expires。\n- Etag优先级高于Last-Modified。\n\n#### 强缓存\n1. 根据本地缓存资源的header中的Expires和Cache-Control来判断是否命中强缓存。\n2. 如果命中强缓存则返回缓存的数据。\n3. 如果没有命中则进入协商缓存。\n\n\n#### 协商缓存\n1. 如果没有命中强缓存，浏览器会将本地缓存资源的header中的Last-Modified和Etag的值分别放入请求头的IF-Modified-Since和IF-None-Match字段中，向服务器发送请求，由服务器根据请求中的相关header信息来对比结果是否命中协商缓存。\n2. 若命中即资源未更新，则服务器返回新的响应header信息且返回的http状态为304，但是并不返回资源内容，它会显示一个Not Modified的字符串，来告知浏览器使用缓存。\n3. 否则返回最新的数据，并将新数据存入缓存。\n\n\n#### 总结\n当浏览器再次访问一个已经访问过的资源时，会\n1. 先判断是否存在缓存，再看是否命中强缓存，如果命中，就直接使用缓存了。\n2. 如果没有命中强缓存，就发请求到服务器检查是否命中协商缓存。\n3. 如果命中协商缓存，服务器会返回 304。\n4. 告诉浏览器使用本地缓存。\n5. 否则，返回最新的资源。\n\n### 拓展 \n#### ctrl+F5和F5的区别\nF5只是刷新本地缓存，强缓存无效，协商缓存有效；ctrl+F5是强缓存与协商缓存均无效，重新向服务器请求。\n\n#### 禁止浏览器缓存方法\n1. 设置响应头\n\n```\n//把Cache-Control设置为no-cache\n<meta HTTP-EQUIV=\"Cache-Control\" CONTENT=\"no-cache\">\n```\n2. 在访问的url后添加一个参数，可以是随机数或者时间戳。这样url时刻在变化，就要重新发送http请求\n","slug":"前端/浏览器本地缓存","published":1,"updated":"2022-07-22T10:11:32.052Z","layout":"post","photos":[],"link":"","_id":"cl5wb2yn700cxcj38mzl4u7hr","content":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>缓存是性能优化中简单高效的一种优化方式。</p>\n<p>和本地存储不一样，浏览器缓存是浏览器请求网站留下的资源副本。</p>\n<h3 id=\"好处\"><a href=\"#好处\" class=\"headerlink\" title=\"好处\"></a>好处</h3><ol>\n<li>减少带宽消耗</li>\n<li>提升性能</li>\n<li>缓解服务器压力</li>\n</ol>\n<h3 id=\"缓存位置\"><a href=\"#缓存位置\" class=\"headerlink\" title=\"缓存位置\"></a>缓存位置</h3><ol>\n<li>Service Worker</li>\n<li>Memory Cache</li>\n<li>Disk Cache</li>\n<li>Push Cache</li>\n</ol>\n<h3 id=\"缓存策略\"><a href=\"#缓存策略\" class=\"headerlink\" title=\"缓存策略\"></a>缓存策略</h3><p>浏览器第一次向服务器发起请求拿到请求结果后，根据请求资源时返回的响应头来确定该不该缓存。</p>\n<h4 id=\"浏览器常见字段\"><a href=\"#浏览器常见字段\" class=\"headerlink\" title=\"浏览器常见字段\"></a>浏览器常见字段</h4><ul>\n<li>Expires：告知客户端资源缓存失效的绝对时间。</li>\n<li>Cache-Control：告知客户端或服务器如何处理缓存<ol>\n<li>max-age=xxx：表示缓存内容将在缓存时间的xxx秒后失效</li>\n<li>no-cache：表示可以缓存，但每次用都要去向服务器验证缓存是否可用。</li>\n<li>no-store：表示所有内容都不会缓存。</li>\n<li>private：客户端可以缓存。</li>\n<li>public：客户端和代理服务器都可以缓存。默认值。</li>\n</ol>\n</li>\n<li>Last-Modified：资源最后一次修改时间。</li>\n<li>Etag：文件的特殊标识。用于文件内容对比，判断内容是否修改。</li>\n<li>Cache-Control优先级高于Expires。</li>\n<li>Etag优先级高于Last-Modified。</li>\n</ul>\n<h4 id=\"强缓存\"><a href=\"#强缓存\" class=\"headerlink\" title=\"强缓存\"></a>强缓存</h4><ol>\n<li>根据本地缓存资源的header中的Expires和Cache-Control来判断是否命中强缓存。</li>\n<li>如果命中强缓存则返回缓存的数据。</li>\n<li>如果没有命中则进入协商缓存。</li>\n</ol>\n<h4 id=\"协商缓存\"><a href=\"#协商缓存\" class=\"headerlink\" title=\"协商缓存\"></a>协商缓存</h4><ol>\n<li>如果没有命中强缓存，浏览器会将本地缓存资源的header中的Last-Modified和Etag的值分别放入请求头的IF-Modified-Since和IF-None-Match字段中，向服务器发送请求，由服务器根据请求中的相关header信息来对比结果是否命中协商缓存。</li>\n<li>若命中即资源未更新，则服务器返回新的响应header信息且返回的http状态为304，但是并不返回资源内容，它会显示一个Not Modified的字符串，来告知浏览器使用缓存。</li>\n<li>否则返回最新的数据，并将新数据存入缓存。</li>\n</ol>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>当浏览器再次访问一个已经访问过的资源时，会</p>\n<ol>\n<li>先判断是否存在缓存，再看是否命中强缓存，如果命中，就直接使用缓存了。</li>\n<li>如果没有命中强缓存，就发请求到服务器检查是否命中协商缓存。</li>\n<li>如果命中协商缓存，服务器会返回 304。</li>\n<li>告诉浏览器使用本地缓存。</li>\n<li>否则，返回最新的资源。</li>\n</ol>\n<h3 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h3><h4 id=\"ctrl-F5和F5的区别\"><a href=\"#ctrl-F5和F5的区别\" class=\"headerlink\" title=\"ctrl+F5和F5的区别\"></a>ctrl+F5和F5的区别</h4><p>F5只是刷新本地缓存，强缓存无效，协商缓存有效；ctrl+F5是强缓存与协商缓存均无效，重新向服务器请求。</p>\n<h4 id=\"禁止浏览器缓存方法\"><a href=\"#禁止浏览器缓存方法\" class=\"headerlink\" title=\"禁止浏览器缓存方法\"></a>禁止浏览器缓存方法</h4><ol>\n<li>设置响应头</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//把Cache-Control设置为no-cache</span><br><span class=\"line\">&lt;meta HTTP-EQUIV=&quot;Cache-Control&quot; CONTENT=&quot;no-cache&quot;&gt;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在访问的url后添加一个参数，可以是随机数或者时间戳。这样url时刻在变化，就要重新发送http请求</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>缓存是性能优化中简单高效的一种优化方式。</p>\n<p>和本地存储不一样，浏览器缓存是浏览器请求网站留下的资源副本。</p>\n<h3 id=\"好处\"><a href=\"#好处\" class=\"headerlink\" title=\"好处\"></a>好处</h3><ol>\n<li>减少带宽消耗</li>\n<li>提升性能</li>\n<li>缓解服务器压力</li>\n</ol>\n<h3 id=\"缓存位置\"><a href=\"#缓存位置\" class=\"headerlink\" title=\"缓存位置\"></a>缓存位置</h3><ol>\n<li>Service Worker</li>\n<li>Memory Cache</li>\n<li>Disk Cache</li>\n<li>Push Cache</li>\n</ol>\n<h3 id=\"缓存策略\"><a href=\"#缓存策略\" class=\"headerlink\" title=\"缓存策略\"></a>缓存策略</h3><p>浏览器第一次向服务器发起请求拿到请求结果后，根据请求资源时返回的响应头来确定该不该缓存。</p>\n<h4 id=\"浏览器常见字段\"><a href=\"#浏览器常见字段\" class=\"headerlink\" title=\"浏览器常见字段\"></a>浏览器常见字段</h4><ul>\n<li>Expires：告知客户端资源缓存失效的绝对时间。</li>\n<li>Cache-Control：告知客户端或服务器如何处理缓存<ol>\n<li>max-age=xxx：表示缓存内容将在缓存时间的xxx秒后失效</li>\n<li>no-cache：表示可以缓存，但每次用都要去向服务器验证缓存是否可用。</li>\n<li>no-store：表示所有内容都不会缓存。</li>\n<li>private：客户端可以缓存。</li>\n<li>public：客户端和代理服务器都可以缓存。默认值。</li>\n</ol>\n</li>\n<li>Last-Modified：资源最后一次修改时间。</li>\n<li>Etag：文件的特殊标识。用于文件内容对比，判断内容是否修改。</li>\n<li>Cache-Control优先级高于Expires。</li>\n<li>Etag优先级高于Last-Modified。</li>\n</ul>\n<h4 id=\"强缓存\"><a href=\"#强缓存\" class=\"headerlink\" title=\"强缓存\"></a>强缓存</h4><ol>\n<li>根据本地缓存资源的header中的Expires和Cache-Control来判断是否命中强缓存。</li>\n<li>如果命中强缓存则返回缓存的数据。</li>\n<li>如果没有命中则进入协商缓存。</li>\n</ol>\n<h4 id=\"协商缓存\"><a href=\"#协商缓存\" class=\"headerlink\" title=\"协商缓存\"></a>协商缓存</h4><ol>\n<li>如果没有命中强缓存，浏览器会将本地缓存资源的header中的Last-Modified和Etag的值分别放入请求头的IF-Modified-Since和IF-None-Match字段中，向服务器发送请求，由服务器根据请求中的相关header信息来对比结果是否命中协商缓存。</li>\n<li>若命中即资源未更新，则服务器返回新的响应header信息且返回的http状态为304，但是并不返回资源内容，它会显示一个Not Modified的字符串，来告知浏览器使用缓存。</li>\n<li>否则返回最新的数据，并将新数据存入缓存。</li>\n</ol>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>当浏览器再次访问一个已经访问过的资源时，会</p>\n<ol>\n<li>先判断是否存在缓存，再看是否命中强缓存，如果命中，就直接使用缓存了。</li>\n<li>如果没有命中强缓存，就发请求到服务器检查是否命中协商缓存。</li>\n<li>如果命中协商缓存，服务器会返回 304。</li>\n<li>告诉浏览器使用本地缓存。</li>\n<li>否则，返回最新的资源。</li>\n</ol>\n<h3 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h3><h4 id=\"ctrl-F5和F5的区别\"><a href=\"#ctrl-F5和F5的区别\" class=\"headerlink\" title=\"ctrl+F5和F5的区别\"></a>ctrl+F5和F5的区别</h4><p>F5只是刷新本地缓存，强缓存无效，协商缓存有效；ctrl+F5是强缓存与协商缓存均无效，重新向服务器请求。</p>\n<h4 id=\"禁止浏览器缓存方法\"><a href=\"#禁止浏览器缓存方法\" class=\"headerlink\" title=\"禁止浏览器缓存方法\"></a>禁止浏览器缓存方法</h4><ol>\n<li>设置响应头</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//把Cache-Control设置为no-cache</span><br><span class=\"line\">&lt;meta HTTP-EQUIV=&quot;Cache-Control&quot; CONTENT=&quot;no-cache&quot;&gt;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在访问的url后添加一个参数，可以是随机数或者时间戳。这样url时刻在变化，就要重新发送http请求</li>\n</ol>\n"},{"title":"浏览器渲染机制","date":"2020-05-13T16:00:00.000Z","comments":1,"_content":"\n### 进程和线程\n- 进程时cpu资源分配的最小单位，是能拥有资源和独立运行的最小的单位。\n- 线程是cpu调度的最小单位，是建立在进程基础上的一次程序运行单位。\n- 对于操作系统来说，一个任务就是一个进程，一个进程至少有一个线程\n\n### 浏览器的多进程架构\n![image](https://user-gold-cdn.xitu.io/2020/1/7/16f7ee19a85b3c8f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n#### 主进程\n负责浏览器界面的显示与交互。各个页面的管理,创建和销毁其他进程。网络的资源管理、下载等。\n#### 第三方插件进程\n每种类型的插件对应一个进程,仅当使用该插件时才创建。\n#### GPU 进程\n最多只有一个,用于 3D 绘制等\n#### 渲染进程\n称为浏览器渲染进程或浏览器内核,内部是多线程的。主要负责页面渲染,脚本执行,事件处理等。\n\n### 渲染进程\n浏览器的渲染进程是多线程的\n![image](https://user-gold-cdn.xitu.io/2020/1/7/16f7ee2d5b4df806?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n#### GUI 渲染线程 \n\n- 负责渲染浏览器界面，解析 HTML、CSS，构建 DOM 树和 RenderObject 树，布局和绘制等。\n- 当界面需要重绘（Repaint）或由于某种操作引发回流(reflow)时，该线程就会执行。\n- 注意，==GUI 渲染线程与 JS 引擎线程是互斥的==，当 JS 引擎执行时 GUI 线程会被挂起（相当于被冻结了），GUI 更新会被保存在一个队列中等到 JS 引擎空闲时立即被执行。\n\n#### JS 引擎线程 \n\n- Javascript 引擎，也称为 JS 内核，负责处理 Javascript 脚本程序。（例如 V8 引擎）\n- JS 引擎线程负责解析 Javascript 脚本，运行代码。\n- JS 引擎一直等待着任务队列中任务的到来,然后加以处理，一个 Tab 页（renderer 进程）中无论什么时候都只有一个 JS 线程在运行 JS 程序。\n- 注意，==GUI 渲染线程与 JS 引擎线程是互斥的==，所以如果 JS 执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞。\n\n#### 事件触发线程 \n\n- 归属于浏览器而不是 JS 引擎，用来控制事件循环（可以理解,JS 引擎自己都忙不过来，需要浏览器另开线程协助）\n- 当 JS 引擎执行代码块如 setTimeOut 时（也可来自浏览器内核的其他线程，如鼠标点击、AJAX 异步请求等），会将对应任务添加到事件线程中\n- 当对应的事件符合触发条件被触发时，该线程会把事件添加到待处理队列的队尾，等待 JS 引擎的处理\n- 注意，由于 JS 的单线程关系，所以这些待处理队列中的事件都得排队等待 JS 引擎处理（当 JS 引擎空闲时才会去执行）\n\n#### 定时触发器线程 \n\n- 传说中的 setInterval 与 setTimeout 所在线程\n- 浏览器定时计数器并不是由 JavaScript 引擎计数的，（因为 JavaScript 引擎是单线程的， 如果处于阻塞线程状态就会影响记计时的准确）\n- 因此通过单独线程来计时并触发定时（计时完毕后,添加到事件队列中，等待 JS 引擎空闲后执行）\n- 注意，W3C 在 HTML 标准中规定,规定要求 setTimeout 中低于 4ms 的时间间隔算为 4ms。\n\n#### 异步 http 请求线程 \n\n- 在 XMLHttpRequest 在连接后是通过浏览器新开一个线程请求。\n- 将检测到状态变更时，如果设置有回调函数，异步线程就产生状态变更事件，将这个回调再放入事件队列中。再由 JavaScript 引擎执行。\n\n### 题目\n#### 1. 为什么 Javascript 要是单线程的 ?\n\n- 如果 JavaScript 是多线程的方式来操作这些 UI DOM,则可能出现 UI 操作的冲突。\n- 如果 Javascript 是多线程的话,在多线程的交互下,处于 UI 中的 DOM 节点就可能成为一个临界资源,\n- 假设存在两个线程同时操作一个 DOM,一个负责修改一个负责删除,那么这个时候就需要浏览器来裁决如何生效哪个线程的执行结果。\n- 当然我们可以通过锁来解决上面的问题。但为了避免因为引入了锁而带来更大的复杂性,Javascript 在最初就选择了单线程执行。\n\n#### 2. 为什么 JS 阻塞页面加载 ?\n\n- 由于 JavaScript 是可操纵 DOM 的,如果在修改这些元素属性同时渲染界面（即 JavaScript 线程和 UI 线程同时运行）,那么渲染线程前后获得的元素数据就可能不一致了。\n- 因此为了防止渲染出现不可预期的结果,浏览器设置 GUI 渲染线程与 JavaScript 引擎为互斥的关系。\n\n#### 3. css 加载会造成阻塞吗 ？\n\n- CSS 加载不会阻塞 DOM 的解析，会阻塞 Dom 的渲染\n\nDOM 和 CSSOM 通常是并行构建的,所以 CSS 加载不会阻塞 DOM 的解析。\n\n然而,由于 渲染树 是依赖于 DOM树 和 CSSOM树 的,\n所以他必须等待到 CSSOM树 构建完成,也就是 CSS 资源加载完成(或者 CSS 资源加载失败)后,才能开始渲染。\n因此,CSS 加载会阻塞 Dom 的渲染。\n- css 会阻塞后面 js 的执行。\n\n由于 GUI 渲染线程与 JavaScript 引擎为互斥的关系。因此,样式表会在后面的 js 执行前先加载执行完毕,所以css 会阻塞后面 js 的执行。\n\n#### 4. DOMContentLoaded 与 load 的区别 ?\n- 当 DOMContentLoaded 事件触发时,仅当 DOM 解析完成后,不包括样式表,图片。\n- 当文档中没有脚本时,浏览器解析完文档便能触发 DOMContentLoaded 事件。如果文档中包含脚本,则脚本会阻塞文档的解析,而脚本需要等 CSSOM 构建完成才能执行。在任何情况下,DOMContentLoaded 的触发不需要等待图片等其他资源加载完成。\n- 当 onload 事件触发时,页面上所有的 DOM,样式表,脚本,图片等资源已经加载完毕。\n- DOMContentLoaded -> load\n\n\n#### 5. defer 和 async 的区别 ?\n1. <script src=\"script.js\">\n\n没有 defer 或 async,浏览器会立即加载并执行指定的脚本,“立即”指的是在渲染该 script 标签之下的文档元素之前,也就是说不等待后续载入的文档元素,读到就加载并执行。\n\n2. <script async src=\"script.js\">\n\n有 async,加载和渲染后续文档元素的过程将和 script.js 的加载与执行并行进行（异步）。\n\n3. <script defer src=\"myscript.js\">\n\n有 defer,加载后续文档元素的过程将和 script.js 的加载并行进行（异步）,但是 script.js 的执行要在所有元素解析完成之后,DOMContentLoaded 事件触发之前完成。\n\n4. 总结     \n\ndefer 和 async 在网络读取（下载）这块儿是一样的,都是异步的（相较于 HTML 解析），差别在于脚本下载完之后何时执行,显然 defer 是最接近我们对于应用脚本加载和执行的要求的\n\n关于 defer，它是按照加载顺序执行脚本的；\nasync 则是乱序执行的，反正对它来说脚本的加载和执行是紧紧挨着的,所以不管你声明的顺序如何,只要它加载完了就会立刻执行\n\n仔细想想,async 对于应用脚本的用处不大,因为它完全不考虑依赖（哪怕是最低级的顺序执行）,不过它对于那些可以不依赖任何脚本或不被任何脚本依赖的脚本来说却是非常合适的\n\n","source":"_posts/前端/浏览器渲染机制.md","raw":"---\ntitle: 浏览器渲染机制\ndate: 2020-05-14\ntags: [前端]\ncategories: 前端\ncomments: true\n---\n\n### 进程和线程\n- 进程时cpu资源分配的最小单位，是能拥有资源和独立运行的最小的单位。\n- 线程是cpu调度的最小单位，是建立在进程基础上的一次程序运行单位。\n- 对于操作系统来说，一个任务就是一个进程，一个进程至少有一个线程\n\n### 浏览器的多进程架构\n![image](https://user-gold-cdn.xitu.io/2020/1/7/16f7ee19a85b3c8f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n#### 主进程\n负责浏览器界面的显示与交互。各个页面的管理,创建和销毁其他进程。网络的资源管理、下载等。\n#### 第三方插件进程\n每种类型的插件对应一个进程,仅当使用该插件时才创建。\n#### GPU 进程\n最多只有一个,用于 3D 绘制等\n#### 渲染进程\n称为浏览器渲染进程或浏览器内核,内部是多线程的。主要负责页面渲染,脚本执行,事件处理等。\n\n### 渲染进程\n浏览器的渲染进程是多线程的\n![image](https://user-gold-cdn.xitu.io/2020/1/7/16f7ee2d5b4df806?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n#### GUI 渲染线程 \n\n- 负责渲染浏览器界面，解析 HTML、CSS，构建 DOM 树和 RenderObject 树，布局和绘制等。\n- 当界面需要重绘（Repaint）或由于某种操作引发回流(reflow)时，该线程就会执行。\n- 注意，==GUI 渲染线程与 JS 引擎线程是互斥的==，当 JS 引擎执行时 GUI 线程会被挂起（相当于被冻结了），GUI 更新会被保存在一个队列中等到 JS 引擎空闲时立即被执行。\n\n#### JS 引擎线程 \n\n- Javascript 引擎，也称为 JS 内核，负责处理 Javascript 脚本程序。（例如 V8 引擎）\n- JS 引擎线程负责解析 Javascript 脚本，运行代码。\n- JS 引擎一直等待着任务队列中任务的到来,然后加以处理，一个 Tab 页（renderer 进程）中无论什么时候都只有一个 JS 线程在运行 JS 程序。\n- 注意，==GUI 渲染线程与 JS 引擎线程是互斥的==，所以如果 JS 执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞。\n\n#### 事件触发线程 \n\n- 归属于浏览器而不是 JS 引擎，用来控制事件循环（可以理解,JS 引擎自己都忙不过来，需要浏览器另开线程协助）\n- 当 JS 引擎执行代码块如 setTimeOut 时（也可来自浏览器内核的其他线程，如鼠标点击、AJAX 异步请求等），会将对应任务添加到事件线程中\n- 当对应的事件符合触发条件被触发时，该线程会把事件添加到待处理队列的队尾，等待 JS 引擎的处理\n- 注意，由于 JS 的单线程关系，所以这些待处理队列中的事件都得排队等待 JS 引擎处理（当 JS 引擎空闲时才会去执行）\n\n#### 定时触发器线程 \n\n- 传说中的 setInterval 与 setTimeout 所在线程\n- 浏览器定时计数器并不是由 JavaScript 引擎计数的，（因为 JavaScript 引擎是单线程的， 如果处于阻塞线程状态就会影响记计时的准确）\n- 因此通过单独线程来计时并触发定时（计时完毕后,添加到事件队列中，等待 JS 引擎空闲后执行）\n- 注意，W3C 在 HTML 标准中规定,规定要求 setTimeout 中低于 4ms 的时间间隔算为 4ms。\n\n#### 异步 http 请求线程 \n\n- 在 XMLHttpRequest 在连接后是通过浏览器新开一个线程请求。\n- 将检测到状态变更时，如果设置有回调函数，异步线程就产生状态变更事件，将这个回调再放入事件队列中。再由 JavaScript 引擎执行。\n\n### 题目\n#### 1. 为什么 Javascript 要是单线程的 ?\n\n- 如果 JavaScript 是多线程的方式来操作这些 UI DOM,则可能出现 UI 操作的冲突。\n- 如果 Javascript 是多线程的话,在多线程的交互下,处于 UI 中的 DOM 节点就可能成为一个临界资源,\n- 假设存在两个线程同时操作一个 DOM,一个负责修改一个负责删除,那么这个时候就需要浏览器来裁决如何生效哪个线程的执行结果。\n- 当然我们可以通过锁来解决上面的问题。但为了避免因为引入了锁而带来更大的复杂性,Javascript 在最初就选择了单线程执行。\n\n#### 2. 为什么 JS 阻塞页面加载 ?\n\n- 由于 JavaScript 是可操纵 DOM 的,如果在修改这些元素属性同时渲染界面（即 JavaScript 线程和 UI 线程同时运行）,那么渲染线程前后获得的元素数据就可能不一致了。\n- 因此为了防止渲染出现不可预期的结果,浏览器设置 GUI 渲染线程与 JavaScript 引擎为互斥的关系。\n\n#### 3. css 加载会造成阻塞吗 ？\n\n- CSS 加载不会阻塞 DOM 的解析，会阻塞 Dom 的渲染\n\nDOM 和 CSSOM 通常是并行构建的,所以 CSS 加载不会阻塞 DOM 的解析。\n\n然而,由于 渲染树 是依赖于 DOM树 和 CSSOM树 的,\n所以他必须等待到 CSSOM树 构建完成,也就是 CSS 资源加载完成(或者 CSS 资源加载失败)后,才能开始渲染。\n因此,CSS 加载会阻塞 Dom 的渲染。\n- css 会阻塞后面 js 的执行。\n\n由于 GUI 渲染线程与 JavaScript 引擎为互斥的关系。因此,样式表会在后面的 js 执行前先加载执行完毕,所以css 会阻塞后面 js 的执行。\n\n#### 4. DOMContentLoaded 与 load 的区别 ?\n- 当 DOMContentLoaded 事件触发时,仅当 DOM 解析完成后,不包括样式表,图片。\n- 当文档中没有脚本时,浏览器解析完文档便能触发 DOMContentLoaded 事件。如果文档中包含脚本,则脚本会阻塞文档的解析,而脚本需要等 CSSOM 构建完成才能执行。在任何情况下,DOMContentLoaded 的触发不需要等待图片等其他资源加载完成。\n- 当 onload 事件触发时,页面上所有的 DOM,样式表,脚本,图片等资源已经加载完毕。\n- DOMContentLoaded -> load\n\n\n#### 5. defer 和 async 的区别 ?\n1. <script src=\"script.js\">\n\n没有 defer 或 async,浏览器会立即加载并执行指定的脚本,“立即”指的是在渲染该 script 标签之下的文档元素之前,也就是说不等待后续载入的文档元素,读到就加载并执行。\n\n2. <script async src=\"script.js\">\n\n有 async,加载和渲染后续文档元素的过程将和 script.js 的加载与执行并行进行（异步）。\n\n3. <script defer src=\"myscript.js\">\n\n有 defer,加载后续文档元素的过程将和 script.js 的加载并行进行（异步）,但是 script.js 的执行要在所有元素解析完成之后,DOMContentLoaded 事件触发之前完成。\n\n4. 总结     \n\ndefer 和 async 在网络读取（下载）这块儿是一样的,都是异步的（相较于 HTML 解析），差别在于脚本下载完之后何时执行,显然 defer 是最接近我们对于应用脚本加载和执行的要求的\n\n关于 defer，它是按照加载顺序执行脚本的；\nasync 则是乱序执行的，反正对它来说脚本的加载和执行是紧紧挨着的,所以不管你声明的顺序如何,只要它加载完了就会立刻执行\n\n仔细想想,async 对于应用脚本的用处不大,因为它完全不考虑依赖（哪怕是最低级的顺序执行）,不过它对于那些可以不依赖任何脚本或不被任何脚本依赖的脚本来说却是非常合适的\n\n","slug":"前端/浏览器渲染机制","published":1,"updated":"2022-07-22T10:11:27.198Z","layout":"post","photos":[],"link":"","_id":"cl5wb2yn800czcj38dz86wbrb","content":"<h3 id=\"进程和线程\"><a href=\"#进程和线程\" class=\"headerlink\" title=\"进程和线程\"></a>进程和线程</h3><ul>\n<li>进程时cpu资源分配的最小单位，是能拥有资源和独立运行的最小的单位。</li>\n<li>线程是cpu调度的最小单位，是建立在进程基础上的一次程序运行单位。</li>\n<li>对于操作系统来说，一个任务就是一个进程，一个进程至少有一个线程</li>\n</ul>\n<h3 id=\"浏览器的多进程架构\"><a href=\"#浏览器的多进程架构\" class=\"headerlink\" title=\"浏览器的多进程架构\"></a>浏览器的多进程架构</h3><p><img src=\"https://user-gold-cdn.xitu.io/2020/1/7/16f7ee19a85b3c8f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"image\"></p>\n<h4 id=\"主进程\"><a href=\"#主进程\" class=\"headerlink\" title=\"主进程\"></a>主进程</h4><p>负责浏览器界面的显示与交互。各个页面的管理,创建和销毁其他进程。网络的资源管理、下载等。</p>\n<h4 id=\"第三方插件进程\"><a href=\"#第三方插件进程\" class=\"headerlink\" title=\"第三方插件进程\"></a>第三方插件进程</h4><p>每种类型的插件对应一个进程,仅当使用该插件时才创建。</p>\n<h4 id=\"GPU-进程\"><a href=\"#GPU-进程\" class=\"headerlink\" title=\"GPU 进程\"></a>GPU 进程</h4><p>最多只有一个,用于 3D 绘制等</p>\n<h4 id=\"渲染进程\"><a href=\"#渲染进程\" class=\"headerlink\" title=\"渲染进程\"></a>渲染进程</h4><p>称为浏览器渲染进程或浏览器内核,内部是多线程的。主要负责页面渲染,脚本执行,事件处理等。</p>\n<h3 id=\"渲染进程-1\"><a href=\"#渲染进程-1\" class=\"headerlink\" title=\"渲染进程\"></a>渲染进程</h3><p>浏览器的渲染进程是多线程的<br><img src=\"https://user-gold-cdn.xitu.io/2020/1/7/16f7ee2d5b4df806?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"image\"></p>\n<h4 id=\"GUI-渲染线程\"><a href=\"#GUI-渲染线程\" class=\"headerlink\" title=\"GUI 渲染线程\"></a>GUI 渲染线程</h4><ul>\n<li>负责渲染浏览器界面，解析 HTML、CSS，构建 DOM 树和 RenderObject 树，布局和绘制等。</li>\n<li>当界面需要重绘（Repaint）或由于某种操作引发回流(reflow)时，该线程就会执行。</li>\n<li>注意，==GUI 渲染线程与 JS 引擎线程是互斥的==，当 JS 引擎执行时 GUI 线程会被挂起（相当于被冻结了），GUI 更新会被保存在一个队列中等到 JS 引擎空闲时立即被执行。</li>\n</ul>\n<h4 id=\"JS-引擎线程\"><a href=\"#JS-引擎线程\" class=\"headerlink\" title=\"JS 引擎线程\"></a>JS 引擎线程</h4><ul>\n<li>Javascript 引擎，也称为 JS 内核，负责处理 Javascript 脚本程序。（例如 V8 引擎）</li>\n<li>JS 引擎线程负责解析 Javascript 脚本，运行代码。</li>\n<li>JS 引擎一直等待着任务队列中任务的到来,然后加以处理，一个 Tab 页（renderer 进程）中无论什么时候都只有一个 JS 线程在运行 JS 程序。</li>\n<li>注意，==GUI 渲染线程与 JS 引擎线程是互斥的==，所以如果 JS 执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞。</li>\n</ul>\n<h4 id=\"事件触发线程\"><a href=\"#事件触发线程\" class=\"headerlink\" title=\"事件触发线程\"></a>事件触发线程</h4><ul>\n<li>归属于浏览器而不是 JS 引擎，用来控制事件循环（可以理解,JS 引擎自己都忙不过来，需要浏览器另开线程协助）</li>\n<li>当 JS 引擎执行代码块如 setTimeOut 时（也可来自浏览器内核的其他线程，如鼠标点击、AJAX 异步请求等），会将对应任务添加到事件线程中</li>\n<li>当对应的事件符合触发条件被触发时，该线程会把事件添加到待处理队列的队尾，等待 JS 引擎的处理</li>\n<li>注意，由于 JS 的单线程关系，所以这些待处理队列中的事件都得排队等待 JS 引擎处理（当 JS 引擎空闲时才会去执行）</li>\n</ul>\n<h4 id=\"定时触发器线程\"><a href=\"#定时触发器线程\" class=\"headerlink\" title=\"定时触发器线程\"></a>定时触发器线程</h4><ul>\n<li>传说中的 setInterval 与 setTimeout 所在线程</li>\n<li>浏览器定时计数器并不是由 JavaScript 引擎计数的，（因为 JavaScript 引擎是单线程的， 如果处于阻塞线程状态就会影响记计时的准确）</li>\n<li>因此通过单独线程来计时并触发定时（计时完毕后,添加到事件队列中，等待 JS 引擎空闲后执行）</li>\n<li>注意，W3C 在 HTML 标准中规定,规定要求 setTimeout 中低于 4ms 的时间间隔算为 4ms。</li>\n</ul>\n<h4 id=\"异步-http-请求线程\"><a href=\"#异步-http-请求线程\" class=\"headerlink\" title=\"异步 http 请求线程\"></a>异步 http 请求线程</h4><ul>\n<li>在 XMLHttpRequest 在连接后是通过浏览器新开一个线程请求。</li>\n<li>将检测到状态变更时，如果设置有回调函数，异步线程就产生状态变更事件，将这个回调再放入事件队列中。再由 JavaScript 引擎执行。</li>\n</ul>\n<h3 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3><h4 id=\"1-为什么-Javascript-要是单线程的\"><a href=\"#1-为什么-Javascript-要是单线程的\" class=\"headerlink\" title=\"1. 为什么 Javascript 要是单线程的 ?\"></a>1. 为什么 Javascript 要是单线程的 ?</h4><ul>\n<li>如果 JavaScript 是多线程的方式来操作这些 UI DOM,则可能出现 UI 操作的冲突。</li>\n<li>如果 Javascript 是多线程的话,在多线程的交互下,处于 UI 中的 DOM 节点就可能成为一个临界资源,</li>\n<li>假设存在两个线程同时操作一个 DOM,一个负责修改一个负责删除,那么这个时候就需要浏览器来裁决如何生效哪个线程的执行结果。</li>\n<li>当然我们可以通过锁来解决上面的问题。但为了避免因为引入了锁而带来更大的复杂性,Javascript 在最初就选择了单线程执行。</li>\n</ul>\n<h4 id=\"2-为什么-JS-阻塞页面加载\"><a href=\"#2-为什么-JS-阻塞页面加载\" class=\"headerlink\" title=\"2. 为什么 JS 阻塞页面加载 ?\"></a>2. 为什么 JS 阻塞页面加载 ?</h4><ul>\n<li>由于 JavaScript 是可操纵 DOM 的,如果在修改这些元素属性同时渲染界面（即 JavaScript 线程和 UI 线程同时运行）,那么渲染线程前后获得的元素数据就可能不一致了。</li>\n<li>因此为了防止渲染出现不可预期的结果,浏览器设置 GUI 渲染线程与 JavaScript 引擎为互斥的关系。</li>\n</ul>\n<h4 id=\"3-css-加载会造成阻塞吗-？\"><a href=\"#3-css-加载会造成阻塞吗-？\" class=\"headerlink\" title=\"3. css 加载会造成阻塞吗 ？\"></a>3. css 加载会造成阻塞吗 ？</h4><ul>\n<li>CSS 加载不会阻塞 DOM 的解析，会阻塞 Dom 的渲染</li>\n</ul>\n<p>DOM 和 CSSOM 通常是并行构建的,所以 CSS 加载不会阻塞 DOM 的解析。</p>\n<p>然而,由于 渲染树 是依赖于 DOM树 和 CSSOM树 的,<br>所以他必须等待到 CSSOM树 构建完成,也就是 CSS 资源加载完成(或者 CSS 资源加载失败)后,才能开始渲染。<br>因此,CSS 加载会阻塞 Dom 的渲染。</p>\n<ul>\n<li>css 会阻塞后面 js 的执行。</li>\n</ul>\n<p>由于 GUI 渲染线程与 JavaScript 引擎为互斥的关系。因此,样式表会在后面的 js 执行前先加载执行完毕,所以css 会阻塞后面 js 的执行。</p>\n<h4 id=\"4-DOMContentLoaded-与-load-的区别\"><a href=\"#4-DOMContentLoaded-与-load-的区别\" class=\"headerlink\" title=\"4. DOMContentLoaded 与 load 的区别 ?\"></a>4. DOMContentLoaded 与 load 的区别 ?</h4><ul>\n<li>当 DOMContentLoaded 事件触发时,仅当 DOM 解析完成后,不包括样式表,图片。</li>\n<li>当文档中没有脚本时,浏览器解析完文档便能触发 DOMContentLoaded 事件。如果文档中包含脚本,则脚本会阻塞文档的解析,而脚本需要等 CSSOM 构建完成才能执行。在任何情况下,DOMContentLoaded 的触发不需要等待图片等其他资源加载完成。</li>\n<li>当 onload 事件触发时,页面上所有的 DOM,样式表,脚本,图片等资源已经加载完毕。</li>\n<li>DOMContentLoaded -&gt; load</li>\n</ul>\n<h4 id=\"5-defer-和-async-的区别\"><a href=\"#5-defer-和-async-的区别\" class=\"headerlink\" title=\"5. defer 和 async 的区别 ?\"></a>5. defer 和 async 的区别 ?</h4><ol>\n<li><script src=\"script.js\">\n\n</li>\n</ol>\n<p>没有 defer 或 async,浏览器会立即加载并执行指定的脚本,“立即”指的是在渲染该 script 标签之下的文档元素之前,也就是说不等待后续载入的文档元素,读到就加载并执行。</p>\n<ol start=\"2\">\n<li><script async src=\"script.js\">\n\n</li>\n</ol>\n<p>有 async,加载和渲染后续文档元素的过程将和 script.js 的加载与执行并行进行（异步）。</p>\n<ol start=\"3\">\n<li><script defer src=\"myscript.js\">\n\n</li>\n</ol>\n<p>有 defer,加载后续文档元素的过程将和 script.js 的加载并行进行（异步）,但是 script.js 的执行要在所有元素解析完成之后,DOMContentLoaded 事件触发之前完成。</p>\n<ol start=\"4\">\n<li>总结     </li>\n</ol>\n<p>defer 和 async 在网络读取（下载）这块儿是一样的,都是异步的（相较于 HTML 解析），差别在于脚本下载完之后何时执行,显然 defer 是最接近我们对于应用脚本加载和执行的要求的</p>\n<p>关于 defer，它是按照加载顺序执行脚本的；<br>async 则是乱序执行的，反正对它来说脚本的加载和执行是紧紧挨着的,所以不管你声明的顺序如何,只要它加载完了就会立刻执行</p>\n<p>仔细想想,async 对于应用脚本的用处不大,因为它完全不考虑依赖（哪怕是最低级的顺序执行）,不过它对于那些可以不依赖任何脚本或不被任何脚本依赖的脚本来说却是非常合适的</p>\n</script></li></ol>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"进程和线程\"><a href=\"#进程和线程\" class=\"headerlink\" title=\"进程和线程\"></a>进程和线程</h3><ul>\n<li>进程时cpu资源分配的最小单位，是能拥有资源和独立运行的最小的单位。</li>\n<li>线程是cpu调度的最小单位，是建立在进程基础上的一次程序运行单位。</li>\n<li>对于操作系统来说，一个任务就是一个进程，一个进程至少有一个线程</li>\n</ul>\n<h3 id=\"浏览器的多进程架构\"><a href=\"#浏览器的多进程架构\" class=\"headerlink\" title=\"浏览器的多进程架构\"></a>浏览器的多进程架构</h3><p><img src=\"https://user-gold-cdn.xitu.io/2020/1/7/16f7ee19a85b3c8f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"image\"></p>\n<h4 id=\"主进程\"><a href=\"#主进程\" class=\"headerlink\" title=\"主进程\"></a>主进程</h4><p>负责浏览器界面的显示与交互。各个页面的管理,创建和销毁其他进程。网络的资源管理、下载等。</p>\n<h4 id=\"第三方插件进程\"><a href=\"#第三方插件进程\" class=\"headerlink\" title=\"第三方插件进程\"></a>第三方插件进程</h4><p>每种类型的插件对应一个进程,仅当使用该插件时才创建。</p>\n<h4 id=\"GPU-进程\"><a href=\"#GPU-进程\" class=\"headerlink\" title=\"GPU 进程\"></a>GPU 进程</h4><p>最多只有一个,用于 3D 绘制等</p>\n<h4 id=\"渲染进程\"><a href=\"#渲染进程\" class=\"headerlink\" title=\"渲染进程\"></a>渲染进程</h4><p>称为浏览器渲染进程或浏览器内核,内部是多线程的。主要负责页面渲染,脚本执行,事件处理等。</p>\n<h3 id=\"渲染进程-1\"><a href=\"#渲染进程-1\" class=\"headerlink\" title=\"渲染进程\"></a>渲染进程</h3><p>浏览器的渲染进程是多线程的<br><img src=\"https://user-gold-cdn.xitu.io/2020/1/7/16f7ee2d5b4df806?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"image\"></p>\n<h4 id=\"GUI-渲染线程\"><a href=\"#GUI-渲染线程\" class=\"headerlink\" title=\"GUI 渲染线程\"></a>GUI 渲染线程</h4><ul>\n<li>负责渲染浏览器界面，解析 HTML、CSS，构建 DOM 树和 RenderObject 树，布局和绘制等。</li>\n<li>当界面需要重绘（Repaint）或由于某种操作引发回流(reflow)时，该线程就会执行。</li>\n<li>注意，==GUI 渲染线程与 JS 引擎线程是互斥的==，当 JS 引擎执行时 GUI 线程会被挂起（相当于被冻结了），GUI 更新会被保存在一个队列中等到 JS 引擎空闲时立即被执行。</li>\n</ul>\n<h4 id=\"JS-引擎线程\"><a href=\"#JS-引擎线程\" class=\"headerlink\" title=\"JS 引擎线程\"></a>JS 引擎线程</h4><ul>\n<li>Javascript 引擎，也称为 JS 内核，负责处理 Javascript 脚本程序。（例如 V8 引擎）</li>\n<li>JS 引擎线程负责解析 Javascript 脚本，运行代码。</li>\n<li>JS 引擎一直等待着任务队列中任务的到来,然后加以处理，一个 Tab 页（renderer 进程）中无论什么时候都只有一个 JS 线程在运行 JS 程序。</li>\n<li>注意，==GUI 渲染线程与 JS 引擎线程是互斥的==，所以如果 JS 执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞。</li>\n</ul>\n<h4 id=\"事件触发线程\"><a href=\"#事件触发线程\" class=\"headerlink\" title=\"事件触发线程\"></a>事件触发线程</h4><ul>\n<li>归属于浏览器而不是 JS 引擎，用来控制事件循环（可以理解,JS 引擎自己都忙不过来，需要浏览器另开线程协助）</li>\n<li>当 JS 引擎执行代码块如 setTimeOut 时（也可来自浏览器内核的其他线程，如鼠标点击、AJAX 异步请求等），会将对应任务添加到事件线程中</li>\n<li>当对应的事件符合触发条件被触发时，该线程会把事件添加到待处理队列的队尾，等待 JS 引擎的处理</li>\n<li>注意，由于 JS 的单线程关系，所以这些待处理队列中的事件都得排队等待 JS 引擎处理（当 JS 引擎空闲时才会去执行）</li>\n</ul>\n<h4 id=\"定时触发器线程\"><a href=\"#定时触发器线程\" class=\"headerlink\" title=\"定时触发器线程\"></a>定时触发器线程</h4><ul>\n<li>传说中的 setInterval 与 setTimeout 所在线程</li>\n<li>浏览器定时计数器并不是由 JavaScript 引擎计数的，（因为 JavaScript 引擎是单线程的， 如果处于阻塞线程状态就会影响记计时的准确）</li>\n<li>因此通过单独线程来计时并触发定时（计时完毕后,添加到事件队列中，等待 JS 引擎空闲后执行）</li>\n<li>注意，W3C 在 HTML 标准中规定,规定要求 setTimeout 中低于 4ms 的时间间隔算为 4ms。</li>\n</ul>\n<h4 id=\"异步-http-请求线程\"><a href=\"#异步-http-请求线程\" class=\"headerlink\" title=\"异步 http 请求线程\"></a>异步 http 请求线程</h4><ul>\n<li>在 XMLHttpRequest 在连接后是通过浏览器新开一个线程请求。</li>\n<li>将检测到状态变更时，如果设置有回调函数，异步线程就产生状态变更事件，将这个回调再放入事件队列中。再由 JavaScript 引擎执行。</li>\n</ul>\n<h3 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3><h4 id=\"1-为什么-Javascript-要是单线程的\"><a href=\"#1-为什么-Javascript-要是单线程的\" class=\"headerlink\" title=\"1. 为什么 Javascript 要是单线程的 ?\"></a>1. 为什么 Javascript 要是单线程的 ?</h4><ul>\n<li>如果 JavaScript 是多线程的方式来操作这些 UI DOM,则可能出现 UI 操作的冲突。</li>\n<li>如果 Javascript 是多线程的话,在多线程的交互下,处于 UI 中的 DOM 节点就可能成为一个临界资源,</li>\n<li>假设存在两个线程同时操作一个 DOM,一个负责修改一个负责删除,那么这个时候就需要浏览器来裁决如何生效哪个线程的执行结果。</li>\n<li>当然我们可以通过锁来解决上面的问题。但为了避免因为引入了锁而带来更大的复杂性,Javascript 在最初就选择了单线程执行。</li>\n</ul>\n<h4 id=\"2-为什么-JS-阻塞页面加载\"><a href=\"#2-为什么-JS-阻塞页面加载\" class=\"headerlink\" title=\"2. 为什么 JS 阻塞页面加载 ?\"></a>2. 为什么 JS 阻塞页面加载 ?</h4><ul>\n<li>由于 JavaScript 是可操纵 DOM 的,如果在修改这些元素属性同时渲染界面（即 JavaScript 线程和 UI 线程同时运行）,那么渲染线程前后获得的元素数据就可能不一致了。</li>\n<li>因此为了防止渲染出现不可预期的结果,浏览器设置 GUI 渲染线程与 JavaScript 引擎为互斥的关系。</li>\n</ul>\n<h4 id=\"3-css-加载会造成阻塞吗-？\"><a href=\"#3-css-加载会造成阻塞吗-？\" class=\"headerlink\" title=\"3. css 加载会造成阻塞吗 ？\"></a>3. css 加载会造成阻塞吗 ？</h4><ul>\n<li>CSS 加载不会阻塞 DOM 的解析，会阻塞 Dom 的渲染</li>\n</ul>\n<p>DOM 和 CSSOM 通常是并行构建的,所以 CSS 加载不会阻塞 DOM 的解析。</p>\n<p>然而,由于 渲染树 是依赖于 DOM树 和 CSSOM树 的,<br>所以他必须等待到 CSSOM树 构建完成,也就是 CSS 资源加载完成(或者 CSS 资源加载失败)后,才能开始渲染。<br>因此,CSS 加载会阻塞 Dom 的渲染。</p>\n<ul>\n<li>css 会阻塞后面 js 的执行。</li>\n</ul>\n<p>由于 GUI 渲染线程与 JavaScript 引擎为互斥的关系。因此,样式表会在后面的 js 执行前先加载执行完毕,所以css 会阻塞后面 js 的执行。</p>\n<h4 id=\"4-DOMContentLoaded-与-load-的区别\"><a href=\"#4-DOMContentLoaded-与-load-的区别\" class=\"headerlink\" title=\"4. DOMContentLoaded 与 load 的区别 ?\"></a>4. DOMContentLoaded 与 load 的区别 ?</h4><ul>\n<li>当 DOMContentLoaded 事件触发时,仅当 DOM 解析完成后,不包括样式表,图片。</li>\n<li>当文档中没有脚本时,浏览器解析完文档便能触发 DOMContentLoaded 事件。如果文档中包含脚本,则脚本会阻塞文档的解析,而脚本需要等 CSSOM 构建完成才能执行。在任何情况下,DOMContentLoaded 的触发不需要等待图片等其他资源加载完成。</li>\n<li>当 onload 事件触发时,页面上所有的 DOM,样式表,脚本,图片等资源已经加载完毕。</li>\n<li>DOMContentLoaded -&gt; load</li>\n</ul>\n<h4 id=\"5-defer-和-async-的区别\"><a href=\"#5-defer-和-async-的区别\" class=\"headerlink\" title=\"5. defer 和 async 的区别 ?\"></a>5. defer 和 async 的区别 ?</h4><ol>\n<li><script src=\"script.js\">\n\n</li>\n</ol>\n<p>没有 defer 或 async,浏览器会立即加载并执行指定的脚本,“立即”指的是在渲染该 script 标签之下的文档元素之前,也就是说不等待后续载入的文档元素,读到就加载并执行。</p>\n<ol start=\"2\">\n<li><script async src=\"script.js\">\n\n</li>\n</ol>\n<p>有 async,加载和渲染后续文档元素的过程将和 script.js 的加载与执行并行进行（异步）。</p>\n<ol start=\"3\">\n<li><script defer src=\"myscript.js\">\n\n</li>\n</ol>\n<p>有 defer,加载后续文档元素的过程将和 script.js 的加载并行进行（异步）,但是 script.js 的执行要在所有元素解析完成之后,DOMContentLoaded 事件触发之前完成。</p>\n<ol start=\"4\">\n<li>总结     </li>\n</ol>\n<p>defer 和 async 在网络读取（下载）这块儿是一样的,都是异步的（相较于 HTML 解析），差别在于脚本下载完之后何时执行,显然 defer 是最接近我们对于应用脚本加载和执行的要求的</p>\n<p>关于 defer，它是按照加载顺序执行脚本的；<br>async 则是乱序执行的，反正对它来说脚本的加载和执行是紧紧挨着的,所以不管你声明的顺序如何,只要它加载完了就会立刻执行</p>\n<p>仔细想想,async 对于应用脚本的用处不大,因为它完全不考虑依赖（哪怕是最低级的顺序执行）,不过它对于那些可以不依赖任何脚本或不被任何脚本依赖的脚本来说却是非常合适的</p>\n</script></li></ol>"},{"title":"whistle：利用whistle操作WebSocket请求","date":"2022-04-25T16:00:00.000Z","comments":1,"_content":"\n# 一、安装\n\n```\nnpm install -g whistle.script\n# Mac、Linux用户可能需要加sudo\nsudo npm install -g whistle.script\n```\n\n安装插件后要重启whistle\n\n# 二、使用\n\n打开script插件的界面，创建一个名字为 test 的脚本:\n- 可以通过 Plugins->Home->script打开或右键并选择 在新标签页中打开\n- 或者直接访问 http://local.whistlejs.com/plugin.script\n\n# 三、操作请求\n## 1、操作HTTP或HTTPs请求(操作HTTPs需要开启HTTPs拦截)\n\n脚本中输入：\n\n```\nexports.handleRequest = function* (ctx, next) {\n    // ctx.fullUrl 可以获取请求url\n    // ctx.headers 可以获取请求头\n    // ctx.options 里面包含一些特殊的请求头字段，分别可以获取一些额外信息，如请设置的规则等\n    // ctx.method 获取和设置请求方法\n    // const reqBody = yield ctx.getReqBody(); 获取请求body的Buffer数据，如果没有数据返回null\n    // const reqText = yield ctx.getReqText();  获取请求body的文本，如果没有返回''\n    // const formData = yield ctx.getReqForm(); 获取表单对象，如果不是表单，返回空对象{}\n    // console.log(ctx.method, ctx.headers, reqBody);\n    // ctx.req.body = String| Buffer | Stream | null，修改请求的内容\n    // 只有执行next方法后才可以把正常的请求发送出去\n    // 如果需要自定义请求，可以通过全局的request方法操作\n    // console.log(request);\n    // next方法可以设置next({ host, port });\n    const { statusCode, headers } = yield next(); \n    console.log(ctx.fullUrl, statusCode, headers);\n    // const resBody = yield ctx.getResBody();\n    // const resText = yield ctx.getResText();\n    // ctx.status = 404; 修改响应状态码\n    // ctx.set(headers); 批量修改响应头\n    // ctx.set('x-test', 'abc'); 修改响应头\n    // ctx.body = String| Buffer | Stream | null; 修改响应内容\n};\n \n// 如果Node >= 7.6，可以采用async await的方式\nexports.handleRequest = async (ctx, next) => {\n\t// do sth\n    // next方法可以设置next({ host, port });\n    const { statusCode, headers } = await next(); \n    // do sth\n};\n```\n\n在whistle的Rules配置界面上输入规则（需要放在最前面）:\n\n```\nscript://test games.*.shopee.**\n# 如果需要通过配置给脚本传递一些额外参数，可以如下配置\nscript://test(a,b,c) games.*.shopee.**\n```\n\n可以在脚本中通过 process.args 获取:\n\n```\nexports.handleRequest = (ctx, next) => {\n\tconsole.log(process.args); // output: [\"a\", \"b\", \"c\"]\n};\n```\n\n## 2、操作WebSocket请求(需要开启HTTPs拦截)\n\n脚本中输入：\n\n```\n// Node < 7.6可以改用genrator和yield\nexports.handleWebSocket = async (req, connect) => {\n\t// connect方法可以设置connect({ host, port });\n  \tconst res = await connect();\n  \tres.on('message', (data) => {\n    \t// 在script的Console打印出服务端发送的数据\n    \tconsole.log('Received: ', data);\n    \t// 可以修改后再发送到Server\n    \treq.send(data);\n  \t});\n  \treq.on('message', (data) => {\n    \t// 在script的Console打印出客户端发送的数据\n    \tconsole.log('Sent: ', data);\n    \t// 可以修改后再发送到Server\n    \tres.send(data);\n\t});\n};\n```\n\nwhistle规则配置同上\n\n更多关于whistle.script的使用详见官网：https://github.com/whistle-plugins/whistle.script\n\n\n","source":"_posts/前端/whistle：利用whistle操作WebSocket请求.md","raw":"---\ntitle: whistle：利用whistle操作WebSocket请求\ndate: 2022-04-26\ntags: [前端]\ncategories: 前端\ncomments: true\n---\n\n# 一、安装\n\n```\nnpm install -g whistle.script\n# Mac、Linux用户可能需要加sudo\nsudo npm install -g whistle.script\n```\n\n安装插件后要重启whistle\n\n# 二、使用\n\n打开script插件的界面，创建一个名字为 test 的脚本:\n- 可以通过 Plugins->Home->script打开或右键并选择 在新标签页中打开\n- 或者直接访问 http://local.whistlejs.com/plugin.script\n\n# 三、操作请求\n## 1、操作HTTP或HTTPs请求(操作HTTPs需要开启HTTPs拦截)\n\n脚本中输入：\n\n```\nexports.handleRequest = function* (ctx, next) {\n    // ctx.fullUrl 可以获取请求url\n    // ctx.headers 可以获取请求头\n    // ctx.options 里面包含一些特殊的请求头字段，分别可以获取一些额外信息，如请设置的规则等\n    // ctx.method 获取和设置请求方法\n    // const reqBody = yield ctx.getReqBody(); 获取请求body的Buffer数据，如果没有数据返回null\n    // const reqText = yield ctx.getReqText();  获取请求body的文本，如果没有返回''\n    // const formData = yield ctx.getReqForm(); 获取表单对象，如果不是表单，返回空对象{}\n    // console.log(ctx.method, ctx.headers, reqBody);\n    // ctx.req.body = String| Buffer | Stream | null，修改请求的内容\n    // 只有执行next方法后才可以把正常的请求发送出去\n    // 如果需要自定义请求，可以通过全局的request方法操作\n    // console.log(request);\n    // next方法可以设置next({ host, port });\n    const { statusCode, headers } = yield next(); \n    console.log(ctx.fullUrl, statusCode, headers);\n    // const resBody = yield ctx.getResBody();\n    // const resText = yield ctx.getResText();\n    // ctx.status = 404; 修改响应状态码\n    // ctx.set(headers); 批量修改响应头\n    // ctx.set('x-test', 'abc'); 修改响应头\n    // ctx.body = String| Buffer | Stream | null; 修改响应内容\n};\n \n// 如果Node >= 7.6，可以采用async await的方式\nexports.handleRequest = async (ctx, next) => {\n\t// do sth\n    // next方法可以设置next({ host, port });\n    const { statusCode, headers } = await next(); \n    // do sth\n};\n```\n\n在whistle的Rules配置界面上输入规则（需要放在最前面）:\n\n```\nscript://test games.*.shopee.**\n# 如果需要通过配置给脚本传递一些额外参数，可以如下配置\nscript://test(a,b,c) games.*.shopee.**\n```\n\n可以在脚本中通过 process.args 获取:\n\n```\nexports.handleRequest = (ctx, next) => {\n\tconsole.log(process.args); // output: [\"a\", \"b\", \"c\"]\n};\n```\n\n## 2、操作WebSocket请求(需要开启HTTPs拦截)\n\n脚本中输入：\n\n```\n// Node < 7.6可以改用genrator和yield\nexports.handleWebSocket = async (req, connect) => {\n\t// connect方法可以设置connect({ host, port });\n  \tconst res = await connect();\n  \tres.on('message', (data) => {\n    \t// 在script的Console打印出服务端发送的数据\n    \tconsole.log('Received: ', data);\n    \t// 可以修改后再发送到Server\n    \treq.send(data);\n  \t});\n  \treq.on('message', (data) => {\n    \t// 在script的Console打印出客户端发送的数据\n    \tconsole.log('Sent: ', data);\n    \t// 可以修改后再发送到Server\n    \tres.send(data);\n\t});\n};\n```\n\nwhistle规则配置同上\n\n更多关于whistle.script的使用详见官网：https://github.com/whistle-plugins/whistle.script\n\n\n","slug":"前端/whistle：利用whistle操作WebSocket请求","published":1,"updated":"2022-07-22T10:11:35.380Z","layout":"post","photos":[],"link":"","_id":"cl5wb2yn900d4cj38mg76w3ci","content":"<h1 id=\"一、安装\"><a href=\"#一、安装\" class=\"headerlink\" title=\"一、安装\"></a>一、安装</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g whistle.script</span><br><span class=\"line\"># Mac、Linux用户可能需要加sudo</span><br><span class=\"line\">sudo npm install -g whistle.script</span><br></pre></td></tr></table></figure>\n<p>安装插件后要重启whistle</p>\n<h1 id=\"二、使用\"><a href=\"#二、使用\" class=\"headerlink\" title=\"二、使用\"></a>二、使用</h1><p>打开script插件的界面，创建一个名字为 test 的脚本:</p>\n<ul>\n<li>可以通过 Plugins-&gt;Home-&gt;script打开或右键并选择 在新标签页中打开</li>\n<li>或者直接访问 <a href=\"http://local.whistlejs.com/plugin.script\" target=\"_blank\" rel=\"noopener\">http://local.whistlejs.com/plugin.script</a></li>\n</ul>\n<h1 id=\"三、操作请求\"><a href=\"#三、操作请求\" class=\"headerlink\" title=\"三、操作请求\"></a>三、操作请求</h1><h2 id=\"1、操作HTTP或HTTPs请求-操作HTTPs需要开启HTTPs拦截\"><a href=\"#1、操作HTTP或HTTPs请求-操作HTTPs需要开启HTTPs拦截\" class=\"headerlink\" title=\"1、操作HTTP或HTTPs请求(操作HTTPs需要开启HTTPs拦截)\"></a>1、操作HTTP或HTTPs请求(操作HTTPs需要开启HTTPs拦截)</h2><p>脚本中输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.handleRequest = function* (ctx, next) &#123;</span><br><span class=\"line\">    // ctx.fullUrl 可以获取请求url</span><br><span class=\"line\">    // ctx.headers 可以获取请求头</span><br><span class=\"line\">    // ctx.options 里面包含一些特殊的请求头字段，分别可以获取一些额外信息，如请设置的规则等</span><br><span class=\"line\">    // ctx.method 获取和设置请求方法</span><br><span class=\"line\">    // const reqBody = yield ctx.getReqBody(); 获取请求body的Buffer数据，如果没有数据返回null</span><br><span class=\"line\">    // const reqText = yield ctx.getReqText();  获取请求body的文本，如果没有返回&apos;&apos;</span><br><span class=\"line\">    // const formData = yield ctx.getReqForm(); 获取表单对象，如果不是表单，返回空对象&#123;&#125;</span><br><span class=\"line\">    // console.log(ctx.method, ctx.headers, reqBody);</span><br><span class=\"line\">    // ctx.req.body = String| Buffer | Stream | null，修改请求的内容</span><br><span class=\"line\">    // 只有执行next方法后才可以把正常的请求发送出去</span><br><span class=\"line\">    // 如果需要自定义请求，可以通过全局的request方法操作</span><br><span class=\"line\">    // console.log(request);</span><br><span class=\"line\">    // next方法可以设置next(&#123; host, port &#125;);</span><br><span class=\"line\">    const &#123; statusCode, headers &#125; = yield next(); </span><br><span class=\"line\">    console.log(ctx.fullUrl, statusCode, headers);</span><br><span class=\"line\">    // const resBody = yield ctx.getResBody();</span><br><span class=\"line\">    // const resText = yield ctx.getResText();</span><br><span class=\"line\">    // ctx.status = 404; 修改响应状态码</span><br><span class=\"line\">    // ctx.set(headers); 批量修改响应头</span><br><span class=\"line\">    // ctx.set(&apos;x-test&apos;, &apos;abc&apos;); 修改响应头</span><br><span class=\"line\">    // ctx.body = String| Buffer | Stream | null; 修改响应内容</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">// 如果Node &gt;= 7.6，可以采用async await的方式</span><br><span class=\"line\">exports.handleRequest = async (ctx, next) =&gt; &#123;</span><br><span class=\"line\">\t// do sth</span><br><span class=\"line\">    // next方法可以设置next(&#123; host, port &#125;);</span><br><span class=\"line\">    const &#123; statusCode, headers &#125; = await next(); </span><br><span class=\"line\">    // do sth</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>在whistle的Rules配置界面上输入规则（需要放在最前面）:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">script://test games.*.shopee.**</span><br><span class=\"line\"># 如果需要通过配置给脚本传递一些额外参数，可以如下配置</span><br><span class=\"line\">script://test(a,b,c) games.*.shopee.**</span><br></pre></td></tr></table></figure>\n<p>可以在脚本中通过 process.args 获取:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.handleRequest = (ctx, next) =&gt; &#123;</span><br><span class=\"line\">\tconsole.log(process.args); // output: [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2、操作WebSocket请求-需要开启HTTPs拦截\"><a href=\"#2、操作WebSocket请求-需要开启HTTPs拦截\" class=\"headerlink\" title=\"2、操作WebSocket请求(需要开启HTTPs拦截)\"></a>2、操作WebSocket请求(需要开启HTTPs拦截)</h2><p>脚本中输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Node &lt; 7.6可以改用genrator和yield</span><br><span class=\"line\">exports.handleWebSocket = async (req, connect) =&gt; &#123;</span><br><span class=\"line\">\t// connect方法可以设置connect(&#123; host, port &#125;);</span><br><span class=\"line\">  \tconst res = await connect();</span><br><span class=\"line\">  \tres.on(&apos;message&apos;, (data) =&gt; &#123;</span><br><span class=\"line\">    \t// 在script的Console打印出服务端发送的数据</span><br><span class=\"line\">    \tconsole.log(&apos;Received: &apos;, data);</span><br><span class=\"line\">    \t// 可以修改后再发送到Server</span><br><span class=\"line\">    \treq.send(data);</span><br><span class=\"line\">  \t&#125;);</span><br><span class=\"line\">  \treq.on(&apos;message&apos;, (data) =&gt; &#123;</span><br><span class=\"line\">    \t// 在script的Console打印出客户端发送的数据</span><br><span class=\"line\">    \tconsole.log(&apos;Sent: &apos;, data);</span><br><span class=\"line\">    \t// 可以修改后再发送到Server</span><br><span class=\"line\">    \tres.send(data);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>whistle规则配置同上</p>\n<p>更多关于whistle.script的使用详见官网：<a href=\"https://github.com/whistle-plugins/whistle.script\" target=\"_blank\" rel=\"noopener\">https://github.com/whistle-plugins/whistle.script</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一、安装\"><a href=\"#一、安装\" class=\"headerlink\" title=\"一、安装\"></a>一、安装</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g whistle.script</span><br><span class=\"line\"># Mac、Linux用户可能需要加sudo</span><br><span class=\"line\">sudo npm install -g whistle.script</span><br></pre></td></tr></table></figure>\n<p>安装插件后要重启whistle</p>\n<h1 id=\"二、使用\"><a href=\"#二、使用\" class=\"headerlink\" title=\"二、使用\"></a>二、使用</h1><p>打开script插件的界面，创建一个名字为 test 的脚本:</p>\n<ul>\n<li>可以通过 Plugins-&gt;Home-&gt;script打开或右键并选择 在新标签页中打开</li>\n<li>或者直接访问 <a href=\"http://local.whistlejs.com/plugin.script\" target=\"_blank\" rel=\"noopener\">http://local.whistlejs.com/plugin.script</a></li>\n</ul>\n<h1 id=\"三、操作请求\"><a href=\"#三、操作请求\" class=\"headerlink\" title=\"三、操作请求\"></a>三、操作请求</h1><h2 id=\"1、操作HTTP或HTTPs请求-操作HTTPs需要开启HTTPs拦截\"><a href=\"#1、操作HTTP或HTTPs请求-操作HTTPs需要开启HTTPs拦截\" class=\"headerlink\" title=\"1、操作HTTP或HTTPs请求(操作HTTPs需要开启HTTPs拦截)\"></a>1、操作HTTP或HTTPs请求(操作HTTPs需要开启HTTPs拦截)</h2><p>脚本中输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.handleRequest = function* (ctx, next) &#123;</span><br><span class=\"line\">    // ctx.fullUrl 可以获取请求url</span><br><span class=\"line\">    // ctx.headers 可以获取请求头</span><br><span class=\"line\">    // ctx.options 里面包含一些特殊的请求头字段，分别可以获取一些额外信息，如请设置的规则等</span><br><span class=\"line\">    // ctx.method 获取和设置请求方法</span><br><span class=\"line\">    // const reqBody = yield ctx.getReqBody(); 获取请求body的Buffer数据，如果没有数据返回null</span><br><span class=\"line\">    // const reqText = yield ctx.getReqText();  获取请求body的文本，如果没有返回&apos;&apos;</span><br><span class=\"line\">    // const formData = yield ctx.getReqForm(); 获取表单对象，如果不是表单，返回空对象&#123;&#125;</span><br><span class=\"line\">    // console.log(ctx.method, ctx.headers, reqBody);</span><br><span class=\"line\">    // ctx.req.body = String| Buffer | Stream | null，修改请求的内容</span><br><span class=\"line\">    // 只有执行next方法后才可以把正常的请求发送出去</span><br><span class=\"line\">    // 如果需要自定义请求，可以通过全局的request方法操作</span><br><span class=\"line\">    // console.log(request);</span><br><span class=\"line\">    // next方法可以设置next(&#123; host, port &#125;);</span><br><span class=\"line\">    const &#123; statusCode, headers &#125; = yield next(); </span><br><span class=\"line\">    console.log(ctx.fullUrl, statusCode, headers);</span><br><span class=\"line\">    // const resBody = yield ctx.getResBody();</span><br><span class=\"line\">    // const resText = yield ctx.getResText();</span><br><span class=\"line\">    // ctx.status = 404; 修改响应状态码</span><br><span class=\"line\">    // ctx.set(headers); 批量修改响应头</span><br><span class=\"line\">    // ctx.set(&apos;x-test&apos;, &apos;abc&apos;); 修改响应头</span><br><span class=\"line\">    // ctx.body = String| Buffer | Stream | null; 修改响应内容</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">// 如果Node &gt;= 7.6，可以采用async await的方式</span><br><span class=\"line\">exports.handleRequest = async (ctx, next) =&gt; &#123;</span><br><span class=\"line\">\t// do sth</span><br><span class=\"line\">    // next方法可以设置next(&#123; host, port &#125;);</span><br><span class=\"line\">    const &#123; statusCode, headers &#125; = await next(); </span><br><span class=\"line\">    // do sth</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>在whistle的Rules配置界面上输入规则（需要放在最前面）:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">script://test games.*.shopee.**</span><br><span class=\"line\"># 如果需要通过配置给脚本传递一些额外参数，可以如下配置</span><br><span class=\"line\">script://test(a,b,c) games.*.shopee.**</span><br></pre></td></tr></table></figure>\n<p>可以在脚本中通过 process.args 获取:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.handleRequest = (ctx, next) =&gt; &#123;</span><br><span class=\"line\">\tconsole.log(process.args); // output: [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2、操作WebSocket请求-需要开启HTTPs拦截\"><a href=\"#2、操作WebSocket请求-需要开启HTTPs拦截\" class=\"headerlink\" title=\"2、操作WebSocket请求(需要开启HTTPs拦截)\"></a>2、操作WebSocket请求(需要开启HTTPs拦截)</h2><p>脚本中输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Node &lt; 7.6可以改用genrator和yield</span><br><span class=\"line\">exports.handleWebSocket = async (req, connect) =&gt; &#123;</span><br><span class=\"line\">\t// connect方法可以设置connect(&#123; host, port &#125;);</span><br><span class=\"line\">  \tconst res = await connect();</span><br><span class=\"line\">  \tres.on(&apos;message&apos;, (data) =&gt; &#123;</span><br><span class=\"line\">    \t// 在script的Console打印出服务端发送的数据</span><br><span class=\"line\">    \tconsole.log(&apos;Received: &apos;, data);</span><br><span class=\"line\">    \t// 可以修改后再发送到Server</span><br><span class=\"line\">    \treq.send(data);</span><br><span class=\"line\">  \t&#125;);</span><br><span class=\"line\">  \treq.on(&apos;message&apos;, (data) =&gt; &#123;</span><br><span class=\"line\">    \t// 在script的Console打印出客户端发送的数据</span><br><span class=\"line\">    \tconsole.log(&apos;Sent: &apos;, data);</span><br><span class=\"line\">    \t// 可以修改后再发送到Server</span><br><span class=\"line\">    \tres.send(data);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>whistle规则配置同上</p>\n<p>更多关于whistle.script的使用详见官网：<a href=\"https://github.com/whistle-plugins/whistle.script\" target=\"_blank\" rel=\"noopener\">https://github.com/whistle-plugins/whistle.script</a></p>\n"},{"title":"渐进增强和优雅降级","date":"2019-04-24T16:00:00.000Z","comments":1,"_content":"\n### 渐进增强\n针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。\n```\n.transition{\n  -webkit-transition: all .5s;\n     -moz-transition: all .5s;\n       -o-transition: all .5s;\n          transition: all .5s;  \n}\n```\n\n### 优雅降级\n一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。\n```\n.transition{ \n　　     transition: all .5s;\n　　  -o-transition: all .5s;\n  　-moz-transition: all .5s;\n -webkit-transition: all .5s;\n}\n```\n\n### 区别\n- 渐进增强观点认为应该关注于内容本身。\n- 优雅降级观点认为应该针对那些最高级、最完善的浏览器来设计网站。","source":"_posts/前端/渐进增强和优雅降级.md","raw":"---\ntitle: 渐进增强和优雅降级\ndate: 2019-04-25\ntags: [前端]\ncategories: 前端\ncomments: true\n---\n\n### 渐进增强\n针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。\n```\n.transition{\n  -webkit-transition: all .5s;\n     -moz-transition: all .5s;\n       -o-transition: all .5s;\n          transition: all .5s;  \n}\n```\n\n### 优雅降级\n一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。\n```\n.transition{ \n　　     transition: all .5s;\n　　  -o-transition: all .5s;\n  　-moz-transition: all .5s;\n -webkit-transition: all .5s;\n}\n```\n\n### 区别\n- 渐进增强观点认为应该关注于内容本身。\n- 优雅降级观点认为应该针对那些最高级、最完善的浏览器来设计网站。","slug":"前端/渐进增强和优雅降级","published":1,"updated":"2022-07-22T10:11:34.481Z","layout":"post","photos":[],"link":"","_id":"cl5wb2yna00d7cj38rh4evagr","content":"<h3 id=\"渐进增强\"><a href=\"#渐进增强\" class=\"headerlink\" title=\"渐进增强\"></a>渐进增强</h3><p>针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.transition&#123;</span><br><span class=\"line\">  -webkit-transition: all .5s;</span><br><span class=\"line\">     -moz-transition: all .5s;</span><br><span class=\"line\">       -o-transition: all .5s;</span><br><span class=\"line\">          transition: all .5s;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"优雅降级\"><a href=\"#优雅降级\" class=\"headerlink\" title=\"优雅降级\"></a>优雅降级</h3><p>一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.transition&#123; </span><br><span class=\"line\">　　     transition: all .5s;</span><br><span class=\"line\">　　  -o-transition: all .5s;</span><br><span class=\"line\">  　-moz-transition: all .5s;</span><br><span class=\"line\"> -webkit-transition: all .5s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h3><ul>\n<li>渐进增强观点认为应该关注于内容本身。</li>\n<li>优雅降级观点认为应该针对那些最高级、最完善的浏览器来设计网站。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"渐进增强\"><a href=\"#渐进增强\" class=\"headerlink\" title=\"渐进增强\"></a>渐进增强</h3><p>针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.transition&#123;</span><br><span class=\"line\">  -webkit-transition: all .5s;</span><br><span class=\"line\">     -moz-transition: all .5s;</span><br><span class=\"line\">       -o-transition: all .5s;</span><br><span class=\"line\">          transition: all .5s;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"优雅降级\"><a href=\"#优雅降级\" class=\"headerlink\" title=\"优雅降级\"></a>优雅降级</h3><p>一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.transition&#123; </span><br><span class=\"line\">　　     transition: all .5s;</span><br><span class=\"line\">　　  -o-transition: all .5s;</span><br><span class=\"line\">  　-moz-transition: all .5s;</span><br><span class=\"line\"> -webkit-transition: all .5s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h3><ul>\n<li>渐进增强观点认为应该关注于内容本身。</li>\n<li>优雅降级观点认为应该针对那些最高级、最完善的浏览器来设计网站。</li>\n</ul>\n"},{"title":"浏览器内核、渲染引擎、JS引擎","date":"2021-02-19T16:00:00.000Z","comments":1,"_content":"\n### 定义\n- 浏览器内核分成两部分：渲染引擎和JS引擎。\n\n![image](https://images2018.cnblogs.com/blog/30292/201803/30292-20180307181201743-373920720.png)\n\n- 由于JS引擎越来越独立，浏览器内核 就倾向于 单指 渲染引擎。\n\n![image](https://img2018.cnblogs.com/blog/955092/201910/955092-20191022134020182-2106106379.png)\n\n- 渲染引擎是一种对HTML文档进行解析并将其显示在页面上的工具。（说白了，就是按照HTML代码在界面上绘制各种控件图形）\n\n### 常见引擎\n#### 渲染引擎\n- firefox使用gecko引擎\n- IE使用Trident引擎\n- 2015年微软推出自己新的浏览器，原名叫斯巴达，后改名edge,使用edge引擎\n- opera最早使用Presto引擎，后来弃用\n- chrome\\safari\\opera使用webkit引擎\n- 13年chrome和opera开始使用Blink引擎\n\n#### JS 引擎\n- 老版本IE使用Jscript引擎\n- IE9之后使用Chakra引擎\n- edge浏览器仍然使用Chakra引擎\n- firefox使用monkey系列引擎\n- safari使用的SquirrelFish系列引擎\n- Opera使用Carakan引擎\n- chrome使用V8引擎。nodeJs其实就是封装了V8引擎\n\n### 参考链接\n[浏览器内核、渲染引擎、JS引擎简介](https://www.cnblogs.com/jameszou/p/8524501.html)","source":"_posts/前端/浏览器内核、渲染引擎、JS引擎.md","raw":"---\ntitle: 浏览器内核、渲染引擎、JS引擎\ndate: 2021-02-20\ntags: [前端]\ncategories: 前端\ncomments: true\n---\n\n### 定义\n- 浏览器内核分成两部分：渲染引擎和JS引擎。\n\n![image](https://images2018.cnblogs.com/blog/30292/201803/30292-20180307181201743-373920720.png)\n\n- 由于JS引擎越来越独立，浏览器内核 就倾向于 单指 渲染引擎。\n\n![image](https://img2018.cnblogs.com/blog/955092/201910/955092-20191022134020182-2106106379.png)\n\n- 渲染引擎是一种对HTML文档进行解析并将其显示在页面上的工具。（说白了，就是按照HTML代码在界面上绘制各种控件图形）\n\n### 常见引擎\n#### 渲染引擎\n- firefox使用gecko引擎\n- IE使用Trident引擎\n- 2015年微软推出自己新的浏览器，原名叫斯巴达，后改名edge,使用edge引擎\n- opera最早使用Presto引擎，后来弃用\n- chrome\\safari\\opera使用webkit引擎\n- 13年chrome和opera开始使用Blink引擎\n\n#### JS 引擎\n- 老版本IE使用Jscript引擎\n- IE9之后使用Chakra引擎\n- edge浏览器仍然使用Chakra引擎\n- firefox使用monkey系列引擎\n- safari使用的SquirrelFish系列引擎\n- Opera使用Carakan引擎\n- chrome使用V8引擎。nodeJs其实就是封装了V8引擎\n\n### 参考链接\n[浏览器内核、渲染引擎、JS引擎简介](https://www.cnblogs.com/jameszou/p/8524501.html)","slug":"前端/浏览器内核、渲染引擎、JS引擎","published":1,"updated":"2022-07-22T10:11:21.432Z","layout":"post","photos":[],"link":"","_id":"cl5wb2ynb00dccj382juecedr","content":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><ul>\n<li>浏览器内核分成两部分：渲染引擎和JS引擎。</li>\n</ul>\n<p><img src=\"https://images2018.cnblogs.com/blog/30292/201803/30292-20180307181201743-373920720.png\" alt=\"image\"></p>\n<ul>\n<li>由于JS引擎越来越独立，浏览器内核 就倾向于 单指 渲染引擎。</li>\n</ul>\n<p><img src=\"https://img2018.cnblogs.com/blog/955092/201910/955092-20191022134020182-2106106379.png\" alt=\"image\"></p>\n<ul>\n<li>渲染引擎是一种对HTML文档进行解析并将其显示在页面上的工具。（说白了，就是按照HTML代码在界面上绘制各种控件图形）</li>\n</ul>\n<h3 id=\"常见引擎\"><a href=\"#常见引擎\" class=\"headerlink\" title=\"常见引擎\"></a>常见引擎</h3><h4 id=\"渲染引擎\"><a href=\"#渲染引擎\" class=\"headerlink\" title=\"渲染引擎\"></a>渲染引擎</h4><ul>\n<li>firefox使用gecko引擎</li>\n<li>IE使用Trident引擎</li>\n<li>2015年微软推出自己新的浏览器，原名叫斯巴达，后改名edge,使用edge引擎</li>\n<li>opera最早使用Presto引擎，后来弃用</li>\n<li>chrome\\safari\\opera使用webkit引擎</li>\n<li>13年chrome和opera开始使用Blink引擎</li>\n</ul>\n<h4 id=\"JS-引擎\"><a href=\"#JS-引擎\" class=\"headerlink\" title=\"JS 引擎\"></a>JS 引擎</h4><ul>\n<li>老版本IE使用Jscript引擎</li>\n<li>IE9之后使用Chakra引擎</li>\n<li>edge浏览器仍然使用Chakra引擎</li>\n<li>firefox使用monkey系列引擎</li>\n<li>safari使用的SquirrelFish系列引擎</li>\n<li>Opera使用Carakan引擎</li>\n<li>chrome使用V8引擎。nodeJs其实就是封装了V8引擎</li>\n</ul>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"https://www.cnblogs.com/jameszou/p/8524501.html\" target=\"_blank\" rel=\"noopener\">浏览器内核、渲染引擎、JS引擎简介</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><ul>\n<li>浏览器内核分成两部分：渲染引擎和JS引擎。</li>\n</ul>\n<p><img src=\"https://images2018.cnblogs.com/blog/30292/201803/30292-20180307181201743-373920720.png\" alt=\"image\"></p>\n<ul>\n<li>由于JS引擎越来越独立，浏览器内核 就倾向于 单指 渲染引擎。</li>\n</ul>\n<p><img src=\"https://img2018.cnblogs.com/blog/955092/201910/955092-20191022134020182-2106106379.png\" alt=\"image\"></p>\n<ul>\n<li>渲染引擎是一种对HTML文档进行解析并将其显示在页面上的工具。（说白了，就是按照HTML代码在界面上绘制各种控件图形）</li>\n</ul>\n<h3 id=\"常见引擎\"><a href=\"#常见引擎\" class=\"headerlink\" title=\"常见引擎\"></a>常见引擎</h3><h4 id=\"渲染引擎\"><a href=\"#渲染引擎\" class=\"headerlink\" title=\"渲染引擎\"></a>渲染引擎</h4><ul>\n<li>firefox使用gecko引擎</li>\n<li>IE使用Trident引擎</li>\n<li>2015年微软推出自己新的浏览器，原名叫斯巴达，后改名edge,使用edge引擎</li>\n<li>opera最早使用Presto引擎，后来弃用</li>\n<li>chrome\\safari\\opera使用webkit引擎</li>\n<li>13年chrome和opera开始使用Blink引擎</li>\n</ul>\n<h4 id=\"JS-引擎\"><a href=\"#JS-引擎\" class=\"headerlink\" title=\"JS 引擎\"></a>JS 引擎</h4><ul>\n<li>老版本IE使用Jscript引擎</li>\n<li>IE9之后使用Chakra引擎</li>\n<li>edge浏览器仍然使用Chakra引擎</li>\n<li>firefox使用monkey系列引擎</li>\n<li>safari使用的SquirrelFish系列引擎</li>\n<li>Opera使用Carakan引擎</li>\n<li>chrome使用V8引擎。nodeJs其实就是封装了V8引擎</li>\n</ul>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"https://www.cnblogs.com/jameszou/p/8524501.html\" target=\"_blank\" rel=\"noopener\">浏览器内核、渲染引擎、JS引擎简介</a></p>\n"},{"title":"虚拟dom","date":"2019-03-19T16:00:00.000Z","comments":1,"_content":"\n### 是什么\n可以看作是一个使用javascript模拟了DOM结构的树形结构，这个树结构包含整个DOM结构的信息。\n### 为什么\n之前使用原生js或者jquery写页面的时候会发现操作DOM是一件非常麻烦的一件事情，且在浏览器里一遍又一遍的渲染DOM是非常非常消耗性能的。在js做dom对比，减少对dom的操作，而不是每一次都要渲染，这样效率会提高。\n","source":"_posts/前端/虚拟dom.md","raw":"---\ntitle: 虚拟dom\ndate: 2019-03-20\ntags: [前端]\ncategories: 前端\ncomments: true\n---\n\n### 是什么\n可以看作是一个使用javascript模拟了DOM结构的树形结构，这个树结构包含整个DOM结构的信息。\n### 为什么\n之前使用原生js或者jquery写页面的时候会发现操作DOM是一件非常麻烦的一件事情，且在浏览器里一遍又一遍的渲染DOM是非常非常消耗性能的。在js做dom对比，减少对dom的操作，而不是每一次都要渲染，这样效率会提高。\n","slug":"前端/虚拟dom","published":1,"updated":"2022-07-22T10:11:02.969Z","layout":"post","photos":[],"link":"","_id":"cl5wb2ynd00dfcj386q5awx74","content":"<h3 id=\"是什么\"><a href=\"#是什么\" class=\"headerlink\" title=\"是什么\"></a>是什么</h3><p>可以看作是一个使用javascript模拟了DOM结构的树形结构，这个树结构包含整个DOM结构的信息。</p>\n<h3 id=\"为什么\"><a href=\"#为什么\" class=\"headerlink\" title=\"为什么\"></a>为什么</h3><p>之前使用原生js或者jquery写页面的时候会发现操作DOM是一件非常麻烦的一件事情，且在浏览器里一遍又一遍的渲染DOM是非常非常消耗性能的。在js做dom对比，减少对dom的操作，而不是每一次都要渲染，这样效率会提高。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"是什么\"><a href=\"#是什么\" class=\"headerlink\" title=\"是什么\"></a>是什么</h3><p>可以看作是一个使用javascript模拟了DOM结构的树形结构，这个树结构包含整个DOM结构的信息。</p>\n<h3 id=\"为什么\"><a href=\"#为什么\" class=\"headerlink\" title=\"为什么\"></a>为什么</h3><p>之前使用原生js或者jquery写页面的时候会发现操作DOM是一件非常麻烦的一件事情，且在浏览器里一遍又一遍的渲染DOM是非常非常消耗性能的。在js做dom对比，减少对dom的操作，而不是每一次都要渲染，这样效率会提高。</p>\n"},{"title":"行内元素、块元素、行内块元素","date":"2020-02-21T16:00:00.000Z","comments":1,"_content":"\n### 行内元素\n- 设置宽高无效。\n- margin水平方向有效，垂直方向无效。\n- padding水平方向有效，垂直方向在显示上有效果即会增大元素的内容范围，但对其他元素无影响。\n- 不会自动进行换行。\n\n```\n常见行内元素\na - 锚点\nb - 粗体(不推荐)\nbig - 大字体\nbr - 换行\nem - 强调\nfont - 字体设定(不推荐)\ni - 斜体\nimg - 图片\ninput - 输入框\nlabel - 表格标签\nselect - 项目选择\nsmall - 小字体文本\nspan - 常用内联容器，定义文本内区块\nstrong - 粗体强调\ntextarea - 多行文本输入框\nu - 下划线\nvar - 定义变量\n```\n\n### 块元素\n- 能够识别宽高。\n- margin和padding的上下左右均对其有效。\n- 可以自动换行。\n- 多个块状元素标签写在一起，默认排列方式为从上至下。\n\n```\n常见块元素\naddress - 地址\nenter - 居中对齐块\ndir - 目录列表\ndiv - 常用块级容器，也是css layout的主要标签\ndl - 定义列表\nform - 交互表单\nh1 - 大标题\nh2 - 副标题\nh3 - 3级标题\nh4 - 4级标题\nh5 - 5级标题\nh6 - 6级标题\nhr - 水平分隔线\nmenu - 菜单列表\nol - 排序表单\np - 段落\ntable - 表格\nul - 非排序列表（无序列表）\n```\n### 可变元素\n可变元素由上下文语境来决定是块元素还是内联元素 \n\n```\nbutton - 按钮\ndel - 删除文本\niframe - inline frame\nins - 插入的文本\nmap - 图片区块（map）\nobject - object对象\nscript - 客户端脚本\n```\n\n\n### 行内块元素\n- 不自动换行\n- 能够识别宽高\n- 默认排列方式为从左到右\n\n### 三者转换\n使用display属性能够将三者任意转换：\n- display:inline;转换为行内元素\n- display:block;转换为块状元素\n- display:inline-block;转换为行内块状元素\n","source":"_posts/前端/行内元素、块元素、行内块元素.md","raw":"---\ntitle: 行内元素、块元素、行内块元素\ndate: 2020-02-22\ntags: [前端]\ncategories: 前端\ncomments: true\n---\n\n### 行内元素\n- 设置宽高无效。\n- margin水平方向有效，垂直方向无效。\n- padding水平方向有效，垂直方向在显示上有效果即会增大元素的内容范围，但对其他元素无影响。\n- 不会自动进行换行。\n\n```\n常见行内元素\na - 锚点\nb - 粗体(不推荐)\nbig - 大字体\nbr - 换行\nem - 强调\nfont - 字体设定(不推荐)\ni - 斜体\nimg - 图片\ninput - 输入框\nlabel - 表格标签\nselect - 项目选择\nsmall - 小字体文本\nspan - 常用内联容器，定义文本内区块\nstrong - 粗体强调\ntextarea - 多行文本输入框\nu - 下划线\nvar - 定义变量\n```\n\n### 块元素\n- 能够识别宽高。\n- margin和padding的上下左右均对其有效。\n- 可以自动换行。\n- 多个块状元素标签写在一起，默认排列方式为从上至下。\n\n```\n常见块元素\naddress - 地址\nenter - 居中对齐块\ndir - 目录列表\ndiv - 常用块级容器，也是css layout的主要标签\ndl - 定义列表\nform - 交互表单\nh1 - 大标题\nh2 - 副标题\nh3 - 3级标题\nh4 - 4级标题\nh5 - 5级标题\nh6 - 6级标题\nhr - 水平分隔线\nmenu - 菜单列表\nol - 排序表单\np - 段落\ntable - 表格\nul - 非排序列表（无序列表）\n```\n### 可变元素\n可变元素由上下文语境来决定是块元素还是内联元素 \n\n```\nbutton - 按钮\ndel - 删除文本\niframe - inline frame\nins - 插入的文本\nmap - 图片区块（map）\nobject - object对象\nscript - 客户端脚本\n```\n\n\n### 行内块元素\n- 不自动换行\n- 能够识别宽高\n- 默认排列方式为从左到右\n\n### 三者转换\n使用display属性能够将三者任意转换：\n- display:inline;转换为行内元素\n- display:block;转换为块状元素\n- display:inline-block;转换为行内块状元素\n","slug":"前端/行内元素、块元素、行内块元素","published":1,"updated":"2022-07-22T10:11:28.001Z","layout":"post","photos":[],"link":"","_id":"cl5wb2yne00dkcj38ac5zxikb","content":"<h3 id=\"行内元素\"><a href=\"#行内元素\" class=\"headerlink\" title=\"行内元素\"></a>行内元素</h3><ul>\n<li>设置宽高无效。</li>\n<li>margin水平方向有效，垂直方向无效。</li>\n<li>padding水平方向有效，垂直方向在显示上有效果即会增大元素的内容范围，但对其他元素无影响。</li>\n<li>不会自动进行换行。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">常见行内元素</span><br><span class=\"line\">a - 锚点</span><br><span class=\"line\">b - 粗体(不推荐)</span><br><span class=\"line\">big - 大字体</span><br><span class=\"line\">br - 换行</span><br><span class=\"line\">em - 强调</span><br><span class=\"line\">font - 字体设定(不推荐)</span><br><span class=\"line\">i - 斜体</span><br><span class=\"line\">img - 图片</span><br><span class=\"line\">input - 输入框</span><br><span class=\"line\">label - 表格标签</span><br><span class=\"line\">select - 项目选择</span><br><span class=\"line\">small - 小字体文本</span><br><span class=\"line\">span - 常用内联容器，定义文本内区块</span><br><span class=\"line\">strong - 粗体强调</span><br><span class=\"line\">textarea - 多行文本输入框</span><br><span class=\"line\">u - 下划线</span><br><span class=\"line\">var - 定义变量</span><br></pre></td></tr></table></figure>\n<h3 id=\"块元素\"><a href=\"#块元素\" class=\"headerlink\" title=\"块元素\"></a>块元素</h3><ul>\n<li>能够识别宽高。</li>\n<li>margin和padding的上下左右均对其有效。</li>\n<li>可以自动换行。</li>\n<li>多个块状元素标签写在一起，默认排列方式为从上至下。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">常见块元素</span><br><span class=\"line\">address - 地址</span><br><span class=\"line\">enter - 居中对齐块</span><br><span class=\"line\">dir - 目录列表</span><br><span class=\"line\">div - 常用块级容器，也是css layout的主要标签</span><br><span class=\"line\">dl - 定义列表</span><br><span class=\"line\">form - 交互表单</span><br><span class=\"line\">h1 - 大标题</span><br><span class=\"line\">h2 - 副标题</span><br><span class=\"line\">h3 - 3级标题</span><br><span class=\"line\">h4 - 4级标题</span><br><span class=\"line\">h5 - 5级标题</span><br><span class=\"line\">h6 - 6级标题</span><br><span class=\"line\">hr - 水平分隔线</span><br><span class=\"line\">menu - 菜单列表</span><br><span class=\"line\">ol - 排序表单</span><br><span class=\"line\">p - 段落</span><br><span class=\"line\">table - 表格</span><br><span class=\"line\">ul - 非排序列表（无序列表）</span><br></pre></td></tr></table></figure>\n<h3 id=\"可变元素\"><a href=\"#可变元素\" class=\"headerlink\" title=\"可变元素\"></a>可变元素</h3><p>可变元素由上下文语境来决定是块元素还是内联元素 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button - 按钮</span><br><span class=\"line\">del - 删除文本</span><br><span class=\"line\">iframe - inline frame</span><br><span class=\"line\">ins - 插入的文本</span><br><span class=\"line\">map - 图片区块（map）</span><br><span class=\"line\">object - object对象</span><br><span class=\"line\">script - 客户端脚本</span><br></pre></td></tr></table></figure>\n<h3 id=\"行内块元素\"><a href=\"#行内块元素\" class=\"headerlink\" title=\"行内块元素\"></a>行内块元素</h3><ul>\n<li>不自动换行</li>\n<li>能够识别宽高</li>\n<li>默认排列方式为从左到右</li>\n</ul>\n<h3 id=\"三者转换\"><a href=\"#三者转换\" class=\"headerlink\" title=\"三者转换\"></a>三者转换</h3><p>使用display属性能够将三者任意转换：</p>\n<ul>\n<li>display:inline;转换为行内元素</li>\n<li>display:block;转换为块状元素</li>\n<li>display:inline-block;转换为行内块状元素</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"行内元素\"><a href=\"#行内元素\" class=\"headerlink\" title=\"行内元素\"></a>行内元素</h3><ul>\n<li>设置宽高无效。</li>\n<li>margin水平方向有效，垂直方向无效。</li>\n<li>padding水平方向有效，垂直方向在显示上有效果即会增大元素的内容范围，但对其他元素无影响。</li>\n<li>不会自动进行换行。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">常见行内元素</span><br><span class=\"line\">a - 锚点</span><br><span class=\"line\">b - 粗体(不推荐)</span><br><span class=\"line\">big - 大字体</span><br><span class=\"line\">br - 换行</span><br><span class=\"line\">em - 强调</span><br><span class=\"line\">font - 字体设定(不推荐)</span><br><span class=\"line\">i - 斜体</span><br><span class=\"line\">img - 图片</span><br><span class=\"line\">input - 输入框</span><br><span class=\"line\">label - 表格标签</span><br><span class=\"line\">select - 项目选择</span><br><span class=\"line\">small - 小字体文本</span><br><span class=\"line\">span - 常用内联容器，定义文本内区块</span><br><span class=\"line\">strong - 粗体强调</span><br><span class=\"line\">textarea - 多行文本输入框</span><br><span class=\"line\">u - 下划线</span><br><span class=\"line\">var - 定义变量</span><br></pre></td></tr></table></figure>\n<h3 id=\"块元素\"><a href=\"#块元素\" class=\"headerlink\" title=\"块元素\"></a>块元素</h3><ul>\n<li>能够识别宽高。</li>\n<li>margin和padding的上下左右均对其有效。</li>\n<li>可以自动换行。</li>\n<li>多个块状元素标签写在一起，默认排列方式为从上至下。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">常见块元素</span><br><span class=\"line\">address - 地址</span><br><span class=\"line\">enter - 居中对齐块</span><br><span class=\"line\">dir - 目录列表</span><br><span class=\"line\">div - 常用块级容器，也是css layout的主要标签</span><br><span class=\"line\">dl - 定义列表</span><br><span class=\"line\">form - 交互表单</span><br><span class=\"line\">h1 - 大标题</span><br><span class=\"line\">h2 - 副标题</span><br><span class=\"line\">h3 - 3级标题</span><br><span class=\"line\">h4 - 4级标题</span><br><span class=\"line\">h5 - 5级标题</span><br><span class=\"line\">h6 - 6级标题</span><br><span class=\"line\">hr - 水平分隔线</span><br><span class=\"line\">menu - 菜单列表</span><br><span class=\"line\">ol - 排序表单</span><br><span class=\"line\">p - 段落</span><br><span class=\"line\">table - 表格</span><br><span class=\"line\">ul - 非排序列表（无序列表）</span><br></pre></td></tr></table></figure>\n<h3 id=\"可变元素\"><a href=\"#可变元素\" class=\"headerlink\" title=\"可变元素\"></a>可变元素</h3><p>可变元素由上下文语境来决定是块元素还是内联元素 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button - 按钮</span><br><span class=\"line\">del - 删除文本</span><br><span class=\"line\">iframe - inline frame</span><br><span class=\"line\">ins - 插入的文本</span><br><span class=\"line\">map - 图片区块（map）</span><br><span class=\"line\">object - object对象</span><br><span class=\"line\">script - 客户端脚本</span><br></pre></td></tr></table></figure>\n<h3 id=\"行内块元素\"><a href=\"#行内块元素\" class=\"headerlink\" title=\"行内块元素\"></a>行内块元素</h3><ul>\n<li>不自动换行</li>\n<li>能够识别宽高</li>\n<li>默认排列方式为从左到右</li>\n</ul>\n<h3 id=\"三者转换\"><a href=\"#三者转换\" class=\"headerlink\" title=\"三者转换\"></a>三者转换</h3><p>使用display属性能够将三者任意转换：</p>\n<ul>\n<li>display:inline;转换为行内元素</li>\n<li>display:block;转换为块状元素</li>\n<li>display:inline-block;转换为行内块状元素</li>\n</ul>\n"},{"title":"页面渲染过程（输入一个url）","date":"2020-02-12T16:00:00.000Z","comments":1,"_content":"\n输入一个url到网页呈现\n1. 输入网址\n2. 发送到DNS服务器，并获取域名对应的web服务器对应的ip地址。\n3. 与web服务器建立TCP连接\n4. 浏览器向web服务器发送http请求\n5. web服务器响应请求，并返回指定url数据\n6. 浏览器下载web服务器返回的数据。\n7. 解析 HTML 文件,构建 DOM 树,同时浏览器主进程负责下载 CSS 文件\n8. CSS 文件下载完成,解析 CSS 文件生成cssom树，调用JS执行引擎执行JS代码，然后将DOM树和CSSOM树结合生成渲染树。\n9. 根据渲染树来布局，计算每个节点的布局信息，将各个节点绘制到屏幕上来渲染页面，直至显示完成。\n\n若dom树生成过程中遇到script标签，则暂停，执行js直至完成再继续生成。\n\n若执行js时需要操作cssom，还得等css加载执行完生成cssom才能继续执行。\n\n因此，css资源要先于js资源加载，js放于页面底部，尽量少影响dom树的生成\n\n![image](https://user-gold-cdn.xitu.io/2020/1/7/16f7ee2d9a5667b3?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n### 各种拓展\n#### 页面加载白屏\n原因：\n- 在弱网络下，网络延迟，JS加载延迟，会阻塞页面。\n- 客户端存在bug，缓存模块错乱，不缓存js等后来挂起的文件，以及乱缓存index.html。\n\n如果页面完全一片空白。极有可能是后端出现问题，后端配置无错误输出，并且服务状态500，这个时候页面就是一片空白。\n如果是前端导致的，那么极有可能是单页应用异常，比如到了一个没有设置的新的页面。\n1、打开能看到源码和request、response的浏览器，如chrome，查看源码输出\n2、如果是后端问题，那么后端查看accesslog、程序日志，看看是否有问题\n3、如果是前端问题，那么根据给出的js异常之类的排查\n\n\n统计白屏数量：监听某个主div的变化，在规定时间内该DIV没有变化，那就可以进行白屏统计了。\n\n监控白屏时间：监听某个主div的变化，直至页面渲染。\n\n优化：尽量减少文件夹的嵌套，文件名不要过长。\n\n#### 一个网站很卡找原因\n\n首先用3g网络测试一下：如果卡就是http请求数据可能过大。\n可以合并JS脚本和CSS文件，css精灵图，对HTTP传输进行gzip压缩。\ncss放顶部，javascript放底部。\n\n可能服务端出问题：\n比如用户访问量大，并发量大。\nmysql没有优化好，造成死锁。\n\n可以用CDN加速把数据放在离用户更近的位置。\n","source":"_posts/前端/页面渲染过程（输入一个url）.md","raw":"---\ntitle: 页面渲染过程（输入一个url）\ndate: 2020-02-13\ntags: [前端]\ncategories: 前端\ncomments: true\n---\n\n输入一个url到网页呈现\n1. 输入网址\n2. 发送到DNS服务器，并获取域名对应的web服务器对应的ip地址。\n3. 与web服务器建立TCP连接\n4. 浏览器向web服务器发送http请求\n5. web服务器响应请求，并返回指定url数据\n6. 浏览器下载web服务器返回的数据。\n7. 解析 HTML 文件,构建 DOM 树,同时浏览器主进程负责下载 CSS 文件\n8. CSS 文件下载完成,解析 CSS 文件生成cssom树，调用JS执行引擎执行JS代码，然后将DOM树和CSSOM树结合生成渲染树。\n9. 根据渲染树来布局，计算每个节点的布局信息，将各个节点绘制到屏幕上来渲染页面，直至显示完成。\n\n若dom树生成过程中遇到script标签，则暂停，执行js直至完成再继续生成。\n\n若执行js时需要操作cssom，还得等css加载执行完生成cssom才能继续执行。\n\n因此，css资源要先于js资源加载，js放于页面底部，尽量少影响dom树的生成\n\n![image](https://user-gold-cdn.xitu.io/2020/1/7/16f7ee2d9a5667b3?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n### 各种拓展\n#### 页面加载白屏\n原因：\n- 在弱网络下，网络延迟，JS加载延迟，会阻塞页面。\n- 客户端存在bug，缓存模块错乱，不缓存js等后来挂起的文件，以及乱缓存index.html。\n\n如果页面完全一片空白。极有可能是后端出现问题，后端配置无错误输出，并且服务状态500，这个时候页面就是一片空白。\n如果是前端导致的，那么极有可能是单页应用异常，比如到了一个没有设置的新的页面。\n1、打开能看到源码和request、response的浏览器，如chrome，查看源码输出\n2、如果是后端问题，那么后端查看accesslog、程序日志，看看是否有问题\n3、如果是前端问题，那么根据给出的js异常之类的排查\n\n\n统计白屏数量：监听某个主div的变化，在规定时间内该DIV没有变化，那就可以进行白屏统计了。\n\n监控白屏时间：监听某个主div的变化，直至页面渲染。\n\n优化：尽量减少文件夹的嵌套，文件名不要过长。\n\n#### 一个网站很卡找原因\n\n首先用3g网络测试一下：如果卡就是http请求数据可能过大。\n可以合并JS脚本和CSS文件，css精灵图，对HTTP传输进行gzip压缩。\ncss放顶部，javascript放底部。\n\n可能服务端出问题：\n比如用户访问量大，并发量大。\nmysql没有优化好，造成死锁。\n\n可以用CDN加速把数据放在离用户更近的位置。\n","slug":"前端/页面渲染过程（输入一个url）","published":1,"updated":"2022-07-22T10:12:16.723Z","layout":"post","photos":[],"link":"","_id":"cl5wb2ynf00dncj38ysu1y1m7","content":"<p>输入一个url到网页呈现</p>\n<ol>\n<li>输入网址</li>\n<li>发送到DNS服务器，并获取域名对应的web服务器对应的ip地址。</li>\n<li>与web服务器建立TCP连接</li>\n<li>浏览器向web服务器发送http请求</li>\n<li>web服务器响应请求，并返回指定url数据</li>\n<li>浏览器下载web服务器返回的数据。</li>\n<li>解析 HTML 文件,构建 DOM 树,同时浏览器主进程负责下载 CSS 文件</li>\n<li>CSS 文件下载完成,解析 CSS 文件生成cssom树，调用JS执行引擎执行JS代码，然后将DOM树和CSSOM树结合生成渲染树。</li>\n<li>根据渲染树来布局，计算每个节点的布局信息，将各个节点绘制到屏幕上来渲染页面，直至显示完成。</li>\n</ol>\n<p>若dom树生成过程中遇到script标签，则暂停，执行js直至完成再继续生成。</p>\n<p>若执行js时需要操作cssom，还得等css加载执行完生成cssom才能继续执行。</p>\n<p>因此，css资源要先于js资源加载，js放于页面底部，尽量少影响dom树的生成</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/1/7/16f7ee2d9a5667b3?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"image\"></p>\n<h3 id=\"各种拓展\"><a href=\"#各种拓展\" class=\"headerlink\" title=\"各种拓展\"></a>各种拓展</h3><h4 id=\"页面加载白屏\"><a href=\"#页面加载白屏\" class=\"headerlink\" title=\"页面加载白屏\"></a>页面加载白屏</h4><p>原因：</p>\n<ul>\n<li>在弱网络下，网络延迟，JS加载延迟，会阻塞页面。</li>\n<li>客户端存在bug，缓存模块错乱，不缓存js等后来挂起的文件，以及乱缓存index.html。</li>\n</ul>\n<p>如果页面完全一片空白。极有可能是后端出现问题，后端配置无错误输出，并且服务状态500，这个时候页面就是一片空白。<br>如果是前端导致的，那么极有可能是单页应用异常，比如到了一个没有设置的新的页面。<br>1、打开能看到源码和request、response的浏览器，如chrome，查看源码输出<br>2、如果是后端问题，那么后端查看accesslog、程序日志，看看是否有问题<br>3、如果是前端问题，那么根据给出的js异常之类的排查</p>\n<p>统计白屏数量：监听某个主div的变化，在规定时间内该DIV没有变化，那就可以进行白屏统计了。</p>\n<p>监控白屏时间：监听某个主div的变化，直至页面渲染。</p>\n<p>优化：尽量减少文件夹的嵌套，文件名不要过长。</p>\n<h4 id=\"一个网站很卡找原因\"><a href=\"#一个网站很卡找原因\" class=\"headerlink\" title=\"一个网站很卡找原因\"></a>一个网站很卡找原因</h4><p>首先用3g网络测试一下：如果卡就是http请求数据可能过大。<br>可以合并JS脚本和CSS文件，css精灵图，对HTTP传输进行gzip压缩。<br>css放顶部，javascript放底部。</p>\n<p>可能服务端出问题：<br>比如用户访问量大，并发量大。<br>mysql没有优化好，造成死锁。</p>\n<p>可以用CDN加速把数据放在离用户更近的位置。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>输入一个url到网页呈现</p>\n<ol>\n<li>输入网址</li>\n<li>发送到DNS服务器，并获取域名对应的web服务器对应的ip地址。</li>\n<li>与web服务器建立TCP连接</li>\n<li>浏览器向web服务器发送http请求</li>\n<li>web服务器响应请求，并返回指定url数据</li>\n<li>浏览器下载web服务器返回的数据。</li>\n<li>解析 HTML 文件,构建 DOM 树,同时浏览器主进程负责下载 CSS 文件</li>\n<li>CSS 文件下载完成,解析 CSS 文件生成cssom树，调用JS执行引擎执行JS代码，然后将DOM树和CSSOM树结合生成渲染树。</li>\n<li>根据渲染树来布局，计算每个节点的布局信息，将各个节点绘制到屏幕上来渲染页面，直至显示完成。</li>\n</ol>\n<p>若dom树生成过程中遇到script标签，则暂停，执行js直至完成再继续生成。</p>\n<p>若执行js时需要操作cssom，还得等css加载执行完生成cssom才能继续执行。</p>\n<p>因此，css资源要先于js资源加载，js放于页面底部，尽量少影响dom树的生成</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/1/7/16f7ee2d9a5667b3?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"image\"></p>\n<h3 id=\"各种拓展\"><a href=\"#各种拓展\" class=\"headerlink\" title=\"各种拓展\"></a>各种拓展</h3><h4 id=\"页面加载白屏\"><a href=\"#页面加载白屏\" class=\"headerlink\" title=\"页面加载白屏\"></a>页面加载白屏</h4><p>原因：</p>\n<ul>\n<li>在弱网络下，网络延迟，JS加载延迟，会阻塞页面。</li>\n<li>客户端存在bug，缓存模块错乱，不缓存js等后来挂起的文件，以及乱缓存index.html。</li>\n</ul>\n<p>如果页面完全一片空白。极有可能是后端出现问题，后端配置无错误输出，并且服务状态500，这个时候页面就是一片空白。<br>如果是前端导致的，那么极有可能是单页应用异常，比如到了一个没有设置的新的页面。<br>1、打开能看到源码和request、response的浏览器，如chrome，查看源码输出<br>2、如果是后端问题，那么后端查看accesslog、程序日志，看看是否有问题<br>3、如果是前端问题，那么根据给出的js异常之类的排查</p>\n<p>统计白屏数量：监听某个主div的变化，在规定时间内该DIV没有变化，那就可以进行白屏统计了。</p>\n<p>监控白屏时间：监听某个主div的变化，直至页面渲染。</p>\n<p>优化：尽量减少文件夹的嵌套，文件名不要过长。</p>\n<h4 id=\"一个网站很卡找原因\"><a href=\"#一个网站很卡找原因\" class=\"headerlink\" title=\"一个网站很卡找原因\"></a>一个网站很卡找原因</h4><p>首先用3g网络测试一下：如果卡就是http请求数据可能过大。<br>可以合并JS脚本和CSS文件，css精灵图，对HTTP传输进行gzip压缩。<br>css放顶部，javascript放底部。</p>\n<p>可能服务端出问题：<br>比如用户访问量大，并发量大。<br>mysql没有优化好，造成死锁。</p>\n<p>可以用CDN加速把数据放在离用户更近的位置。</p>\n"},{"title":"浏览器内核、渲染引擎、JS引擎","date":"2022-04-25T16:00:00.000Z","comments":1,"_content":"\n# 一、下载安装\n1. App Store可以进行下载\n2. 安装\n\n```\n$ xcode-select --install\n$ xcode-select -p\n// 显示以下信息即是成功安装 \n/Applications/Xcode.app/Contents/Developer\n```\n\n## 注意\n\n安装时出现错误\n\n```\nxcode-select -pxcode-select: error: command line tools are already installed, use \"Software Update\" to install updates\n// 解决\n$ rm -rf /Library/Developer/CommandLineTools\n$ xcode-select --install\n// 如果还是报错，加上sudo\n```\n\n# 二、ios模拟器\n\n1. 列出可用的 iOS 模拟器\n\n```\n$ xcrun instruments -s\n```\n\n2. 安装更多版本模拟器\n\nSimulator 默认只有最新的 iOS 版本的模拟器，如果你需要在老版本的 iOS 上调试，可以这样安装更多版本。\n\n- 运行Xcode\n- Window -> Devices and Simulator -> Simulator\n- 点击左下角的 + 可以添加其它型号的机器\n- OS version -> Download more simulator runtime 可以下载其他版本的iOS系统\n\n3. 启动模拟器\n\n```\n$ xcrun instruments -w XXX\n// 如 xcrun instruments -w \"iPhone 11 (13.6)\"\n```\n\n# 三、安装shopee app\n1. 下载需要安装的app压缩包\n2. 解压后直接拖入模拟器即可安装\n3. 登录时不要打开proxifier，不然会一直pending\n\n# 四、安装proxifier，配置代理\n1. 下载proxifier\n2. 安装whistle，运行w2 start启动\n3. 运行proxifier，配置\n4. 点击Proxies，添加一条 Action 规则代理到本地8899端口\n5. 然后点击Rules，新建一个规则，把以下内容添加到 Applications\n\n```\nSimulator; \"Xcode Server Builder”; \"MobileSafari”; “com.apple.WebKit.Networking”;k12;vpn;ShopeeSG;\n```\n\n# 五、安装并信任证书\n\n我们开发的都是https页面，需要在配置好代理后，下载安装证书\n\n1. iphone模拟器里用safari访问127.0.0.1:8899，然后在https那里下载安装证书\n2. 模拟器Settings -> General -> Profile, 点击证书进入下载\n3. 模拟器Settings -> General -> About -> Certificate Trust Settings, 打开whistle证书信任按钮进行信任\n\n相应安装包和代理配置可参考：whistle代理xcode iphone模拟器调试","source":"_posts/前端/移动端调试——Xcode.md","raw":"---\ntitle: 浏览器内核、渲染引擎、JS引擎\ndate: 2022-04-26\ntags: [前端]\ncategories: 前端\ncomments: true\n---\n\n# 一、下载安装\n1. App Store可以进行下载\n2. 安装\n\n```\n$ xcode-select --install\n$ xcode-select -p\n// 显示以下信息即是成功安装 \n/Applications/Xcode.app/Contents/Developer\n```\n\n## 注意\n\n安装时出现错误\n\n```\nxcode-select -pxcode-select: error: command line tools are already installed, use \"Software Update\" to install updates\n// 解决\n$ rm -rf /Library/Developer/CommandLineTools\n$ xcode-select --install\n// 如果还是报错，加上sudo\n```\n\n# 二、ios模拟器\n\n1. 列出可用的 iOS 模拟器\n\n```\n$ xcrun instruments -s\n```\n\n2. 安装更多版本模拟器\n\nSimulator 默认只有最新的 iOS 版本的模拟器，如果你需要在老版本的 iOS 上调试，可以这样安装更多版本。\n\n- 运行Xcode\n- Window -> Devices and Simulator -> Simulator\n- 点击左下角的 + 可以添加其它型号的机器\n- OS version -> Download more simulator runtime 可以下载其他版本的iOS系统\n\n3. 启动模拟器\n\n```\n$ xcrun instruments -w XXX\n// 如 xcrun instruments -w \"iPhone 11 (13.6)\"\n```\n\n# 三、安装shopee app\n1. 下载需要安装的app压缩包\n2. 解压后直接拖入模拟器即可安装\n3. 登录时不要打开proxifier，不然会一直pending\n\n# 四、安装proxifier，配置代理\n1. 下载proxifier\n2. 安装whistle，运行w2 start启动\n3. 运行proxifier，配置\n4. 点击Proxies，添加一条 Action 规则代理到本地8899端口\n5. 然后点击Rules，新建一个规则，把以下内容添加到 Applications\n\n```\nSimulator; \"Xcode Server Builder”; \"MobileSafari”; “com.apple.WebKit.Networking”;k12;vpn;ShopeeSG;\n```\n\n# 五、安装并信任证书\n\n我们开发的都是https页面，需要在配置好代理后，下载安装证书\n\n1. iphone模拟器里用safari访问127.0.0.1:8899，然后在https那里下载安装证书\n2. 模拟器Settings -> General -> Profile, 点击证书进入下载\n3. 模拟器Settings -> General -> About -> Certificate Trust Settings, 打开whistle证书信任按钮进行信任\n\n相应安装包和代理配置可参考：whistle代理xcode iphone模拟器调试","slug":"前端/移动端调试——Xcode","published":1,"updated":"2022-07-22T10:11:36.282Z","layout":"post","photos":[],"link":"","_id":"cl5wb2yng00dscj38elosf6a7","content":"<h1 id=\"一、下载安装\"><a href=\"#一、下载安装\" class=\"headerlink\" title=\"一、下载安装\"></a>一、下载安装</h1><ol>\n<li>App Store可以进行下载</li>\n<li>安装</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ xcode-select --install</span><br><span class=\"line\">$ xcode-select -p</span><br><span class=\"line\">// 显示以下信息即是成功安装 </span><br><span class=\"line\">/Applications/Xcode.app/Contents/Developer</span><br></pre></td></tr></table></figure>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>安装时出现错误</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcode-select -pxcode-select: error: command line tools are already installed, use &quot;Software Update&quot; to install updates</span><br><span class=\"line\">// 解决</span><br><span class=\"line\">$ rm -rf /Library/Developer/CommandLineTools</span><br><span class=\"line\">$ xcode-select --install</span><br><span class=\"line\">// 如果还是报错，加上sudo</span><br></pre></td></tr></table></figure>\n<h1 id=\"二、ios模拟器\"><a href=\"#二、ios模拟器\" class=\"headerlink\" title=\"二、ios模拟器\"></a>二、ios模拟器</h1><ol>\n<li>列出可用的 iOS 模拟器</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ xcrun instruments -s</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>安装更多版本模拟器</li>\n</ol>\n<p>Simulator 默认只有最新的 iOS 版本的模拟器，如果你需要在老版本的 iOS 上调试，可以这样安装更多版本。</p>\n<ul>\n<li>运行Xcode</li>\n<li>Window -&gt; Devices and Simulator -&gt; Simulator</li>\n<li>点击左下角的 + 可以添加其它型号的机器</li>\n<li>OS version -&gt; Download more simulator runtime 可以下载其他版本的iOS系统</li>\n</ul>\n<ol start=\"3\">\n<li>启动模拟器</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ xcrun instruments -w XXX</span><br><span class=\"line\">// 如 xcrun instruments -w &quot;iPhone 11 (13.6)&quot;</span><br></pre></td></tr></table></figure>\n<h1 id=\"三、安装shopee-app\"><a href=\"#三、安装shopee-app\" class=\"headerlink\" title=\"三、安装shopee app\"></a>三、安装shopee app</h1><ol>\n<li>下载需要安装的app压缩包</li>\n<li>解压后直接拖入模拟器即可安装</li>\n<li>登录时不要打开proxifier，不然会一直pending</li>\n</ol>\n<h1 id=\"四、安装proxifier，配置代理\"><a href=\"#四、安装proxifier，配置代理\" class=\"headerlink\" title=\"四、安装proxifier，配置代理\"></a>四、安装proxifier，配置代理</h1><ol>\n<li>下载proxifier</li>\n<li>安装whistle，运行w2 start启动</li>\n<li>运行proxifier，配置</li>\n<li>点击Proxies，添加一条 Action 规则代理到本地8899端口</li>\n<li>然后点击Rules，新建一个规则，把以下内容添加到 Applications</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Simulator; &quot;Xcode Server Builder”; &quot;MobileSafari”; “com.apple.WebKit.Networking”;k12;vpn;ShopeeSG;</span><br></pre></td></tr></table></figure>\n<h1 id=\"五、安装并信任证书\"><a href=\"#五、安装并信任证书\" class=\"headerlink\" title=\"五、安装并信任证书\"></a>五、安装并信任证书</h1><p>我们开发的都是https页面，需要在配置好代理后，下载安装证书</p>\n<ol>\n<li>iphone模拟器里用safari访问127.0.0.1:8899，然后在https那里下载安装证书</li>\n<li>模拟器Settings -&gt; General -&gt; Profile, 点击证书进入下载</li>\n<li>模拟器Settings -&gt; General -&gt; About -&gt; Certificate Trust Settings, 打开whistle证书信任按钮进行信任</li>\n</ol>\n<p>相应安装包和代理配置可参考：whistle代理xcode iphone模拟器调试</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一、下载安装\"><a href=\"#一、下载安装\" class=\"headerlink\" title=\"一、下载安装\"></a>一、下载安装</h1><ol>\n<li>App Store可以进行下载</li>\n<li>安装</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ xcode-select --install</span><br><span class=\"line\">$ xcode-select -p</span><br><span class=\"line\">// 显示以下信息即是成功安装 </span><br><span class=\"line\">/Applications/Xcode.app/Contents/Developer</span><br></pre></td></tr></table></figure>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>安装时出现错误</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcode-select -pxcode-select: error: command line tools are already installed, use &quot;Software Update&quot; to install updates</span><br><span class=\"line\">// 解决</span><br><span class=\"line\">$ rm -rf /Library/Developer/CommandLineTools</span><br><span class=\"line\">$ xcode-select --install</span><br><span class=\"line\">// 如果还是报错，加上sudo</span><br></pre></td></tr></table></figure>\n<h1 id=\"二、ios模拟器\"><a href=\"#二、ios模拟器\" class=\"headerlink\" title=\"二、ios模拟器\"></a>二、ios模拟器</h1><ol>\n<li>列出可用的 iOS 模拟器</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ xcrun instruments -s</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>安装更多版本模拟器</li>\n</ol>\n<p>Simulator 默认只有最新的 iOS 版本的模拟器，如果你需要在老版本的 iOS 上调试，可以这样安装更多版本。</p>\n<ul>\n<li>运行Xcode</li>\n<li>Window -&gt; Devices and Simulator -&gt; Simulator</li>\n<li>点击左下角的 + 可以添加其它型号的机器</li>\n<li>OS version -&gt; Download more simulator runtime 可以下载其他版本的iOS系统</li>\n</ul>\n<ol start=\"3\">\n<li>启动模拟器</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ xcrun instruments -w XXX</span><br><span class=\"line\">// 如 xcrun instruments -w &quot;iPhone 11 (13.6)&quot;</span><br></pre></td></tr></table></figure>\n<h1 id=\"三、安装shopee-app\"><a href=\"#三、安装shopee-app\" class=\"headerlink\" title=\"三、安装shopee app\"></a>三、安装shopee app</h1><ol>\n<li>下载需要安装的app压缩包</li>\n<li>解压后直接拖入模拟器即可安装</li>\n<li>登录时不要打开proxifier，不然会一直pending</li>\n</ol>\n<h1 id=\"四、安装proxifier，配置代理\"><a href=\"#四、安装proxifier，配置代理\" class=\"headerlink\" title=\"四、安装proxifier，配置代理\"></a>四、安装proxifier，配置代理</h1><ol>\n<li>下载proxifier</li>\n<li>安装whistle，运行w2 start启动</li>\n<li>运行proxifier，配置</li>\n<li>点击Proxies，添加一条 Action 规则代理到本地8899端口</li>\n<li>然后点击Rules，新建一个规则，把以下内容添加到 Applications</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Simulator; &quot;Xcode Server Builder”; &quot;MobileSafari”; “com.apple.WebKit.Networking”;k12;vpn;ShopeeSG;</span><br></pre></td></tr></table></figure>\n<h1 id=\"五、安装并信任证书\"><a href=\"#五、安装并信任证书\" class=\"headerlink\" title=\"五、安装并信任证书\"></a>五、安装并信任证书</h1><p>我们开发的都是https页面，需要在配置好代理后，下载安装证书</p>\n<ol>\n<li>iphone模拟器里用safari访问127.0.0.1:8899，然后在https那里下载安装证书</li>\n<li>模拟器Settings -&gt; General -&gt; Profile, 点击证书进入下载</li>\n<li>模拟器Settings -&gt; General -&gt; About -&gt; Certificate Trust Settings, 打开whistle证书信任按钮进行信任</li>\n</ol>\n<p>相应安装包和代理配置可参考：whistle代理xcode iphone模拟器调试</p>\n"},{"title":"C：冒泡法和选择法","date":"2018-12-04T16:00:00.000Z","comments":1,"_content":"\n## 冒泡法\n### 算法示例\n用起泡法对10个整数按升序排序。\n### 算法分析\n如果有n个数，则要进行n-1趟比较。在第1趟比较中要进行n-1次相邻元素的两两比较，在第j趟比较中要进行n-j次两两比较。比较的顺序从前往后，经过一趟比较后，将最值沉底（换到最后一个元素位置），最大值沉底为升序，最小值沉底为降序。\n### 算法源代码\n\n```\n  #include <stdio.h>\n　int main()\n　{\n　int a[10],i,j,t;\n　printf(\"Please input 10 numbers: \");\n　/*输入源数据*/\n　for(i=0;i<10;i++)\n　scanf(\"%d\",&a[i]);\n　/*排序*/\n　for(j=0;j<9;j++)          /*外循环控制排序趟数，n个数排n-1趟*/\n　for(i=0;i<9-j;i++)    /*内循环每趟比较的次数，第j趟比较n-j次*/\n　if(a[i]>a[i+1])    /*相邻元素比较，逆序则交换*/\n　{ t=a[i];\n　a[i]=a[i+1];\n　a[i+1]=t;\n　}\n　\n　/*输出排序结果*/\n　printf(\"The sorted numbers: \");\n　for(i=0;i<10;i++)\n　printf(\"%d   \",a[i]);\n　printf(\"\\n\");\n　return 0;\n　\n　}\n```\n\n## 选择法\n### 算法示例要求\n用选择法对10个整数按降序排序。\n### 算法分析\n每趟选出一个最值和无序序列的第一个数交换，n个数共选n-1趟。第i趟假设i为最值下标，然后将最值和i+1至最后一个数比较，找出最值的下标，若最值下标不为初设值，则将最值元素和下标为i的元素交换。\n### 算法源代码\n\n```\n#include <stdio.h>\n　int main()\n　{\n　int a[10],i,j,k,t,n=10;\n　printf(\"Please input 10 numbers:\");\n　for(i=0;i<10;i++)\n　scanf(\"%d\",&a[i]);\n　for(i=0;i<n-1;i++)   /*外循环控制趟数，n个数选n-1趟*/\n　{\n　k=i;             /*假设当前趟的第一个数为最值,记在k中 */\n　for(j=i+1;j<n;j++)  /*从下一个数到最后一个数之间找最值*/\n　if(a[k]<a[j])     /*若其后有比最值更大的*/\n　k=j;         /*则将其下标记在k中*/\n　if(k!=i)        /*若k不为最初的i值，说明在其后找到比其更大的数*/\n　{  t=a[k];  a[k]=a[i];  a[i]=t;  } /*则交换最值和当前序列的第一\n　个数*/\n　}\n　printf(\"The sorted numbers: \");\n　for(i=0;i<10;i++)\n　printf(\"%d   \",a[i]);\n　printf(\"\\n\");\n　}\n```\n\n## 区别：（个人见解）\n- 冒泡法要进行对n个数进行n-1趟，第j趟要进行n-j次比较，每次比较相邻的数不符合则要交换，每趟最多需要n-j次数的交换\n- 选择法也要进行n-1趟，每趟是选出最值，而选最值是把下标交换，直到选出最值的下标，把最值和第一位交换，每趟最多仅需1次数的交换\n- 简单地说，冒泡法每次都是数的交换（各个下标对应的数是变化的），而选择法是通过下标交换（这时候各个下标对应的数是不变的）选出最值的下标，最后再进行数的交换","source":"_posts/算法/C：冒泡法和选择法.md","raw":"---\ntitle: C：冒泡法和选择法\ndate: 2018-12-05\ntags: [算法]\ncategories: 算法\ncomments: true\n---\n\n## 冒泡法\n### 算法示例\n用起泡法对10个整数按升序排序。\n### 算法分析\n如果有n个数，则要进行n-1趟比较。在第1趟比较中要进行n-1次相邻元素的两两比较，在第j趟比较中要进行n-j次两两比较。比较的顺序从前往后，经过一趟比较后，将最值沉底（换到最后一个元素位置），最大值沉底为升序，最小值沉底为降序。\n### 算法源代码\n\n```\n  #include <stdio.h>\n　int main()\n　{\n　int a[10],i,j,t;\n　printf(\"Please input 10 numbers: \");\n　/*输入源数据*/\n　for(i=0;i<10;i++)\n　scanf(\"%d\",&a[i]);\n　/*排序*/\n　for(j=0;j<9;j++)          /*外循环控制排序趟数，n个数排n-1趟*/\n　for(i=0;i<9-j;i++)    /*内循环每趟比较的次数，第j趟比较n-j次*/\n　if(a[i]>a[i+1])    /*相邻元素比较，逆序则交换*/\n　{ t=a[i];\n　a[i]=a[i+1];\n　a[i+1]=t;\n　}\n　\n　/*输出排序结果*/\n　printf(\"The sorted numbers: \");\n　for(i=0;i<10;i++)\n　printf(\"%d   \",a[i]);\n　printf(\"\\n\");\n　return 0;\n　\n　}\n```\n\n## 选择法\n### 算法示例要求\n用选择法对10个整数按降序排序。\n### 算法分析\n每趟选出一个最值和无序序列的第一个数交换，n个数共选n-1趟。第i趟假设i为最值下标，然后将最值和i+1至最后一个数比较，找出最值的下标，若最值下标不为初设值，则将最值元素和下标为i的元素交换。\n### 算法源代码\n\n```\n#include <stdio.h>\n　int main()\n　{\n　int a[10],i,j,k,t,n=10;\n　printf(\"Please input 10 numbers:\");\n　for(i=0;i<10;i++)\n　scanf(\"%d\",&a[i]);\n　for(i=0;i<n-1;i++)   /*外循环控制趟数，n个数选n-1趟*/\n　{\n　k=i;             /*假设当前趟的第一个数为最值,记在k中 */\n　for(j=i+1;j<n;j++)  /*从下一个数到最后一个数之间找最值*/\n　if(a[k]<a[j])     /*若其后有比最值更大的*/\n　k=j;         /*则将其下标记在k中*/\n　if(k!=i)        /*若k不为最初的i值，说明在其后找到比其更大的数*/\n　{  t=a[k];  a[k]=a[i];  a[i]=t;  } /*则交换最值和当前序列的第一\n　个数*/\n　}\n　printf(\"The sorted numbers: \");\n　for(i=0;i<10;i++)\n　printf(\"%d   \",a[i]);\n　printf(\"\\n\");\n　}\n```\n\n## 区别：（个人见解）\n- 冒泡法要进行对n个数进行n-1趟，第j趟要进行n-j次比较，每次比较相邻的数不符合则要交换，每趟最多需要n-j次数的交换\n- 选择法也要进行n-1趟，每趟是选出最值，而选最值是把下标交换，直到选出最值的下标，把最值和第一位交换，每趟最多仅需1次数的交换\n- 简单地说，冒泡法每次都是数的交换（各个下标对应的数是变化的），而选择法是通过下标交换（这时候各个下标对应的数是不变的）选出最值的下标，最后再进行数的交换","slug":"算法/C：冒泡法和选择法","published":1,"updated":"2022-07-22T08:27:10.377Z","layout":"post","photos":[],"link":"","_id":"cl5wb2ynh00dvcj38ylqj8gov","content":"<h2 id=\"冒泡法\"><a href=\"#冒泡法\" class=\"headerlink\" title=\"冒泡法\"></a>冒泡法</h2><h3 id=\"算法示例\"><a href=\"#算法示例\" class=\"headerlink\" title=\"算法示例\"></a>算法示例</h3><p>用起泡法对10个整数按升序排序。</p>\n<h3 id=\"算法分析\"><a href=\"#算法分析\" class=\"headerlink\" title=\"算法分析\"></a>算法分析</h3><p>如果有n个数，则要进行n-1趟比较。在第1趟比较中要进行n-1次相邻元素的两两比较，在第j趟比较中要进行n-j次两两比较。比较的顺序从前往后，经过一趟比较后，将最值沉底（换到最后一个元素位置），最大值沉底为升序，最小值沉底为降序。</p>\n<h3 id=\"算法源代码\"><a href=\"#算法源代码\" class=\"headerlink\" title=\"算法源代码\"></a>算法源代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">　int main()</span><br><span class=\"line\">　&#123;</span><br><span class=\"line\">　int a[10],i,j,t;</span><br><span class=\"line\">　printf(&quot;Please input 10 numbers: &quot;);</span><br><span class=\"line\">　/*输入源数据*/</span><br><span class=\"line\">　for(i=0;i&lt;10;i++)</span><br><span class=\"line\">　scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class=\"line\">　/*排序*/</span><br><span class=\"line\">　for(j=0;j&lt;9;j++)          /*外循环控制排序趟数，n个数排n-1趟*/</span><br><span class=\"line\">　for(i=0;i&lt;9-j;i++)    /*内循环每趟比较的次数，第j趟比较n-j次*/</span><br><span class=\"line\">　if(a[i]&gt;a[i+1])    /*相邻元素比较，逆序则交换*/</span><br><span class=\"line\">　&#123; t=a[i];</span><br><span class=\"line\">　a[i]=a[i+1];</span><br><span class=\"line\">　a[i+1]=t;</span><br><span class=\"line\">　&#125;</span><br><span class=\"line\">　</span><br><span class=\"line\">　/*输出排序结果*/</span><br><span class=\"line\">　printf(&quot;The sorted numbers: &quot;);</span><br><span class=\"line\">　for(i=0;i&lt;10;i++)</span><br><span class=\"line\">　printf(&quot;%d   &quot;,a[i]);</span><br><span class=\"line\">　printf(&quot;\\n&quot;);</span><br><span class=\"line\">　return 0;</span><br><span class=\"line\">　</span><br><span class=\"line\">　&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"选择法\"><a href=\"#选择法\" class=\"headerlink\" title=\"选择法\"></a>选择法</h2><h3 id=\"算法示例要求\"><a href=\"#算法示例要求\" class=\"headerlink\" title=\"算法示例要求\"></a>算法示例要求</h3><p>用选择法对10个整数按降序排序。</p>\n<h3 id=\"算法分析-1\"><a href=\"#算法分析-1\" class=\"headerlink\" title=\"算法分析\"></a>算法分析</h3><p>每趟选出一个最值和无序序列的第一个数交换，n个数共选n-1趟。第i趟假设i为最值下标，然后将最值和i+1至最后一个数比较，找出最值的下标，若最值下标不为初设值，则将最值元素和下标为i的元素交换。</p>\n<h3 id=\"算法源代码-1\"><a href=\"#算法源代码-1\" class=\"headerlink\" title=\"算法源代码\"></a>算法源代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">　int main()</span><br><span class=\"line\">　&#123;</span><br><span class=\"line\">　int a[10],i,j,k,t,n=10;</span><br><span class=\"line\">　printf(&quot;Please input 10 numbers:&quot;);</span><br><span class=\"line\">　for(i=0;i&lt;10;i++)</span><br><span class=\"line\">　scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class=\"line\">　for(i=0;i&lt;n-1;i++)   /*外循环控制趟数，n个数选n-1趟*/</span><br><span class=\"line\">　&#123;</span><br><span class=\"line\">　k=i;             /*假设当前趟的第一个数为最值,记在k中 */</span><br><span class=\"line\">　for(j=i+1;j&lt;n;j++)  /*从下一个数到最后一个数之间找最值*/</span><br><span class=\"line\">　if(a[k]&lt;a[j])     /*若其后有比最值更大的*/</span><br><span class=\"line\">　k=j;         /*则将其下标记在k中*/</span><br><span class=\"line\">　if(k!=i)        /*若k不为最初的i值，说明在其后找到比其更大的数*/</span><br><span class=\"line\">　&#123;  t=a[k];  a[k]=a[i];  a[i]=t;  &#125; /*则交换最值和当前序列的第一</span><br><span class=\"line\">　个数*/</span><br><span class=\"line\">　&#125;</span><br><span class=\"line\">　printf(&quot;The sorted numbers: &quot;);</span><br><span class=\"line\">　for(i=0;i&lt;10;i++)</span><br><span class=\"line\">　printf(&quot;%d   &quot;,a[i]);</span><br><span class=\"line\">　printf(&quot;\\n&quot;);</span><br><span class=\"line\">　&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"区别：（个人见解）\"><a href=\"#区别：（个人见解）\" class=\"headerlink\" title=\"区别：（个人见解）\"></a>区别：（个人见解）</h2><ul>\n<li>冒泡法要进行对n个数进行n-1趟，第j趟要进行n-j次比较，每次比较相邻的数不符合则要交换，每趟最多需要n-j次数的交换</li>\n<li>选择法也要进行n-1趟，每趟是选出最值，而选最值是把下标交换，直到选出最值的下标，把最值和第一位交换，每趟最多仅需1次数的交换</li>\n<li>简单地说，冒泡法每次都是数的交换（各个下标对应的数是变化的），而选择法是通过下标交换（这时候各个下标对应的数是不变的）选出最值的下标，最后再进行数的交换</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"冒泡法\"><a href=\"#冒泡法\" class=\"headerlink\" title=\"冒泡法\"></a>冒泡法</h2><h3 id=\"算法示例\"><a href=\"#算法示例\" class=\"headerlink\" title=\"算法示例\"></a>算法示例</h3><p>用起泡法对10个整数按升序排序。</p>\n<h3 id=\"算法分析\"><a href=\"#算法分析\" class=\"headerlink\" title=\"算法分析\"></a>算法分析</h3><p>如果有n个数，则要进行n-1趟比较。在第1趟比较中要进行n-1次相邻元素的两两比较，在第j趟比较中要进行n-j次两两比较。比较的顺序从前往后，经过一趟比较后，将最值沉底（换到最后一个元素位置），最大值沉底为升序，最小值沉底为降序。</p>\n<h3 id=\"算法源代码\"><a href=\"#算法源代码\" class=\"headerlink\" title=\"算法源代码\"></a>算法源代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">　int main()</span><br><span class=\"line\">　&#123;</span><br><span class=\"line\">　int a[10],i,j,t;</span><br><span class=\"line\">　printf(&quot;Please input 10 numbers: &quot;);</span><br><span class=\"line\">　/*输入源数据*/</span><br><span class=\"line\">　for(i=0;i&lt;10;i++)</span><br><span class=\"line\">　scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class=\"line\">　/*排序*/</span><br><span class=\"line\">　for(j=0;j&lt;9;j++)          /*外循环控制排序趟数，n个数排n-1趟*/</span><br><span class=\"line\">　for(i=0;i&lt;9-j;i++)    /*内循环每趟比较的次数，第j趟比较n-j次*/</span><br><span class=\"line\">　if(a[i]&gt;a[i+1])    /*相邻元素比较，逆序则交换*/</span><br><span class=\"line\">　&#123; t=a[i];</span><br><span class=\"line\">　a[i]=a[i+1];</span><br><span class=\"line\">　a[i+1]=t;</span><br><span class=\"line\">　&#125;</span><br><span class=\"line\">　</span><br><span class=\"line\">　/*输出排序结果*/</span><br><span class=\"line\">　printf(&quot;The sorted numbers: &quot;);</span><br><span class=\"line\">　for(i=0;i&lt;10;i++)</span><br><span class=\"line\">　printf(&quot;%d   &quot;,a[i]);</span><br><span class=\"line\">　printf(&quot;\\n&quot;);</span><br><span class=\"line\">　return 0;</span><br><span class=\"line\">　</span><br><span class=\"line\">　&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"选择法\"><a href=\"#选择法\" class=\"headerlink\" title=\"选择法\"></a>选择法</h2><h3 id=\"算法示例要求\"><a href=\"#算法示例要求\" class=\"headerlink\" title=\"算法示例要求\"></a>算法示例要求</h3><p>用选择法对10个整数按降序排序。</p>\n<h3 id=\"算法分析-1\"><a href=\"#算法分析-1\" class=\"headerlink\" title=\"算法分析\"></a>算法分析</h3><p>每趟选出一个最值和无序序列的第一个数交换，n个数共选n-1趟。第i趟假设i为最值下标，然后将最值和i+1至最后一个数比较，找出最值的下标，若最值下标不为初设值，则将最值元素和下标为i的元素交换。</p>\n<h3 id=\"算法源代码-1\"><a href=\"#算法源代码-1\" class=\"headerlink\" title=\"算法源代码\"></a>算法源代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">　int main()</span><br><span class=\"line\">　&#123;</span><br><span class=\"line\">　int a[10],i,j,k,t,n=10;</span><br><span class=\"line\">　printf(&quot;Please input 10 numbers:&quot;);</span><br><span class=\"line\">　for(i=0;i&lt;10;i++)</span><br><span class=\"line\">　scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class=\"line\">　for(i=0;i&lt;n-1;i++)   /*外循环控制趟数，n个数选n-1趟*/</span><br><span class=\"line\">　&#123;</span><br><span class=\"line\">　k=i;             /*假设当前趟的第一个数为最值,记在k中 */</span><br><span class=\"line\">　for(j=i+1;j&lt;n;j++)  /*从下一个数到最后一个数之间找最值*/</span><br><span class=\"line\">　if(a[k]&lt;a[j])     /*若其后有比最值更大的*/</span><br><span class=\"line\">　k=j;         /*则将其下标记在k中*/</span><br><span class=\"line\">　if(k!=i)        /*若k不为最初的i值，说明在其后找到比其更大的数*/</span><br><span class=\"line\">　&#123;  t=a[k];  a[k]=a[i];  a[i]=t;  &#125; /*则交换最值和当前序列的第一</span><br><span class=\"line\">　个数*/</span><br><span class=\"line\">　&#125;</span><br><span class=\"line\">　printf(&quot;The sorted numbers: &quot;);</span><br><span class=\"line\">　for(i=0;i&lt;10;i++)</span><br><span class=\"line\">　printf(&quot;%d   &quot;,a[i]);</span><br><span class=\"line\">　printf(&quot;\\n&quot;);</span><br><span class=\"line\">　&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"区别：（个人见解）\"><a href=\"#区别：（个人见解）\" class=\"headerlink\" title=\"区别：（个人见解）\"></a>区别：（个人见解）</h2><ul>\n<li>冒泡法要进行对n个数进行n-1趟，第j趟要进行n-j次比较，每次比较相邻的数不符合则要交换，每趟最多需要n-j次数的交换</li>\n<li>选择法也要进行n-1趟，每趟是选出最值，而选最值是把下标交换，直到选出最值的下标，把最值和第一位交换，每趟最多仅需1次数的交换</li>\n<li>简单地说，冒泡法每次都是数的交换（各个下标对应的数是变化的），而选择法是通过下标交换（这时候各个下标对应的数是不变的）选出最值的下标，最后再进行数的交换</li>\n</ul>\n"},{"title":"LeetCode算法题（一）","date":"2019-04-20T16:00:00.000Z","comments":1,"_content":"\n1. 给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。    \n假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231,  231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。\n\n```\nvar reverse = function(x) {\n    var arr = x.toString().split('');\n    if(arr[0]=='-'){\n        var temp = arr.slice(1,arr.length);\n        temp.reverse().unshift(\"-\");\n        x = parseInt(temp.join(''));\n    }else{\n        x = parseInt(arr.reverse().join(''));\n    }\n    if(x>=-Math.pow(2,31)&&x<=Math.pow(2,31)){\n        return x; \n    }else{\n        return 0;\n    }\n};\n```\n2. 编写一个函数来查找字符串数组中的最长公共前缀。如果不存在公共前缀，返回空字符串 \"\"。\n\n```\nvar longestCommonPrefix = function(strs) {\n    var str=\"\";\n    if(strs.length == 1){\n        str = strs[0];\n    }else if(strs.length >= 2){\n        for(var i=1;i<=Math.min(strs[0].length,strs[1].length);i++){\n            if(strs[0].slice(0,i)==strs[1].slice(0,i)){\n                str = strs[0].slice(0,i);\n                continue;\n            }else{\n                break;\n            }\n        }\n        for(var j=2;j<strs.length;j++){\n            while(str!=\"\"&&strs[j].substr(0,str.length)!=str){\n              str = str.slice(0,str.length-1);\n            }\n        } \n    }\n    return str;\n};\n```\n3. 给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串，判断字符串是否有效。\n\n有效字符串需满足：\n- 左括号必须用相同类型的右括号闭合。\n- 左括号必须以正确的顺序闭合。即先开的后闭合。 \n\n```\n \"([)]\" //false\n \"{[]}\" //true\n \"\" //true\n```\n注意空字符串可被认为是有效字符串。\n\n```\nvar isValid = function(s) {\n    var temp = [];\n    for(var i in s){\n        if(s[i]==\"(\"){\n            temp.push(\")\");\n        }else if(s[i]==\"[\"){\n            temp.push(\"]\");\n        }else if(s[i]==\"{\"){\n            temp.push(\"}\");\n        }else if(s[i]!=temp.pop()){\n            return false;\n        }\n    }\n    return !temp.length;\n    //只开不闭temp.length为true\n    //空字符串temp.length为false\n    //其余有效字符串temp会被移除空\n};\n```\n4. 给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。\n\n你可以假设数组中无重复元素。\n\n```\nvar searchInsert = function(nums, target) {\n    for(var i=0;i<nums.length;i++){\n        if(nums[i]>=target){\n            return i\n        }\n    }\n    return nums.length;\n};\n```\n5. 给定一个仅包含大小写字母和空格 ' ' 的字符串，返回其最后一个单词的长度。\n\n如果不存在最后一个单词，请返回 0 。\n\n说明：一个单词是指由字母组成，但不包含任何空格的字符串。\n\n```\nvar lengthOfLastWord = function(s) {\n     var len = s.length;\n      var count = 0;\n      while(len!=0&&s[len-1]==\" \"){\n        len--;\n      }\n      while(s[len-1]!=\" \"&&len>0){\n        count++;\n        len--;\n      }\n      return count;\n};\n```\n","source":"_posts/算法/LeetCode算法题（一）.md","raw":"---\ntitle: LeetCode算法题（一）\ndate: 2019-04-21\ntags: [算法]\ncategories: 算法\ncomments: true\n---\n\n1. 给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。    \n假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231,  231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。\n\n```\nvar reverse = function(x) {\n    var arr = x.toString().split('');\n    if(arr[0]=='-'){\n        var temp = arr.slice(1,arr.length);\n        temp.reverse().unshift(\"-\");\n        x = parseInt(temp.join(''));\n    }else{\n        x = parseInt(arr.reverse().join(''));\n    }\n    if(x>=-Math.pow(2,31)&&x<=Math.pow(2,31)){\n        return x; \n    }else{\n        return 0;\n    }\n};\n```\n2. 编写一个函数来查找字符串数组中的最长公共前缀。如果不存在公共前缀，返回空字符串 \"\"。\n\n```\nvar longestCommonPrefix = function(strs) {\n    var str=\"\";\n    if(strs.length == 1){\n        str = strs[0];\n    }else if(strs.length >= 2){\n        for(var i=1;i<=Math.min(strs[0].length,strs[1].length);i++){\n            if(strs[0].slice(0,i)==strs[1].slice(0,i)){\n                str = strs[0].slice(0,i);\n                continue;\n            }else{\n                break;\n            }\n        }\n        for(var j=2;j<strs.length;j++){\n            while(str!=\"\"&&strs[j].substr(0,str.length)!=str){\n              str = str.slice(0,str.length-1);\n            }\n        } \n    }\n    return str;\n};\n```\n3. 给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串，判断字符串是否有效。\n\n有效字符串需满足：\n- 左括号必须用相同类型的右括号闭合。\n- 左括号必须以正确的顺序闭合。即先开的后闭合。 \n\n```\n \"([)]\" //false\n \"{[]}\" //true\n \"\" //true\n```\n注意空字符串可被认为是有效字符串。\n\n```\nvar isValid = function(s) {\n    var temp = [];\n    for(var i in s){\n        if(s[i]==\"(\"){\n            temp.push(\")\");\n        }else if(s[i]==\"[\"){\n            temp.push(\"]\");\n        }else if(s[i]==\"{\"){\n            temp.push(\"}\");\n        }else if(s[i]!=temp.pop()){\n            return false;\n        }\n    }\n    return !temp.length;\n    //只开不闭temp.length为true\n    //空字符串temp.length为false\n    //其余有效字符串temp会被移除空\n};\n```\n4. 给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。\n\n你可以假设数组中无重复元素。\n\n```\nvar searchInsert = function(nums, target) {\n    for(var i=0;i<nums.length;i++){\n        if(nums[i]>=target){\n            return i\n        }\n    }\n    return nums.length;\n};\n```\n5. 给定一个仅包含大小写字母和空格 ' ' 的字符串，返回其最后一个单词的长度。\n\n如果不存在最后一个单词，请返回 0 。\n\n说明：一个单词是指由字母组成，但不包含任何空格的字符串。\n\n```\nvar lengthOfLastWord = function(s) {\n     var len = s.length;\n      var count = 0;\n      while(len!=0&&s[len-1]==\" \"){\n        len--;\n      }\n      while(s[len-1]!=\" \"&&len>0){\n        count++;\n        len--;\n      }\n      return count;\n};\n```\n","slug":"算法/LeetCode算法题（一）","published":1,"updated":"2022-07-22T08:27:10.381Z","layout":"post","photos":[],"link":"","_id":"cl5wb2ynj00e0cj38tf84n437","content":"<ol>\n<li>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。<br>假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231,  231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var reverse = function(x) &#123;</span><br><span class=\"line\">    var arr = x.toString().split(&apos;&apos;);</span><br><span class=\"line\">    if(arr[0]==&apos;-&apos;)&#123;</span><br><span class=\"line\">        var temp = arr.slice(1,arr.length);</span><br><span class=\"line\">        temp.reverse().unshift(&quot;-&quot;);</span><br><span class=\"line\">        x = parseInt(temp.join(&apos;&apos;));</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        x = parseInt(arr.reverse().join(&apos;&apos;));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(x&gt;=-Math.pow(2,31)&amp;&amp;x&lt;=Math.pow(2,31))&#123;</span><br><span class=\"line\">        return x; </span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        return 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>编写一个函数来查找字符串数组中的最长公共前缀。如果不存在公共前缀，返回空字符串 “”。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var longestCommonPrefix = function(strs) &#123;</span><br><span class=\"line\">    var str=&quot;&quot;;</span><br><span class=\"line\">    if(strs.length == 1)&#123;</span><br><span class=\"line\">        str = strs[0];</span><br><span class=\"line\">    &#125;else if(strs.length &gt;= 2)&#123;</span><br><span class=\"line\">        for(var i=1;i&lt;=Math.min(strs[0].length,strs[1].length);i++)&#123;</span><br><span class=\"line\">            if(strs[0].slice(0,i)==strs[1].slice(0,i))&#123;</span><br><span class=\"line\">                str = strs[0].slice(0,i);</span><br><span class=\"line\">                continue;</span><br><span class=\"line\">            &#125;else&#123;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for(var j=2;j&lt;strs.length;j++)&#123;</span><br><span class=\"line\">            while(str!=&quot;&quot;&amp;&amp;strs[j].substr(0,str.length)!=str)&#123;</span><br><span class=\"line\">              str = str.slice(0,str.length-1);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return str;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。</li>\n</ol>\n<p>有效字符串需满足：</p>\n<ul>\n<li>左括号必须用相同类型的右括号闭合。</li>\n<li>左括号必须以正确的顺序闭合。即先开的后闭合。 </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;([)]&quot; //false</span><br><span class=\"line\">&quot;&#123;[]&#125;&quot; //true</span><br><span class=\"line\">&quot;&quot; //true</span><br></pre></td></tr></table></figure>\n<p>注意空字符串可被认为是有效字符串。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var isValid = function(s) &#123;</span><br><span class=\"line\">    var temp = [];</span><br><span class=\"line\">    for(var i in s)&#123;</span><br><span class=\"line\">        if(s[i]==&quot;(&quot;)&#123;</span><br><span class=\"line\">            temp.push(&quot;)&quot;);</span><br><span class=\"line\">        &#125;else if(s[i]==&quot;[&quot;)&#123;</span><br><span class=\"line\">            temp.push(&quot;]&quot;);</span><br><span class=\"line\">        &#125;else if(s[i]==&quot;&#123;&quot;)&#123;</span><br><span class=\"line\">            temp.push(&quot;&#125;&quot;);</span><br><span class=\"line\">        &#125;else if(s[i]!=temp.pop())&#123;</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return !temp.length;</span><br><span class=\"line\">    //只开不闭temp.length为true</span><br><span class=\"line\">    //空字符串temp.length为false</span><br><span class=\"line\">    //其余有效字符串temp会被移除空</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</li>\n</ol>\n<p>你可以假设数组中无重复元素。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var searchInsert = function(nums, target) &#123;</span><br><span class=\"line\">    for(var i=0;i&lt;nums.length;i++)&#123;</span><br><span class=\"line\">        if(nums[i]&gt;=target)&#123;</span><br><span class=\"line\">            return i</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return nums.length;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>给定一个仅包含大小写字母和空格 ‘ ‘ 的字符串，返回其最后一个单词的长度。</li>\n</ol>\n<p>如果不存在最后一个单词，请返回 0 。</p>\n<p>说明：一个单词是指由字母组成，但不包含任何空格的字符串。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var lengthOfLastWord = function(s) &#123;</span><br><span class=\"line\">     var len = s.length;</span><br><span class=\"line\">      var count = 0;</span><br><span class=\"line\">      while(len!=0&amp;&amp;s[len-1]==&quot; &quot;)&#123;</span><br><span class=\"line\">        len--;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      while(s[len-1]!=&quot; &quot;&amp;&amp;len&gt;0)&#123;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">        len--;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return count;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。<br>假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231,  231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var reverse = function(x) &#123;</span><br><span class=\"line\">    var arr = x.toString().split(&apos;&apos;);</span><br><span class=\"line\">    if(arr[0]==&apos;-&apos;)&#123;</span><br><span class=\"line\">        var temp = arr.slice(1,arr.length);</span><br><span class=\"line\">        temp.reverse().unshift(&quot;-&quot;);</span><br><span class=\"line\">        x = parseInt(temp.join(&apos;&apos;));</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        x = parseInt(arr.reverse().join(&apos;&apos;));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(x&gt;=-Math.pow(2,31)&amp;&amp;x&lt;=Math.pow(2,31))&#123;</span><br><span class=\"line\">        return x; </span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        return 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>编写一个函数来查找字符串数组中的最长公共前缀。如果不存在公共前缀，返回空字符串 “”。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var longestCommonPrefix = function(strs) &#123;</span><br><span class=\"line\">    var str=&quot;&quot;;</span><br><span class=\"line\">    if(strs.length == 1)&#123;</span><br><span class=\"line\">        str = strs[0];</span><br><span class=\"line\">    &#125;else if(strs.length &gt;= 2)&#123;</span><br><span class=\"line\">        for(var i=1;i&lt;=Math.min(strs[0].length,strs[1].length);i++)&#123;</span><br><span class=\"line\">            if(strs[0].slice(0,i)==strs[1].slice(0,i))&#123;</span><br><span class=\"line\">                str = strs[0].slice(0,i);</span><br><span class=\"line\">                continue;</span><br><span class=\"line\">            &#125;else&#123;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for(var j=2;j&lt;strs.length;j++)&#123;</span><br><span class=\"line\">            while(str!=&quot;&quot;&amp;&amp;strs[j].substr(0,str.length)!=str)&#123;</span><br><span class=\"line\">              str = str.slice(0,str.length-1);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return str;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。</li>\n</ol>\n<p>有效字符串需满足：</p>\n<ul>\n<li>左括号必须用相同类型的右括号闭合。</li>\n<li>左括号必须以正确的顺序闭合。即先开的后闭合。 </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;([)]&quot; //false</span><br><span class=\"line\">&quot;&#123;[]&#125;&quot; //true</span><br><span class=\"line\">&quot;&quot; //true</span><br></pre></td></tr></table></figure>\n<p>注意空字符串可被认为是有效字符串。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var isValid = function(s) &#123;</span><br><span class=\"line\">    var temp = [];</span><br><span class=\"line\">    for(var i in s)&#123;</span><br><span class=\"line\">        if(s[i]==&quot;(&quot;)&#123;</span><br><span class=\"line\">            temp.push(&quot;)&quot;);</span><br><span class=\"line\">        &#125;else if(s[i]==&quot;[&quot;)&#123;</span><br><span class=\"line\">            temp.push(&quot;]&quot;);</span><br><span class=\"line\">        &#125;else if(s[i]==&quot;&#123;&quot;)&#123;</span><br><span class=\"line\">            temp.push(&quot;&#125;&quot;);</span><br><span class=\"line\">        &#125;else if(s[i]!=temp.pop())&#123;</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return !temp.length;</span><br><span class=\"line\">    //只开不闭temp.length为true</span><br><span class=\"line\">    //空字符串temp.length为false</span><br><span class=\"line\">    //其余有效字符串temp会被移除空</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</li>\n</ol>\n<p>你可以假设数组中无重复元素。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var searchInsert = function(nums, target) &#123;</span><br><span class=\"line\">    for(var i=0;i&lt;nums.length;i++)&#123;</span><br><span class=\"line\">        if(nums[i]&gt;=target)&#123;</span><br><span class=\"line\">            return i</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return nums.length;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>给定一个仅包含大小写字母和空格 ‘ ‘ 的字符串，返回其最后一个单词的长度。</li>\n</ol>\n<p>如果不存在最后一个单词，请返回 0 。</p>\n<p>说明：一个单词是指由字母组成，但不包含任何空格的字符串。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var lengthOfLastWord = function(s) &#123;</span><br><span class=\"line\">     var len = s.length;</span><br><span class=\"line\">      var count = 0;</span><br><span class=\"line\">      while(len!=0&amp;&amp;s[len-1]==&quot; &quot;)&#123;</span><br><span class=\"line\">        len--;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      while(s[len-1]!=&quot; &quot;&amp;&amp;len&gt;0)&#123;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">        len--;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return count;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"调试神器whistle的安装使用","date":"2021-02-19T16:00:00.000Z","comments":1,"_content":"\n## 搭建环境准备\n### 安装node\nwhistle支持v0.10.0以上版本的Node，为获取更好的性能，推荐安装最新版本的Node。\n\n```\n// 未安装的去官网进行安装\n// 安装后通过命令行可查看版本\n$ node -v\n```\n### 安装whistle\n对于全局安装，Mac或Linux的非root用户需要在命令行前面加sudo。\n```\n$ npm install -g whistle\n```\nwhistle安装完成后，执行命令 whistle help 或 w2 help，查看whistle的帮助信息。\n\n```\n// 如果能正常输出whistle的帮助信息，表示whistle已安装成功\n$ w2 help\n```\n## 使用whistle\n\n```\n// 启动whistle\n// 不设置端口，默认8899\n$ w2 start -p 8899\n\n```\nNote: 如果要防止其他人访问配置页面，可以在启动时加上登录用户名和密码 -n yourusername -w yourpassword。\n\n```\n// 重启whsitle\n$ w2 restart\n```\n```\n// 停止whistle\n$ w2 stop\n```\n```\n// 调试模式启动whistle\n// 主要用于查看whistle的异常及插件开发\n$ w2 run\n```\n## 配置代理\n### 配置信息\n- 代理服务器：127.0.0.1\n- 默认端口：8899，若被占用，可启动时设置端口\n\n### 配置方式一：pc端\n官网推荐配置浏览器代理，推荐安装浏览器代理插件SwitchyOmega，就按官网的来吧，其他配置方式可参考官网\n\n由于常用chrome，以chrome为例\n\n#### 安装根证书\n> 参考网站：[安装根证书](http://wproxy.org/whistle/webui/https.html)\n\n安装证书后就可以抓取https的包了\n\n#### SwitchyOmega配置\n进入[SwitchyOmega](https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif)，点击安装扩展后，页面会自动跳转到 SwitchyOmega 的配置页，随后便有新手教程\n1. 点击左侧“新建情景模式…”，弹框提示“情景模式名称”，你可以输入“whistle”\n2. 类型为代理服务器，点击创建\n3. 修改代理服务器参数，代理协议为HTTP，代理服务器为127.0.0.1，代理端口为8899\n4. “不代理的地址列表” 的输入框里的所有文本都删掉，因为里面的 host 在本地开发很大概率会用到\n5. 点击左侧“应用选项”\n6. 点击chrmoe右上角的圆圈，切换为whistle（一定是切换后才可以抓包）\n7. 浏览器进入[local.whistlejs.com](local.whistlejs.com)，可以打开界面，证明配置成功，可以开始抓包了\n\n### 配置方式二：移动端\n移动端需要在设置中配置当前Wi-Fi的代理，以 iOS 为例：\n![image](http://wproxy.org/whistle/img/iOS-proxy-all.jpg)\n\n## 注意\n- 安装插件后要重启whistle才可以打开插件，否则unknown\n\n## 参考链接\n[whistle](http://wproxy.org/whistle/install.html)\n","source":"_posts/前端/调试神器whistle的安装使用.md","raw":"---\ntitle: 调试神器whistle的安装使用\ndate: 2021-02-20\ntags: [前端]\ncategories: 前端\ncomments: true\n---\n\n## 搭建环境准备\n### 安装node\nwhistle支持v0.10.0以上版本的Node，为获取更好的性能，推荐安装最新版本的Node。\n\n```\n// 未安装的去官网进行安装\n// 安装后通过命令行可查看版本\n$ node -v\n```\n### 安装whistle\n对于全局安装，Mac或Linux的非root用户需要在命令行前面加sudo。\n```\n$ npm install -g whistle\n```\nwhistle安装完成后，执行命令 whistle help 或 w2 help，查看whistle的帮助信息。\n\n```\n// 如果能正常输出whistle的帮助信息，表示whistle已安装成功\n$ w2 help\n```\n## 使用whistle\n\n```\n// 启动whistle\n// 不设置端口，默认8899\n$ w2 start -p 8899\n\n```\nNote: 如果要防止其他人访问配置页面，可以在启动时加上登录用户名和密码 -n yourusername -w yourpassword。\n\n```\n// 重启whsitle\n$ w2 restart\n```\n```\n// 停止whistle\n$ w2 stop\n```\n```\n// 调试模式启动whistle\n// 主要用于查看whistle的异常及插件开发\n$ w2 run\n```\n## 配置代理\n### 配置信息\n- 代理服务器：127.0.0.1\n- 默认端口：8899，若被占用，可启动时设置端口\n\n### 配置方式一：pc端\n官网推荐配置浏览器代理，推荐安装浏览器代理插件SwitchyOmega，就按官网的来吧，其他配置方式可参考官网\n\n由于常用chrome，以chrome为例\n\n#### 安装根证书\n> 参考网站：[安装根证书](http://wproxy.org/whistle/webui/https.html)\n\n安装证书后就可以抓取https的包了\n\n#### SwitchyOmega配置\n进入[SwitchyOmega](https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif)，点击安装扩展后，页面会自动跳转到 SwitchyOmega 的配置页，随后便有新手教程\n1. 点击左侧“新建情景模式…”，弹框提示“情景模式名称”，你可以输入“whistle”\n2. 类型为代理服务器，点击创建\n3. 修改代理服务器参数，代理协议为HTTP，代理服务器为127.0.0.1，代理端口为8899\n4. “不代理的地址列表” 的输入框里的所有文本都删掉，因为里面的 host 在本地开发很大概率会用到\n5. 点击左侧“应用选项”\n6. 点击chrmoe右上角的圆圈，切换为whistle（一定是切换后才可以抓包）\n7. 浏览器进入[local.whistlejs.com](local.whistlejs.com)，可以打开界面，证明配置成功，可以开始抓包了\n\n### 配置方式二：移动端\n移动端需要在设置中配置当前Wi-Fi的代理，以 iOS 为例：\n![image](http://wproxy.org/whistle/img/iOS-proxy-all.jpg)\n\n## 注意\n- 安装插件后要重启whistle才可以打开插件，否则unknown\n\n## 参考链接\n[whistle](http://wproxy.org/whistle/install.html)\n","slug":"前端/调试神器whistle的安装使用","published":1,"updated":"2022-07-22T10:11:33.635Z","layout":"post","photos":[],"link":"","_id":"cl5wb2ynk00e3cj38fo2bcaaw","content":"<h2 id=\"搭建环境准备\"><a href=\"#搭建环境准备\" class=\"headerlink\" title=\"搭建环境准备\"></a>搭建环境准备</h2><h3 id=\"安装node\"><a href=\"#安装node\" class=\"headerlink\" title=\"安装node\"></a>安装node</h3><p>whistle支持v0.10.0以上版本的Node，为获取更好的性能，推荐安装最新版本的Node。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 未安装的去官网进行安装</span><br><span class=\"line\">// 安装后通过命令行可查看版本</span><br><span class=\"line\">$ node -v</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装whistle\"><a href=\"#安装whistle\" class=\"headerlink\" title=\"安装whistle\"></a>安装whistle</h3><p>对于全局安装，Mac或Linux的非root用户需要在命令行前面加sudo。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g whistle</span><br></pre></td></tr></table></figure></p>\n<p>whistle安装完成后，执行命令 whistle help 或 w2 help，查看whistle的帮助信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 如果能正常输出whistle的帮助信息，表示whistle已安装成功</span><br><span class=\"line\">$ w2 help</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用whistle\"><a href=\"#使用whistle\" class=\"headerlink\" title=\"使用whistle\"></a>使用whistle</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 启动whistle</span><br><span class=\"line\">// 不设置端口，默认8899</span><br><span class=\"line\">$ w2 start -p 8899</span><br></pre></td></tr></table></figure>\n<p>Note: 如果要防止其他人访问配置页面，可以在启动时加上登录用户名和密码 -n yourusername -w yourpassword。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 重启whsitle</span><br><span class=\"line\">$ w2 restart</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 停止whistle</span><br><span class=\"line\">$ w2 stop</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 调试模式启动whistle</span><br><span class=\"line\">// 主要用于查看whistle的异常及插件开发</span><br><span class=\"line\">$ w2 run</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置代理\"><a href=\"#配置代理\" class=\"headerlink\" title=\"配置代理\"></a>配置代理</h2><h3 id=\"配置信息\"><a href=\"#配置信息\" class=\"headerlink\" title=\"配置信息\"></a>配置信息</h3><ul>\n<li>代理服务器：127.0.0.1</li>\n<li>默认端口：8899，若被占用，可启动时设置端口</li>\n</ul>\n<h3 id=\"配置方式一：pc端\"><a href=\"#配置方式一：pc端\" class=\"headerlink\" title=\"配置方式一：pc端\"></a>配置方式一：pc端</h3><p>官网推荐配置浏览器代理，推荐安装浏览器代理插件SwitchyOmega，就按官网的来吧，其他配置方式可参考官网</p>\n<p>由于常用chrome，以chrome为例</p>\n<h4 id=\"安装根证书\"><a href=\"#安装根证书\" class=\"headerlink\" title=\"安装根证书\"></a>安装根证书</h4><blockquote>\n<p>参考网站：<a href=\"http://wproxy.org/whistle/webui/https.html\" target=\"_blank\" rel=\"noopener\">安装根证书</a></p>\n</blockquote>\n<p>安装证书后就可以抓取https的包了</p>\n<h4 id=\"SwitchyOmega配置\"><a href=\"#SwitchyOmega配置\" class=\"headerlink\" title=\"SwitchyOmega配置\"></a>SwitchyOmega配置</h4><p>进入<a href=\"https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif\" target=\"_blank\" rel=\"noopener\">SwitchyOmega</a>，点击安装扩展后，页面会自动跳转到 SwitchyOmega 的配置页，随后便有新手教程</p>\n<ol>\n<li>点击左侧“新建情景模式…”，弹框提示“情景模式名称”，你可以输入“whistle”</li>\n<li>类型为代理服务器，点击创建</li>\n<li>修改代理服务器参数，代理协议为HTTP，代理服务器为127.0.0.1，代理端口为8899</li>\n<li>“不代理的地址列表” 的输入框里的所有文本都删掉，因为里面的 host 在本地开发很大概率会用到</li>\n<li>点击左侧“应用选项”</li>\n<li>点击chrmoe右上角的圆圈，切换为whistle（一定是切换后才可以抓包）</li>\n<li>浏览器进入<a href=\"local.whistlejs.com\">local.whistlejs.com</a>，可以打开界面，证明配置成功，可以开始抓包了</li>\n</ol>\n<h3 id=\"配置方式二：移动端\"><a href=\"#配置方式二：移动端\" class=\"headerlink\" title=\"配置方式二：移动端\"></a>配置方式二：移动端</h3><p>移动端需要在设置中配置当前Wi-Fi的代理，以 iOS 为例：<br><img src=\"http://wproxy.org/whistle/img/iOS-proxy-all.jpg\" alt=\"image\"></p>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><ul>\n<li>安装插件后要重启whistle才可以打开插件，否则unknown</li>\n</ul>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"http://wproxy.org/whistle/install.html\" target=\"_blank\" rel=\"noopener\">whistle</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"搭建环境准备\"><a href=\"#搭建环境准备\" class=\"headerlink\" title=\"搭建环境准备\"></a>搭建环境准备</h2><h3 id=\"安装node\"><a href=\"#安装node\" class=\"headerlink\" title=\"安装node\"></a>安装node</h3><p>whistle支持v0.10.0以上版本的Node，为获取更好的性能，推荐安装最新版本的Node。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 未安装的去官网进行安装</span><br><span class=\"line\">// 安装后通过命令行可查看版本</span><br><span class=\"line\">$ node -v</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装whistle\"><a href=\"#安装whistle\" class=\"headerlink\" title=\"安装whistle\"></a>安装whistle</h3><p>对于全局安装，Mac或Linux的非root用户需要在命令行前面加sudo。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g whistle</span><br></pre></td></tr></table></figure></p>\n<p>whistle安装完成后，执行命令 whistle help 或 w2 help，查看whistle的帮助信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 如果能正常输出whistle的帮助信息，表示whistle已安装成功</span><br><span class=\"line\">$ w2 help</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用whistle\"><a href=\"#使用whistle\" class=\"headerlink\" title=\"使用whistle\"></a>使用whistle</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 启动whistle</span><br><span class=\"line\">// 不设置端口，默认8899</span><br><span class=\"line\">$ w2 start -p 8899</span><br></pre></td></tr></table></figure>\n<p>Note: 如果要防止其他人访问配置页面，可以在启动时加上登录用户名和密码 -n yourusername -w yourpassword。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 重启whsitle</span><br><span class=\"line\">$ w2 restart</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 停止whistle</span><br><span class=\"line\">$ w2 stop</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 调试模式启动whistle</span><br><span class=\"line\">// 主要用于查看whistle的异常及插件开发</span><br><span class=\"line\">$ w2 run</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置代理\"><a href=\"#配置代理\" class=\"headerlink\" title=\"配置代理\"></a>配置代理</h2><h3 id=\"配置信息\"><a href=\"#配置信息\" class=\"headerlink\" title=\"配置信息\"></a>配置信息</h3><ul>\n<li>代理服务器：127.0.0.1</li>\n<li>默认端口：8899，若被占用，可启动时设置端口</li>\n</ul>\n<h3 id=\"配置方式一：pc端\"><a href=\"#配置方式一：pc端\" class=\"headerlink\" title=\"配置方式一：pc端\"></a>配置方式一：pc端</h3><p>官网推荐配置浏览器代理，推荐安装浏览器代理插件SwitchyOmega，就按官网的来吧，其他配置方式可参考官网</p>\n<p>由于常用chrome，以chrome为例</p>\n<h4 id=\"安装根证书\"><a href=\"#安装根证书\" class=\"headerlink\" title=\"安装根证书\"></a>安装根证书</h4><blockquote>\n<p>参考网站：<a href=\"http://wproxy.org/whistle/webui/https.html\" target=\"_blank\" rel=\"noopener\">安装根证书</a></p>\n</blockquote>\n<p>安装证书后就可以抓取https的包了</p>\n<h4 id=\"SwitchyOmega配置\"><a href=\"#SwitchyOmega配置\" class=\"headerlink\" title=\"SwitchyOmega配置\"></a>SwitchyOmega配置</h4><p>进入<a href=\"https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif\" target=\"_blank\" rel=\"noopener\">SwitchyOmega</a>，点击安装扩展后，页面会自动跳转到 SwitchyOmega 的配置页，随后便有新手教程</p>\n<ol>\n<li>点击左侧“新建情景模式…”，弹框提示“情景模式名称”，你可以输入“whistle”</li>\n<li>类型为代理服务器，点击创建</li>\n<li>修改代理服务器参数，代理协议为HTTP，代理服务器为127.0.0.1，代理端口为8899</li>\n<li>“不代理的地址列表” 的输入框里的所有文本都删掉，因为里面的 host 在本地开发很大概率会用到</li>\n<li>点击左侧“应用选项”</li>\n<li>点击chrmoe右上角的圆圈，切换为whistle（一定是切换后才可以抓包）</li>\n<li>浏览器进入<a href=\"local.whistlejs.com\">local.whistlejs.com</a>，可以打开界面，证明配置成功，可以开始抓包了</li>\n</ol>\n<h3 id=\"配置方式二：移动端\"><a href=\"#配置方式二：移动端\" class=\"headerlink\" title=\"配置方式二：移动端\"></a>配置方式二：移动端</h3><p>移动端需要在设置中配置当前Wi-Fi的代理，以 iOS 为例：<br><img src=\"http://wproxy.org/whistle/img/iOS-proxy-all.jpg\" alt=\"image\"></p>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><ul>\n<li>安装插件后要重启whistle才可以打开插件，否则unknown</li>\n</ul>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"http://wproxy.org/whistle/install.html\" target=\"_blank\" rel=\"noopener\">whistle</a></p>\n"},{"title":"LeetCode：有效的括号","date":"2019-12-05T16:00:00.000Z","comments":1,"_content":"\n### 题目\n给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串，判断字符串是否有效。\n\n有效字符串需满足：\n\n- 左括号必须用相同类型的右括号闭合。\n- 左括号必须以正确的顺序闭合。\n- 注意空字符串可被认为是有效字符串。\n\n### 测试用例\n\n```\n1. \"()\" // true\n2. \"()[]{}\" // true\n3. \"(]\" // false\n4. \"([)]\" // false\n5. \"{[]}\" // true\n```\n\n### 解法一\n#### 思路\n- 使用字符串的replace方法进行匹配替换，直到全部匹配成功，字符串长度为0，返回true\n- 或直到没有相匹配的项，匹配前的字符串与匹配后的字符串相等，则返回false\n\n#### 算法\n\n```\n/**\n * @param {string} s\n * @return {boolean}\n */\nvar isValid = function(s) {\n    if(s.length === 0) {\n        return true;\n    }\n    while(s.length !== 0) {\n        var temp = s;\n        s = s.replace('()','');\n        s = s.replace('[]','');\n        s = s.replace('{}','');\n        if(s === temp) {\n            return false;\n        }\n    }\n    return true;\n};\n```\n\n### 解法二\n#### 思路\n- 构造哈希表，遍历字符串\n- 对于左括号，把相应的右括号放进栈里\n- 对于右括号，若与栈顶匹配，则把栈顶去除；若是不匹配，则往栈顶添加undefined，为了防止开头就是右括号的情况\n\n#### 算法\n\n```\n/**\n * @param {string} s\n * @return {boolean}\n */\nvar isValid = function(s) {\n    var map = {\n        '(': ')',\n        '[': ']',\n        '{': '}'\n    }\n    var stack = [];\n    for(let i in s) {\n        if(s[i] !== stack[stack.length-1]) {\n            stack.push(map[s[i]])\n        } else {\n            stack.pop();\n        }\n    }\n    return stack.length === 0 ? true : false;\n};\n```\n\n","source":"_posts/算法/LeetCode：有效的括号.md","raw":"---\ntitle: LeetCode：有效的括号\ndate: 2019-12-06\ntags: [算法]\ncategories: 算法\ncomments: true\n---\n\n### 题目\n给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串，判断字符串是否有效。\n\n有效字符串需满足：\n\n- 左括号必须用相同类型的右括号闭合。\n- 左括号必须以正确的顺序闭合。\n- 注意空字符串可被认为是有效字符串。\n\n### 测试用例\n\n```\n1. \"()\" // true\n2. \"()[]{}\" // true\n3. \"(]\" // false\n4. \"([)]\" // false\n5. \"{[]}\" // true\n```\n\n### 解法一\n#### 思路\n- 使用字符串的replace方法进行匹配替换，直到全部匹配成功，字符串长度为0，返回true\n- 或直到没有相匹配的项，匹配前的字符串与匹配后的字符串相等，则返回false\n\n#### 算法\n\n```\n/**\n * @param {string} s\n * @return {boolean}\n */\nvar isValid = function(s) {\n    if(s.length === 0) {\n        return true;\n    }\n    while(s.length !== 0) {\n        var temp = s;\n        s = s.replace('()','');\n        s = s.replace('[]','');\n        s = s.replace('{}','');\n        if(s === temp) {\n            return false;\n        }\n    }\n    return true;\n};\n```\n\n### 解法二\n#### 思路\n- 构造哈希表，遍历字符串\n- 对于左括号，把相应的右括号放进栈里\n- 对于右括号，若与栈顶匹配，则把栈顶去除；若是不匹配，则往栈顶添加undefined，为了防止开头就是右括号的情况\n\n#### 算法\n\n```\n/**\n * @param {string} s\n * @return {boolean}\n */\nvar isValid = function(s) {\n    var map = {\n        '(': ')',\n        '[': ']',\n        '{': '}'\n    }\n    var stack = [];\n    for(let i in s) {\n        if(s[i] !== stack[stack.length-1]) {\n            stack.push(map[s[i]])\n        } else {\n            stack.pop();\n        }\n    }\n    return stack.length === 0 ? true : false;\n};\n```\n\n","slug":"算法/LeetCode：有效的括号","published":1,"updated":"2022-07-22T08:27:10.377Z","layout":"post","photos":[],"link":"","_id":"cl5wb2ynm00e8cj389m8ydzgz","content":"<h3 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。</p>\n<p>有效字符串需满足：</p>\n<ul>\n<li>左括号必须用相同类型的右括号闭合。</li>\n<li>左括号必须以正确的顺序闭合。</li>\n<li>注意空字符串可被认为是有效字符串。</li>\n</ul>\n<h3 id=\"测试用例\"><a href=\"#测试用例\" class=\"headerlink\" title=\"测试用例\"></a>测试用例</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. &quot;()&quot; // true</span><br><span class=\"line\">2. &quot;()[]&#123;&#125;&quot; // true</span><br><span class=\"line\">3. &quot;(]&quot; // false</span><br><span class=\"line\">4. &quot;([)]&quot; // false</span><br><span class=\"line\">5. &quot;&#123;[]&#125;&quot; // true</span><br></pre></td></tr></table></figure>\n<h3 id=\"解法一\"><a href=\"#解法一\" class=\"headerlink\" title=\"解法一\"></a>解法一</h3><h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><ul>\n<li>使用字符串的replace方法进行匹配替换，直到全部匹配成功，字符串长度为0，返回true</li>\n<li>或直到没有相匹配的项，匹配前的字符串与匹配后的字符串相等，则返回false</li>\n</ul>\n<h4 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;string&#125; s</span><br><span class=\"line\"> * @return &#123;boolean&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var isValid = function(s) &#123;</span><br><span class=\"line\">    if(s.length === 0) &#123;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    while(s.length !== 0) &#123;</span><br><span class=\"line\">        var temp = s;</span><br><span class=\"line\">        s = s.replace(&apos;()&apos;,&apos;&apos;);</span><br><span class=\"line\">        s = s.replace(&apos;[]&apos;,&apos;&apos;);</span><br><span class=\"line\">        s = s.replace(&apos;&#123;&#125;&apos;,&apos;&apos;);</span><br><span class=\"line\">        if(s === temp) &#123;</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"解法二\"><a href=\"#解法二\" class=\"headerlink\" title=\"解法二\"></a>解法二</h3><h4 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h4><ul>\n<li>构造哈希表，遍历字符串</li>\n<li>对于左括号，把相应的右括号放进栈里</li>\n<li>对于右括号，若与栈顶匹配，则把栈顶去除；若是不匹配，则往栈顶添加undefined，为了防止开头就是右括号的情况</li>\n</ul>\n<h4 id=\"算法-1\"><a href=\"#算法-1\" class=\"headerlink\" title=\"算法\"></a>算法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;string&#125; s</span><br><span class=\"line\"> * @return &#123;boolean&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var isValid = function(s) &#123;</span><br><span class=\"line\">    var map = &#123;</span><br><span class=\"line\">        &apos;(&apos;: &apos;)&apos;,</span><br><span class=\"line\">        &apos;[&apos;: &apos;]&apos;,</span><br><span class=\"line\">        &apos;&#123;&apos;: &apos;&#125;&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var stack = [];</span><br><span class=\"line\">    for(let i in s) &#123;</span><br><span class=\"line\">        if(s[i] !== stack[stack.length-1]) &#123;</span><br><span class=\"line\">            stack.push(map[s[i]])</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            stack.pop();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return stack.length === 0 ? true : false;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。</p>\n<p>有效字符串需满足：</p>\n<ul>\n<li>左括号必须用相同类型的右括号闭合。</li>\n<li>左括号必须以正确的顺序闭合。</li>\n<li>注意空字符串可被认为是有效字符串。</li>\n</ul>\n<h3 id=\"测试用例\"><a href=\"#测试用例\" class=\"headerlink\" title=\"测试用例\"></a>测试用例</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. &quot;()&quot; // true</span><br><span class=\"line\">2. &quot;()[]&#123;&#125;&quot; // true</span><br><span class=\"line\">3. &quot;(]&quot; // false</span><br><span class=\"line\">4. &quot;([)]&quot; // false</span><br><span class=\"line\">5. &quot;&#123;[]&#125;&quot; // true</span><br></pre></td></tr></table></figure>\n<h3 id=\"解法一\"><a href=\"#解法一\" class=\"headerlink\" title=\"解法一\"></a>解法一</h3><h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><ul>\n<li>使用字符串的replace方法进行匹配替换，直到全部匹配成功，字符串长度为0，返回true</li>\n<li>或直到没有相匹配的项，匹配前的字符串与匹配后的字符串相等，则返回false</li>\n</ul>\n<h4 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;string&#125; s</span><br><span class=\"line\"> * @return &#123;boolean&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var isValid = function(s) &#123;</span><br><span class=\"line\">    if(s.length === 0) &#123;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    while(s.length !== 0) &#123;</span><br><span class=\"line\">        var temp = s;</span><br><span class=\"line\">        s = s.replace(&apos;()&apos;,&apos;&apos;);</span><br><span class=\"line\">        s = s.replace(&apos;[]&apos;,&apos;&apos;);</span><br><span class=\"line\">        s = s.replace(&apos;&#123;&#125;&apos;,&apos;&apos;);</span><br><span class=\"line\">        if(s === temp) &#123;</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"解法二\"><a href=\"#解法二\" class=\"headerlink\" title=\"解法二\"></a>解法二</h3><h4 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h4><ul>\n<li>构造哈希表，遍历字符串</li>\n<li>对于左括号，把相应的右括号放进栈里</li>\n<li>对于右括号，若与栈顶匹配，则把栈顶去除；若是不匹配，则往栈顶添加undefined，为了防止开头就是右括号的情况</li>\n</ul>\n<h4 id=\"算法-1\"><a href=\"#算法-1\" class=\"headerlink\" title=\"算法\"></a>算法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;string&#125; s</span><br><span class=\"line\"> * @return &#123;boolean&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var isValid = function(s) &#123;</span><br><span class=\"line\">    var map = &#123;</span><br><span class=\"line\">        &apos;(&apos;: &apos;)&apos;,</span><br><span class=\"line\">        &apos;[&apos;: &apos;]&apos;,</span><br><span class=\"line\">        &apos;&#123;&apos;: &apos;&#125;&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var stack = [];</span><br><span class=\"line\">    for(let i in s) &#123;</span><br><span class=\"line\">        if(s[i] !== stack[stack.length-1]) &#123;</span><br><span class=\"line\">            stack.push(map[s[i]])</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            stack.pop();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return stack.length === 0 ? true : false;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"LeetCode：罗马数字转整数","date":"2019-12-05T16:00:00.000Z","comments":1,"_content":"\n### 题目\n罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。\n\n字符 | 数值\n---|---\nI | 1\nV | 5\nX | 10\nL | 50\nC | 100\nD | 500\nM |  1000\n\n例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做 XXVII, 即为 XX + V + II 。\n\n通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：\n\n- I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。\n- X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。\n- C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和  900。\n\n给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。\n\n### 测试用例\n\n```\n1. \"III\" // 3\n2. \"IV\" // 4\n3. \"IX\" // 9\n4. \"LVIII\" // 58  解释: L = 50, V= 5, III = 3\n5. \"MCMXCIV\" // 1994  解释:M = 1000, CM = 900, XC = 90, IV = 4\n```\n\n### 解法\n#### 思路\n- 根据题目中的所有情况写出哈希表\n- 先匹配特殊情况，由于是匹配两个字符串，所以应考虑到最后一个字符串没有下一个的情况，所以先判断是否到最后了\n- 若匹配，直接加，并使指针跳过这两个字符串\n- 若不匹配，则直接得出该字符串的值，指针正常指向下一个\n\n#### 算法\n\n```\n/**\n * @param {string} s\n * @return {number}\n */\nvar romanToInt = function(s) {\n    var map = {\n        I: 1,\n        IV: 4,\n        V: 5,\n        IX: 9,\n        X: 10,\n        XL: 40,\n        L: 50,\n        XC: 90,\n        C: 100,\n        CD: 400,\n        D: 500,\n        CM: 900,\n        M: 1000\n    }\n    var res = 0;\n    for(let i=0;i<s.length;i++) {\n        if(i+1 < s.length && map[s.substr(i,2)]) {\n        res += map[s.substr(i,2)];\n        i++;\n        } else {\n        res += map[s.substr(i,1)];\n        }\n    }  \n    return res;\n};\n```\n","source":"_posts/算法/LeetCode：罗马数字转整数.md","raw":"---\ntitle: LeetCode：罗马数字转整数\ndate: 2019-12-06\ntags: [算法]\ncategories: 算法\ncomments: true\n---\n\n### 题目\n罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。\n\n字符 | 数值\n---|---\nI | 1\nV | 5\nX | 10\nL | 50\nC | 100\nD | 500\nM |  1000\n\n例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做 XXVII, 即为 XX + V + II 。\n\n通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：\n\n- I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。\n- X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。\n- C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和  900。\n\n给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。\n\n### 测试用例\n\n```\n1. \"III\" // 3\n2. \"IV\" // 4\n3. \"IX\" // 9\n4. \"LVIII\" // 58  解释: L = 50, V= 5, III = 3\n5. \"MCMXCIV\" // 1994  解释:M = 1000, CM = 900, XC = 90, IV = 4\n```\n\n### 解法\n#### 思路\n- 根据题目中的所有情况写出哈希表\n- 先匹配特殊情况，由于是匹配两个字符串，所以应考虑到最后一个字符串没有下一个的情况，所以先判断是否到最后了\n- 若匹配，直接加，并使指针跳过这两个字符串\n- 若不匹配，则直接得出该字符串的值，指针正常指向下一个\n\n#### 算法\n\n```\n/**\n * @param {string} s\n * @return {number}\n */\nvar romanToInt = function(s) {\n    var map = {\n        I: 1,\n        IV: 4,\n        V: 5,\n        IX: 9,\n        X: 10,\n        XL: 40,\n        L: 50,\n        XC: 90,\n        C: 100,\n        CD: 400,\n        D: 500,\n        CM: 900,\n        M: 1000\n    }\n    var res = 0;\n    for(let i=0;i<s.length;i++) {\n        if(i+1 < s.length && map[s.substr(i,2)]) {\n        res += map[s.substr(i,2)];\n        i++;\n        } else {\n        res += map[s.substr(i,1)];\n        }\n    }  \n    return res;\n};\n```\n","slug":"算法/LeetCode：罗马数字转整数","published":1,"updated":"2022-07-22T08:27:10.406Z","layout":"post","photos":[],"link":"","_id":"cl5wb2ynn00ebcj38z0pc4qru","content":"<h3 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3><p>罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。</p>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>数值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>I</td>\n<td>1</td>\n</tr>\n<tr>\n<td>V</td>\n<td>5</td>\n</tr>\n<tr>\n<td>X</td>\n<td>10</td>\n</tr>\n<tr>\n<td>L</td>\n<td>50</td>\n</tr>\n<tr>\n<td>C</td>\n<td>100</td>\n</tr>\n<tr>\n<td>D</td>\n<td>500</td>\n</tr>\n<tr>\n<td>M</td>\n<td>1000</td>\n</tr>\n</tbody>\n</table>\n<p>例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做 XXVII, 即为 XX + V + II 。</p>\n<p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</p>\n<ul>\n<li>I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。</li>\n<li>X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。</li>\n<li>C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和  900。</li>\n</ul>\n<p>给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。</p>\n<h3 id=\"测试用例\"><a href=\"#测试用例\" class=\"headerlink\" title=\"测试用例\"></a>测试用例</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. &quot;III&quot; // 3</span><br><span class=\"line\">2. &quot;IV&quot; // 4</span><br><span class=\"line\">3. &quot;IX&quot; // 9</span><br><span class=\"line\">4. &quot;LVIII&quot; // 58  解释: L = 50, V= 5, III = 3</span><br><span class=\"line\">5. &quot;MCMXCIV&quot; // 1994  解释:M = 1000, CM = 900, XC = 90, IV = 4</span><br></pre></td></tr></table></figure>\n<h3 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h3><h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><ul>\n<li>根据题目中的所有情况写出哈希表</li>\n<li>先匹配特殊情况，由于是匹配两个字符串，所以应考虑到最后一个字符串没有下一个的情况，所以先判断是否到最后了</li>\n<li>若匹配，直接加，并使指针跳过这两个字符串</li>\n<li>若不匹配，则直接得出该字符串的值，指针正常指向下一个</li>\n</ul>\n<h4 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;string&#125; s</span><br><span class=\"line\"> * @return &#123;number&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var romanToInt = function(s) &#123;</span><br><span class=\"line\">    var map = &#123;</span><br><span class=\"line\">        I: 1,</span><br><span class=\"line\">        IV: 4,</span><br><span class=\"line\">        V: 5,</span><br><span class=\"line\">        IX: 9,</span><br><span class=\"line\">        X: 10,</span><br><span class=\"line\">        XL: 40,</span><br><span class=\"line\">        L: 50,</span><br><span class=\"line\">        XC: 90,</span><br><span class=\"line\">        C: 100,</span><br><span class=\"line\">        CD: 400,</span><br><span class=\"line\">        D: 500,</span><br><span class=\"line\">        CM: 900,</span><br><span class=\"line\">        M: 1000</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var res = 0;</span><br><span class=\"line\">    for(let i=0;i&lt;s.length;i++) &#123;</span><br><span class=\"line\">        if(i+1 &lt; s.length &amp;&amp; map[s.substr(i,2)]) &#123;</span><br><span class=\"line\">        res += map[s.substr(i,2)];</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">        res += map[s.substr(i,1)];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    return res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3><p>罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。</p>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>数值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>I</td>\n<td>1</td>\n</tr>\n<tr>\n<td>V</td>\n<td>5</td>\n</tr>\n<tr>\n<td>X</td>\n<td>10</td>\n</tr>\n<tr>\n<td>L</td>\n<td>50</td>\n</tr>\n<tr>\n<td>C</td>\n<td>100</td>\n</tr>\n<tr>\n<td>D</td>\n<td>500</td>\n</tr>\n<tr>\n<td>M</td>\n<td>1000</td>\n</tr>\n</tbody>\n</table>\n<p>例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做 XXVII, 即为 XX + V + II 。</p>\n<p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</p>\n<ul>\n<li>I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。</li>\n<li>X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。</li>\n<li>C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和  900。</li>\n</ul>\n<p>给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。</p>\n<h3 id=\"测试用例\"><a href=\"#测试用例\" class=\"headerlink\" title=\"测试用例\"></a>测试用例</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. &quot;III&quot; // 3</span><br><span class=\"line\">2. &quot;IV&quot; // 4</span><br><span class=\"line\">3. &quot;IX&quot; // 9</span><br><span class=\"line\">4. &quot;LVIII&quot; // 58  解释: L = 50, V= 5, III = 3</span><br><span class=\"line\">5. &quot;MCMXCIV&quot; // 1994  解释:M = 1000, CM = 900, XC = 90, IV = 4</span><br></pre></td></tr></table></figure>\n<h3 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h3><h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><ul>\n<li>根据题目中的所有情况写出哈希表</li>\n<li>先匹配特殊情况，由于是匹配两个字符串，所以应考虑到最后一个字符串没有下一个的情况，所以先判断是否到最后了</li>\n<li>若匹配，直接加，并使指针跳过这两个字符串</li>\n<li>若不匹配，则直接得出该字符串的值，指针正常指向下一个</li>\n</ul>\n<h4 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;string&#125; s</span><br><span class=\"line\"> * @return &#123;number&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var romanToInt = function(s) &#123;</span><br><span class=\"line\">    var map = &#123;</span><br><span class=\"line\">        I: 1,</span><br><span class=\"line\">        IV: 4,</span><br><span class=\"line\">        V: 5,</span><br><span class=\"line\">        IX: 9,</span><br><span class=\"line\">        X: 10,</span><br><span class=\"line\">        XL: 40,</span><br><span class=\"line\">        L: 50,</span><br><span class=\"line\">        XC: 90,</span><br><span class=\"line\">        C: 100,</span><br><span class=\"line\">        CD: 400,</span><br><span class=\"line\">        D: 500,</span><br><span class=\"line\">        CM: 900,</span><br><span class=\"line\">        M: 1000</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var res = 0;</span><br><span class=\"line\">    for(let i=0;i&lt;s.length;i++) &#123;</span><br><span class=\"line\">        if(i+1 &lt; s.length &amp;&amp; map[s.substr(i,2)]) &#123;</span><br><span class=\"line\">        res += map[s.substr(i,2)];</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">        res += map[s.substr(i,1)];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    return res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"LeetCode：验证回文串","date":"2019-12-18T16:00:00.000Z","comments":1,"_content":"\n### 题目\n给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。\n\n说明：本题中，我们将空字符串定义为有效的回文串。\n\n### 测试用例\n\n```\n1. \"A man, a plan, a canal: Panama\" // true\n2. \"race a car\" // false\n```\n\n### 解法\n#### 思路\n- 先判空字符串\n- 对非空字符串，先用正则把除字母和数字之外的字符去除，再全部转换为小写字母\n- 把字符串分割为数组，翻转，再拼接为字符串，与原字符串进行对比\n\n#### 算法\n\n```\n/**\n * @param {string} s\n * @return {boolean}\n */\nvar isPalindrome = function(s) {\n    if(s === '') {\n        return true;\n    }\n    s = s.replace(/[^0-9a-zA-Z]/g, '').toLowerCase();\n    if(s === s.split('').reverse().join('')){\n        return true;\n    }\n    return false;\n};\n```\n","source":"_posts/算法/LeetCode：验证回文串.md","raw":"---\ntitle: LeetCode：验证回文串\ndate: 2019-12-19\ntags: [算法]\ncategories: 算法\ncomments: true\n---\n\n### 题目\n给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。\n\n说明：本题中，我们将空字符串定义为有效的回文串。\n\n### 测试用例\n\n```\n1. \"A man, a plan, a canal: Panama\" // true\n2. \"race a car\" // false\n```\n\n### 解法\n#### 思路\n- 先判空字符串\n- 对非空字符串，先用正则把除字母和数字之外的字符去除，再全部转换为小写字母\n- 把字符串分割为数组，翻转，再拼接为字符串，与原字符串进行对比\n\n#### 算法\n\n```\n/**\n * @param {string} s\n * @return {boolean}\n */\nvar isPalindrome = function(s) {\n    if(s === '') {\n        return true;\n    }\n    s = s.replace(/[^0-9a-zA-Z]/g, '').toLowerCase();\n    if(s === s.split('').reverse().join('')){\n        return true;\n    }\n    return false;\n};\n```\n","slug":"算法/LeetCode：验证回文串","published":1,"updated":"2022-07-22T08:27:10.406Z","layout":"post","photos":[],"link":"","_id":"cl5wb2yno00egcj38gm3fggnp","content":"<h3 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3><p>给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。</p>\n<p>说明：本题中，我们将空字符串定义为有效的回文串。</p>\n<h3 id=\"测试用例\"><a href=\"#测试用例\" class=\"headerlink\" title=\"测试用例\"></a>测试用例</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. &quot;A man, a plan, a canal: Panama&quot; // true</span><br><span class=\"line\">2. &quot;race a car&quot; // false</span><br></pre></td></tr></table></figure>\n<h3 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h3><h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><ul>\n<li>先判空字符串</li>\n<li>对非空字符串，先用正则把除字母和数字之外的字符去除，再全部转换为小写字母</li>\n<li>把字符串分割为数组，翻转，再拼接为字符串，与原字符串进行对比</li>\n</ul>\n<h4 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;string&#125; s</span><br><span class=\"line\"> * @return &#123;boolean&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var isPalindrome = function(s) &#123;</span><br><span class=\"line\">    if(s === &apos;&apos;) &#123;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    s = s.replace(/[^0-9a-zA-Z]/g, &apos;&apos;).toLowerCase();</span><br><span class=\"line\">    if(s === s.split(&apos;&apos;).reverse().join(&apos;&apos;))&#123;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return false;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3><p>给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。</p>\n<p>说明：本题中，我们将空字符串定义为有效的回文串。</p>\n<h3 id=\"测试用例\"><a href=\"#测试用例\" class=\"headerlink\" title=\"测试用例\"></a>测试用例</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. &quot;A man, a plan, a canal: Panama&quot; // true</span><br><span class=\"line\">2. &quot;race a car&quot; // false</span><br></pre></td></tr></table></figure>\n<h3 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h3><h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><ul>\n<li>先判空字符串</li>\n<li>对非空字符串，先用正则把除字母和数字之外的字符去除，再全部转换为小写字母</li>\n<li>把字符串分割为数组，翻转，再拼接为字符串，与原字符串进行对比</li>\n</ul>\n<h4 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;string&#125; s</span><br><span class=\"line\"> * @return &#123;boolean&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var isPalindrome = function(s) &#123;</span><br><span class=\"line\">    if(s === &apos;&apos;) &#123;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    s = s.replace(/[^0-9a-zA-Z]/g, &apos;&apos;).toLowerCase();</span><br><span class=\"line\">    if(s === s.split(&apos;&apos;).reverse().join(&apos;&apos;))&#123;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return false;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"各种算法（一）","date":"2019-03-16T16:00:00.000Z","comments":1,"_content":"\n求1+2+3+...+n\n```\nfunction Sum_Solution(n) {\n    var result = n;\n    if(n > 0)\n        result += Sum_Solution(n-1);\n    return result;\n}\nconsole.log(Sum_Solution(3)); //6\n```\n\n统计一个数字在无序数组中出现的次数\n```\nfunction count(arr,num){\n\tarr.sort(function(a,b){\n\t\treturn a-b;\n\t});\n\tvar result;\n\tvar left = arr.indexOf(num);\n\tvar right = arr.lastIndexOf(num,arr.length-1);\n\tif(arr.indexOf(num) == -1){\n\t\tresult = 0;\n\t}else{\n\t\tresult = right-left+1;\n\t}\n\treturn result;\n}\nconsole.log(count([5,5,5,5,5,2,3],5)); //5\n```\n\n找出数组中任意一个重复的数字\n```\nfunction duplicate(numbers, duplication){\n     // write code here\n    //这里要特别注意~找到任意重复的一个值并赋值到duplication[0]\n    //函数返回True/False\n    var temp = [];\n    for(var i in numbers){\n        if(temp.indexOf(numbers[i])==-1){\n            temp.push(numbers[i]);\n        }else{\n            duplication[0] = numbers[i];\n            return true;\n        }\n    }\n    return false;\n}\nconsole.log(duplicate([5,5,5,5,5,2,3],[]));//true\n```\n\n快速排序\n\n```\nfunction quickSort(arr){\n    if(arr.length <= 1){\n        return arr;\n    }\n    var pivotIndex = Math.floor(arr.length/2);\n    var pivot = splice(pivotIndex,1)[0];\n    var left = [];\n    var right = [];\n    for(var i in arr){\n        if(arr[i] < pivot){\n            left.push(arr[i]);\n        }else{\n            right.push(arr[i]);\n        }\n    }\n    return quickSort(left).concat([pivot],quickSort(right));\n}\n```\n\n\n\n","source":"_posts/算法/各种算法（一）.md","raw":"---\ntitle: 各种算法（一）\ndate: 2019-03-17\ntags: [算法]\ncategories: 算法\ncomments: true\n---\n\n求1+2+3+...+n\n```\nfunction Sum_Solution(n) {\n    var result = n;\n    if(n > 0)\n        result += Sum_Solution(n-1);\n    return result;\n}\nconsole.log(Sum_Solution(3)); //6\n```\n\n统计一个数字在无序数组中出现的次数\n```\nfunction count(arr,num){\n\tarr.sort(function(a,b){\n\t\treturn a-b;\n\t});\n\tvar result;\n\tvar left = arr.indexOf(num);\n\tvar right = arr.lastIndexOf(num,arr.length-1);\n\tif(arr.indexOf(num) == -1){\n\t\tresult = 0;\n\t}else{\n\t\tresult = right-left+1;\n\t}\n\treturn result;\n}\nconsole.log(count([5,5,5,5,5,2,3],5)); //5\n```\n\n找出数组中任意一个重复的数字\n```\nfunction duplicate(numbers, duplication){\n     // write code here\n    //这里要特别注意~找到任意重复的一个值并赋值到duplication[0]\n    //函数返回True/False\n    var temp = [];\n    for(var i in numbers){\n        if(temp.indexOf(numbers[i])==-1){\n            temp.push(numbers[i]);\n        }else{\n            duplication[0] = numbers[i];\n            return true;\n        }\n    }\n    return false;\n}\nconsole.log(duplicate([5,5,5,5,5,2,3],[]));//true\n```\n\n快速排序\n\n```\nfunction quickSort(arr){\n    if(arr.length <= 1){\n        return arr;\n    }\n    var pivotIndex = Math.floor(arr.length/2);\n    var pivot = splice(pivotIndex,1)[0];\n    var left = [];\n    var right = [];\n    for(var i in arr){\n        if(arr[i] < pivot){\n            left.push(arr[i]);\n        }else{\n            right.push(arr[i]);\n        }\n    }\n    return quickSort(left).concat([pivot],quickSort(right));\n}\n```\n\n\n\n","slug":"算法/各种算法（一）","published":1,"updated":"2022-07-22T08:27:10.406Z","layout":"post","photos":[],"link":"","_id":"cl5wb2ynq00ejcj38t4bboubf","content":"<p>求1+2+3+…+n<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Sum_Solution(n) &#123;</span><br><span class=\"line\">    var result = n;</span><br><span class=\"line\">    if(n &gt; 0)</span><br><span class=\"line\">        result += Sum_Solution(n-1);</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(Sum_Solution(3)); //6</span><br></pre></td></tr></table></figure></p>\n<p>统计一个数字在无序数组中出现的次数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function count(arr,num)&#123;</span><br><span class=\"line\">\tarr.sort(function(a,b)&#123;</span><br><span class=\"line\">\t\treturn a-b;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\tvar result;</span><br><span class=\"line\">\tvar left = arr.indexOf(num);</span><br><span class=\"line\">\tvar right = arr.lastIndexOf(num,arr.length-1);</span><br><span class=\"line\">\tif(arr.indexOf(num) == -1)&#123;</span><br><span class=\"line\">\t\tresult = 0;</span><br><span class=\"line\">\t&#125;else&#123;</span><br><span class=\"line\">\t\tresult = right-left+1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(count([5,5,5,5,5,2,3],5)); //5</span><br></pre></td></tr></table></figure></p>\n<p>找出数组中任意一个重复的数字<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function duplicate(numbers, duplication)&#123;</span><br><span class=\"line\">     // write code here</span><br><span class=\"line\">    //这里要特别注意~找到任意重复的一个值并赋值到duplication[0]</span><br><span class=\"line\">    //函数返回True/False</span><br><span class=\"line\">    var temp = [];</span><br><span class=\"line\">    for(var i in numbers)&#123;</span><br><span class=\"line\">        if(temp.indexOf(numbers[i])==-1)&#123;</span><br><span class=\"line\">            temp.push(numbers[i]);</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            duplication[0] = numbers[i];</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return false;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(duplicate([5,5,5,5,5,2,3],[]));//true</span><br></pre></td></tr></table></figure></p>\n<p>快速排序</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function quickSort(arr)&#123;</span><br><span class=\"line\">    if(arr.length &lt;= 1)&#123;</span><br><span class=\"line\">        return arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var pivotIndex = Math.floor(arr.length/2);</span><br><span class=\"line\">    var pivot = splice(pivotIndex,1)[0];</span><br><span class=\"line\">    var left = [];</span><br><span class=\"line\">    var right = [];</span><br><span class=\"line\">    for(var i in arr)&#123;</span><br><span class=\"line\">        if(arr[i] &lt; pivot)&#123;</span><br><span class=\"line\">            left.push(arr[i]);</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            right.push(arr[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return quickSort(left).concat([pivot],quickSort(right));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>求1+2+3+…+n<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Sum_Solution(n) &#123;</span><br><span class=\"line\">    var result = n;</span><br><span class=\"line\">    if(n &gt; 0)</span><br><span class=\"line\">        result += Sum_Solution(n-1);</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(Sum_Solution(3)); //6</span><br></pre></td></tr></table></figure></p>\n<p>统计一个数字在无序数组中出现的次数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function count(arr,num)&#123;</span><br><span class=\"line\">\tarr.sort(function(a,b)&#123;</span><br><span class=\"line\">\t\treturn a-b;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\tvar result;</span><br><span class=\"line\">\tvar left = arr.indexOf(num);</span><br><span class=\"line\">\tvar right = arr.lastIndexOf(num,arr.length-1);</span><br><span class=\"line\">\tif(arr.indexOf(num) == -1)&#123;</span><br><span class=\"line\">\t\tresult = 0;</span><br><span class=\"line\">\t&#125;else&#123;</span><br><span class=\"line\">\t\tresult = right-left+1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(count([5,5,5,5,5,2,3],5)); //5</span><br></pre></td></tr></table></figure></p>\n<p>找出数组中任意一个重复的数字<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function duplicate(numbers, duplication)&#123;</span><br><span class=\"line\">     // write code here</span><br><span class=\"line\">    //这里要特别注意~找到任意重复的一个值并赋值到duplication[0]</span><br><span class=\"line\">    //函数返回True/False</span><br><span class=\"line\">    var temp = [];</span><br><span class=\"line\">    for(var i in numbers)&#123;</span><br><span class=\"line\">        if(temp.indexOf(numbers[i])==-1)&#123;</span><br><span class=\"line\">            temp.push(numbers[i]);</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            duplication[0] = numbers[i];</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return false;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(duplicate([5,5,5,5,5,2,3],[]));//true</span><br></pre></td></tr></table></figure></p>\n<p>快速排序</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function quickSort(arr)&#123;</span><br><span class=\"line\">    if(arr.length &lt;= 1)&#123;</span><br><span class=\"line\">        return arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var pivotIndex = Math.floor(arr.length/2);</span><br><span class=\"line\">    var pivot = splice(pivotIndex,1)[0];</span><br><span class=\"line\">    var left = [];</span><br><span class=\"line\">    var right = [];</span><br><span class=\"line\">    for(var i in arr)&#123;</span><br><span class=\"line\">        if(arr[i] &lt; pivot)&#123;</span><br><span class=\"line\">            left.push(arr[i]);</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            right.push(arr[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return quickSort(left).concat([pivot],quickSort(right));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"各种算法（三）","date":"2019-03-18T16:00:00.000Z","comments":1,"_content":"\n有一个字符串有很多is，写一个方法只保留一个is？\n\n```\nfunction deleteIs(str){\n  var index = str.search(\"is\");\n  var left = str.slice(0,index+2);\n  var right = str.slice(index+2,str.length);\n  right = right.split(\"is\").join(\"\");\n  return left.concat(right);\n }\n\nconsole.log(deleteIs(\"thisismybook\"));//thismybook\n```\n\n有3个-10-10之间的整数，写一个方法这三个数一共有多少可能相加等于10。\n\n改写数组的push方法，保持原有逻辑，添加一个console.log(arguments)，即push什么打印什么。\n\n```\nArray.prototype.push = function(val){\n    console.log(val);\n}\nvar temp = [1,2,5];\ntemp.push(7);//打印7\n```\n\n传入一个无序数组，要求n数相加，获取特定的sum\n\n```\n function getResult(arr,n,sum){\n    if(n==0&&sum==0){\n        return true;\n    }\n    if(n<0){\n        return false;\n    }\n    if(n>0){\n        for(var i in arr){\n            var temp = arr.slice(i+1,arr.length);\n            return getResult(temp,n-1,sum-arr[i]) || getResult(temp,n,sum);\n        }\n    }\n}\n\nconsole.log(getResult([1,2,3,4],2,7)); //true\n```\n\n用正则表达式去掉两边的空格\n\n```\nfunction remove(str){\n  var reg = /(^\\s+)|(\\s+?)/g;\n  return str.replace(reg,\"\");\n}\n\nconsole.log(remove(\"this is book\"));//\"thisisbook\"\n```\n给定一个非空的数字数组，数组有且只有一个非重复项，实现一个方法获取落单项\n\n```\nfunction getSingleNumber(arr){\n  var temp = [];\n  for(var i in arr){\n    if(temp.indexOf(arr[i]) == -1){\n      temp.push(arr[i]);\n    }else{\n      temp.splice(temp.indexOf(arr[i]),1);\n    }\n  }\n  return temp[0];\n}\n\nconsole.log(getSingleNumber([0,1,0,0])); //1\n```\n请实现一个函数merge，传入一个数组，合并数组中【相邻且重复】的元素\n\n```\nfunction merge(arr){\n  var reg = /(.)\\1*/g;\n  var str = arr.join(\"\");\n  str = str.replace(reg,\"$1\");\n  arr = str.split(\"\");\n  arr = arr.map(function(val){\n    return parseInt(val);\n  })\n  return arr;\n}\n\nconsole.log(merge([3,2,2,4,5,5,6,2,1]));//[3,2,4,5,6,2,1]\n```\n\n","source":"_posts/算法/各种算法（三）.md","raw":"---\ntitle: 各种算法（三）\ndate: 2019-03-19\ntags: [算法]\ncategories: 算法\ncomments: true\n---\n\n有一个字符串有很多is，写一个方法只保留一个is？\n\n```\nfunction deleteIs(str){\n  var index = str.search(\"is\");\n  var left = str.slice(0,index+2);\n  var right = str.slice(index+2,str.length);\n  right = right.split(\"is\").join(\"\");\n  return left.concat(right);\n }\n\nconsole.log(deleteIs(\"thisismybook\"));//thismybook\n```\n\n有3个-10-10之间的整数，写一个方法这三个数一共有多少可能相加等于10。\n\n改写数组的push方法，保持原有逻辑，添加一个console.log(arguments)，即push什么打印什么。\n\n```\nArray.prototype.push = function(val){\n    console.log(val);\n}\nvar temp = [1,2,5];\ntemp.push(7);//打印7\n```\n\n传入一个无序数组，要求n数相加，获取特定的sum\n\n```\n function getResult(arr,n,sum){\n    if(n==0&&sum==0){\n        return true;\n    }\n    if(n<0){\n        return false;\n    }\n    if(n>0){\n        for(var i in arr){\n            var temp = arr.slice(i+1,arr.length);\n            return getResult(temp,n-1,sum-arr[i]) || getResult(temp,n,sum);\n        }\n    }\n}\n\nconsole.log(getResult([1,2,3,4],2,7)); //true\n```\n\n用正则表达式去掉两边的空格\n\n```\nfunction remove(str){\n  var reg = /(^\\s+)|(\\s+?)/g;\n  return str.replace(reg,\"\");\n}\n\nconsole.log(remove(\"this is book\"));//\"thisisbook\"\n```\n给定一个非空的数字数组，数组有且只有一个非重复项，实现一个方法获取落单项\n\n```\nfunction getSingleNumber(arr){\n  var temp = [];\n  for(var i in arr){\n    if(temp.indexOf(arr[i]) == -1){\n      temp.push(arr[i]);\n    }else{\n      temp.splice(temp.indexOf(arr[i]),1);\n    }\n  }\n  return temp[0];\n}\n\nconsole.log(getSingleNumber([0,1,0,0])); //1\n```\n请实现一个函数merge，传入一个数组，合并数组中【相邻且重复】的元素\n\n```\nfunction merge(arr){\n  var reg = /(.)\\1*/g;\n  var str = arr.join(\"\");\n  str = str.replace(reg,\"$1\");\n  arr = str.split(\"\");\n  arr = arr.map(function(val){\n    return parseInt(val);\n  })\n  return arr;\n}\n\nconsole.log(merge([3,2,2,4,5,5,6,2,1]));//[3,2,4,5,6,2,1]\n```\n\n","slug":"算法/各种算法（三）","published":1,"updated":"2022-07-22T08:27:10.381Z","layout":"post","photos":[],"link":"","_id":"cl5wb2ynr00eocj38lydlxl2e","content":"<p>有一个字符串有很多is，写一个方法只保留一个is？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function deleteIs(str)&#123;</span><br><span class=\"line\">  var index = str.search(&quot;is&quot;);</span><br><span class=\"line\">  var left = str.slice(0,index+2);</span><br><span class=\"line\">  var right = str.slice(index+2,str.length);</span><br><span class=\"line\">  right = right.split(&quot;is&quot;).join(&quot;&quot;);</span><br><span class=\"line\">  return left.concat(right);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(deleteIs(&quot;thisismybook&quot;));//thismybook</span><br></pre></td></tr></table></figure>\n<p>有3个-10-10之间的整数，写一个方法这三个数一共有多少可能相加等于10。</p>\n<p>改写数组的push方法，保持原有逻辑，添加一个console.log(arguments)，即push什么打印什么。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Array.prototype.push = function(val)&#123;</span><br><span class=\"line\">    console.log(val);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var temp = [1,2,5];</span><br><span class=\"line\">temp.push(7);//打印7</span><br></pre></td></tr></table></figure>\n<p>传入一个无序数组，要求n数相加，获取特定的sum</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> function getResult(arr,n,sum)&#123;</span><br><span class=\"line\">    if(n==0&amp;&amp;sum==0)&#123;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(n&lt;0)&#123;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(n&gt;0)&#123;</span><br><span class=\"line\">        for(var i in arr)&#123;</span><br><span class=\"line\">            var temp = arr.slice(i+1,arr.length);</span><br><span class=\"line\">            return getResult(temp,n-1,sum-arr[i]) || getResult(temp,n,sum);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(getResult([1,2,3,4],2,7)); //true</span><br></pre></td></tr></table></figure>\n<p>用正则表达式去掉两边的空格</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function remove(str)&#123;</span><br><span class=\"line\">  var reg = /(^\\s+)|(\\s+?)/g;</span><br><span class=\"line\">  return str.replace(reg,&quot;&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(remove(&quot;this is book&quot;));//&quot;thisisbook&quot;</span><br></pre></td></tr></table></figure>\n<p>给定一个非空的数字数组，数组有且只有一个非重复项，实现一个方法获取落单项</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function getSingleNumber(arr)&#123;</span><br><span class=\"line\">  var temp = [];</span><br><span class=\"line\">  for(var i in arr)&#123;</span><br><span class=\"line\">    if(temp.indexOf(arr[i]) == -1)&#123;</span><br><span class=\"line\">      temp.push(arr[i]);</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">      temp.splice(temp.indexOf(arr[i]),1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return temp[0];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(getSingleNumber([0,1,0,0])); //1</span><br></pre></td></tr></table></figure>\n<p>请实现一个函数merge，传入一个数组，合并数组中【相邻且重复】的元素</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function merge(arr)&#123;</span><br><span class=\"line\">  var reg = /(.)\\1*/g;</span><br><span class=\"line\">  var str = arr.join(&quot;&quot;);</span><br><span class=\"line\">  str = str.replace(reg,&quot;$1&quot;);</span><br><span class=\"line\">  arr = str.split(&quot;&quot;);</span><br><span class=\"line\">  arr = arr.map(function(val)&#123;</span><br><span class=\"line\">    return parseInt(val);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  return arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(merge([3,2,2,4,5,5,6,2,1]));//[3,2,4,5,6,2,1]</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>有一个字符串有很多is，写一个方法只保留一个is？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function deleteIs(str)&#123;</span><br><span class=\"line\">  var index = str.search(&quot;is&quot;);</span><br><span class=\"line\">  var left = str.slice(0,index+2);</span><br><span class=\"line\">  var right = str.slice(index+2,str.length);</span><br><span class=\"line\">  right = right.split(&quot;is&quot;).join(&quot;&quot;);</span><br><span class=\"line\">  return left.concat(right);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(deleteIs(&quot;thisismybook&quot;));//thismybook</span><br></pre></td></tr></table></figure>\n<p>有3个-10-10之间的整数，写一个方法这三个数一共有多少可能相加等于10。</p>\n<p>改写数组的push方法，保持原有逻辑，添加一个console.log(arguments)，即push什么打印什么。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Array.prototype.push = function(val)&#123;</span><br><span class=\"line\">    console.log(val);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var temp = [1,2,5];</span><br><span class=\"line\">temp.push(7);//打印7</span><br></pre></td></tr></table></figure>\n<p>传入一个无序数组，要求n数相加，获取特定的sum</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> function getResult(arr,n,sum)&#123;</span><br><span class=\"line\">    if(n==0&amp;&amp;sum==0)&#123;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(n&lt;0)&#123;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(n&gt;0)&#123;</span><br><span class=\"line\">        for(var i in arr)&#123;</span><br><span class=\"line\">            var temp = arr.slice(i+1,arr.length);</span><br><span class=\"line\">            return getResult(temp,n-1,sum-arr[i]) || getResult(temp,n,sum);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(getResult([1,2,3,4],2,7)); //true</span><br></pre></td></tr></table></figure>\n<p>用正则表达式去掉两边的空格</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function remove(str)&#123;</span><br><span class=\"line\">  var reg = /(^\\s+)|(\\s+?)/g;</span><br><span class=\"line\">  return str.replace(reg,&quot;&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(remove(&quot;this is book&quot;));//&quot;thisisbook&quot;</span><br></pre></td></tr></table></figure>\n<p>给定一个非空的数字数组，数组有且只有一个非重复项，实现一个方法获取落单项</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function getSingleNumber(arr)&#123;</span><br><span class=\"line\">  var temp = [];</span><br><span class=\"line\">  for(var i in arr)&#123;</span><br><span class=\"line\">    if(temp.indexOf(arr[i]) == -1)&#123;</span><br><span class=\"line\">      temp.push(arr[i]);</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">      temp.splice(temp.indexOf(arr[i]),1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return temp[0];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(getSingleNumber([0,1,0,0])); //1</span><br></pre></td></tr></table></figure>\n<p>请实现一个函数merge，传入一个数组，合并数组中【相邻且重复】的元素</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function merge(arr)&#123;</span><br><span class=\"line\">  var reg = /(.)\\1*/g;</span><br><span class=\"line\">  var str = arr.join(&quot;&quot;);</span><br><span class=\"line\">  str = str.replace(reg,&quot;$1&quot;);</span><br><span class=\"line\">  arr = str.split(&quot;&quot;);</span><br><span class=\"line\">  arr = arr.map(function(val)&#123;</span><br><span class=\"line\">    return parseInt(val);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  return arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(merge([3,2,2,4,5,5,6,2,1]));//[3,2,4,5,6,2,1]</span><br></pre></td></tr></table></figure>\n"},{"title":"各种算法（二）","date":"2019-03-18T16:00:00.000Z","comments":1,"_content":"\n求“123456789876543212345678987654321...”中的第n位\n```\nfunction index(n){\n  if(n%16<10){\n    return n%16;\n  }else{\n    return 9-(n%16-9);\n  }\n}\n\nconsole.log(index(26));//8\n```\n实现  \nadd(1);//1    \nadd(1)(2); //3  \nadd(1)(2)(3); //6\n\n```\nvar add = function(a) {\n    var sum = a;\n    var s = function(b) {\n        sum += b;\n        //s，继续累加后面的执行参数。\n        return s;\n    };\n    //当要打印一个对象时，会自动调用 valueOf()或 toString方法\n    s.toString = function() {\n        return sum;\n    };\n    //获取第一个参数赋值给sum后，s。\n    return s;\n};\n\nadd(1)(2)(3);//6\n//第一次调用add(),初始化了s，并将a保存在s的作用链中。\n//然后返回s保证了第二次调用的是s函数。\n//第二次之后的调用也是调用s，而在s中将传入的参数与保存在作用链中a相加并付给sum。\n```\n给定一个数组，返回所有的数字。如[1,'3',false,null,100]=>[1,3,100]\n\n```\nfunction search(arr){\n  var temp = [];\n  for(var i in arr){\n    if(typeof arr[i] == \"string\" || typeof arr[i] == \"number\"){\n      temp.push(arr[i]);\n    }\n  }\n  temp = temp.map(function(val){\n     if（typeof parseInt（val） == \"number\"）\n         return parseInt(val);\n  })\n  return temp;\n}\n\nconsole.log(search([1,'3',false,null,100])); //[1,3,100]\n```\n\n\n","source":"_posts/算法/各种算法（二）.md","raw":"---\ntitle: 各种算法（二）\ndate: 2019-03-19\ntags: [算法]\ncategories: 算法\ncomments: true\n---\n\n求“123456789876543212345678987654321...”中的第n位\n```\nfunction index(n){\n  if(n%16<10){\n    return n%16;\n  }else{\n    return 9-(n%16-9);\n  }\n}\n\nconsole.log(index(26));//8\n```\n实现  \nadd(1);//1    \nadd(1)(2); //3  \nadd(1)(2)(3); //6\n\n```\nvar add = function(a) {\n    var sum = a;\n    var s = function(b) {\n        sum += b;\n        //s，继续累加后面的执行参数。\n        return s;\n    };\n    //当要打印一个对象时，会自动调用 valueOf()或 toString方法\n    s.toString = function() {\n        return sum;\n    };\n    //获取第一个参数赋值给sum后，s。\n    return s;\n};\n\nadd(1)(2)(3);//6\n//第一次调用add(),初始化了s，并将a保存在s的作用链中。\n//然后返回s保证了第二次调用的是s函数。\n//第二次之后的调用也是调用s，而在s中将传入的参数与保存在作用链中a相加并付给sum。\n```\n给定一个数组，返回所有的数字。如[1,'3',false,null,100]=>[1,3,100]\n\n```\nfunction search(arr){\n  var temp = [];\n  for(var i in arr){\n    if(typeof arr[i] == \"string\" || typeof arr[i] == \"number\"){\n      temp.push(arr[i]);\n    }\n  }\n  temp = temp.map(function(val){\n     if（typeof parseInt（val） == \"number\"）\n         return parseInt(val);\n  })\n  return temp;\n}\n\nconsole.log(search([1,'3',false,null,100])); //[1,3,100]\n```\n\n\n","slug":"算法/各种算法（二）","published":1,"updated":"2022-07-22T08:27:10.377Z","layout":"post","photos":[],"link":"","_id":"cl5wb2yns00ercj38rds9wgh1","content":"<p>求“123456789876543212345678987654321…”中的第n位<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function index(n)&#123;</span><br><span class=\"line\">  if(n%16&lt;10)&#123;</span><br><span class=\"line\">    return n%16;</span><br><span class=\"line\">  &#125;else&#123;</span><br><span class=\"line\">    return 9-(n%16-9);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(index(26));//8</span><br></pre></td></tr></table></figure></p>\n<p>实现<br>add(1);//1<br>add(1)(2); //3<br>add(1)(2)(3); //6</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var add = function(a) &#123;</span><br><span class=\"line\">    var sum = a;</span><br><span class=\"line\">    var s = function(b) &#123;</span><br><span class=\"line\">        sum += b;</span><br><span class=\"line\">        //s，继续累加后面的执行参数。</span><br><span class=\"line\">        return s;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    //当要打印一个对象时，会自动调用 valueOf()或 toString方法</span><br><span class=\"line\">    s.toString = function() &#123;</span><br><span class=\"line\">        return sum;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    //获取第一个参数赋值给sum后，s。</span><br><span class=\"line\">    return s;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">add(1)(2)(3);//6</span><br><span class=\"line\">//第一次调用add(),初始化了s，并将a保存在s的作用链中。</span><br><span class=\"line\">//然后返回s保证了第二次调用的是s函数。</span><br><span class=\"line\">//第二次之后的调用也是调用s，而在s中将传入的参数与保存在作用链中a相加并付给sum。</span><br></pre></td></tr></table></figure>\n<p>给定一个数组，返回所有的数字。如[1,’3’,false,null,100]=&gt;[1,3,100]</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function search(arr)&#123;</span><br><span class=\"line\">  var temp = [];</span><br><span class=\"line\">  for(var i in arr)&#123;</span><br><span class=\"line\">    if(typeof arr[i] == &quot;string&quot; || typeof arr[i] == &quot;number&quot;)&#123;</span><br><span class=\"line\">      temp.push(arr[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  temp = temp.map(function(val)&#123;</span><br><span class=\"line\">     if（typeof parseInt（val） == &quot;number&quot;）</span><br><span class=\"line\">         return parseInt(val);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  return temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(search([1,&apos;3&apos;,false,null,100])); //[1,3,100]</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>求“123456789876543212345678987654321…”中的第n位<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function index(n)&#123;</span><br><span class=\"line\">  if(n%16&lt;10)&#123;</span><br><span class=\"line\">    return n%16;</span><br><span class=\"line\">  &#125;else&#123;</span><br><span class=\"line\">    return 9-(n%16-9);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(index(26));//8</span><br></pre></td></tr></table></figure></p>\n<p>实现<br>add(1);//1<br>add(1)(2); //3<br>add(1)(2)(3); //6</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var add = function(a) &#123;</span><br><span class=\"line\">    var sum = a;</span><br><span class=\"line\">    var s = function(b) &#123;</span><br><span class=\"line\">        sum += b;</span><br><span class=\"line\">        //s，继续累加后面的执行参数。</span><br><span class=\"line\">        return s;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    //当要打印一个对象时，会自动调用 valueOf()或 toString方法</span><br><span class=\"line\">    s.toString = function() &#123;</span><br><span class=\"line\">        return sum;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    //获取第一个参数赋值给sum后，s。</span><br><span class=\"line\">    return s;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">add(1)(2)(3);//6</span><br><span class=\"line\">//第一次调用add(),初始化了s，并将a保存在s的作用链中。</span><br><span class=\"line\">//然后返回s保证了第二次调用的是s函数。</span><br><span class=\"line\">//第二次之后的调用也是调用s，而在s中将传入的参数与保存在作用链中a相加并付给sum。</span><br></pre></td></tr></table></figure>\n<p>给定一个数组，返回所有的数字。如[1,’3’,false,null,100]=&gt;[1,3,100]</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function search(arr)&#123;</span><br><span class=\"line\">  var temp = [];</span><br><span class=\"line\">  for(var i in arr)&#123;</span><br><span class=\"line\">    if(typeof arr[i] == &quot;string&quot; || typeof arr[i] == &quot;number&quot;)&#123;</span><br><span class=\"line\">      temp.push(arr[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  temp = temp.map(function(val)&#123;</span><br><span class=\"line\">     if（typeof parseInt（val） == &quot;number&quot;）</span><br><span class=\"line\">         return parseInt(val);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  return temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(search([1,&apos;3&apos;,false,null,100])); //[1,3,100]</span><br></pre></td></tr></table></figure>\n"},{"title":"算法：二进制转十进制","date":"2020-02-22T16:00:00.000Z","comments":1,"_content":"\n### 解法一\n按权相加\n```\nfunction toDecimal(str){\n  var res = 0;\n  for(var i=str.length-1;i>=0;i--){\n    res = str[i]==='1' ? Math.pow(2,str.length-1-i) + res : res;\n  }\n  return res;\n}\n```\n\n```\nfunction toDecimal(str){\n  var res = 0;\n  var temp = 1;\n  for(var i=str.length-1;i>=0;i--){\n      res = str[i]==='1' ? res + temp : res;\n      temp *= 2;\n  }\n  return res;\n}\n```\n### 解法二\nparseInt 的第二个参数表示要解析的数字的基数\n```\nfunction toDecimal(str){\n  return parseInt(str,2);\n}\n```\n","source":"_posts/算法/算法：二进制转十进制.md","raw":"---\ntitle: 算法：二进制转十进制\ndate: 2020-02-23\ntags: [算法]\ncategories: 算法\ncomments: true\n---\n\n### 解法一\n按权相加\n```\nfunction toDecimal(str){\n  var res = 0;\n  for(var i=str.length-1;i>=0;i--){\n    res = str[i]==='1' ? Math.pow(2,str.length-1-i) + res : res;\n  }\n  return res;\n}\n```\n\n```\nfunction toDecimal(str){\n  var res = 0;\n  var temp = 1;\n  for(var i=str.length-1;i>=0;i--){\n      res = str[i]==='1' ? res + temp : res;\n      temp *= 2;\n  }\n  return res;\n}\n```\n### 解法二\nparseInt 的第二个参数表示要解析的数字的基数\n```\nfunction toDecimal(str){\n  return parseInt(str,2);\n}\n```\n","slug":"算法/算法：二进制转十进制","published":1,"updated":"2022-07-22T08:27:10.406Z","layout":"post","photos":[],"link":"","_id":"cl5wb2ynt00ewcj38o9sbzpny","content":"<h3 id=\"解法一\"><a href=\"#解法一\" class=\"headerlink\" title=\"解法一\"></a>解法一</h3><p>按权相加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function toDecimal(str)&#123;</span><br><span class=\"line\">  var res = 0;</span><br><span class=\"line\">  for(var i=str.length-1;i&gt;=0;i--)&#123;</span><br><span class=\"line\">    res = str[i]===&apos;1&apos; ? Math.pow(2,str.length-1-i) + res : res;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function toDecimal(str)&#123;</span><br><span class=\"line\">  var res = 0;</span><br><span class=\"line\">  var temp = 1;</span><br><span class=\"line\">  for(var i=str.length-1;i&gt;=0;i--)&#123;</span><br><span class=\"line\">      res = str[i]===&apos;1&apos; ? res + temp : res;</span><br><span class=\"line\">      temp *= 2;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"解法二\"><a href=\"#解法二\" class=\"headerlink\" title=\"解法二\"></a>解法二</h3><p>parseInt 的第二个参数表示要解析的数字的基数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function toDecimal(str)&#123;</span><br><span class=\"line\">  return parseInt(str,2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"解法一\"><a href=\"#解法一\" class=\"headerlink\" title=\"解法一\"></a>解法一</h3><p>按权相加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function toDecimal(str)&#123;</span><br><span class=\"line\">  var res = 0;</span><br><span class=\"line\">  for(var i=str.length-1;i&gt;=0;i--)&#123;</span><br><span class=\"line\">    res = str[i]===&apos;1&apos; ? Math.pow(2,str.length-1-i) + res : res;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function toDecimal(str)&#123;</span><br><span class=\"line\">  var res = 0;</span><br><span class=\"line\">  var temp = 1;</span><br><span class=\"line\">  for(var i=str.length-1;i&gt;=0;i--)&#123;</span><br><span class=\"line\">      res = str[i]===&apos;1&apos; ? res + temp : res;</span><br><span class=\"line\">      temp *= 2;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"解法二\"><a href=\"#解法二\" class=\"headerlink\" title=\"解法二\"></a>解法二</h3><p>parseInt 的第二个参数表示要解析的数字的基数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function toDecimal(str)&#123;</span><br><span class=\"line\">  return parseInt(str,2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"算法：二分查找","date":"2019-03-27T16:00:00.000Z","comments":1,"_content":"\n二分法查找，也称折半查找，是一种在有序数组中查找特定元素的搜索算法。\n1. 首先，从有序数组的中间的元素开始搜索， 如果该元素正好是目标元素（即要查找的元素），则搜索过程结束，否则进行下一步。\n2. 如果目标元素大于或者小于中间元素， 则在数组大于或小于中间元素的那一半区域查找，然后重复第一步的操作。\n3. 如果某一步数组为空，则表示找不到目标元素。 \n\n```\nfunction search(arr,key){\n    var low = 0;\n    var high = arr.length-1;\n    while(low <= high){\n        var mid = parseInt((low+high)/2);\n        if(key == arr[mid]){\n            return mid;\n        }else if(key < arr[mid]){\n            high = mid-1;\n        }else if(key > arr[mid]){\n            low = mid+1;\n        }else{\n            return -1;\n        }\n    }\n}\n\nconsole.log(search([0,1,2,3,5,6,7],5));//4\nconsole.log(search([0,1,2,3,5,6,7],4));//undefined\n```\n","source":"_posts/算法/算法：二分查找.md","raw":"---\ntitle: 算法：二分查找\ndate: 2019-03-28\ntags: [算法]\ncategories: 算法\ncomments: true\n---\n\n二分法查找，也称折半查找，是一种在有序数组中查找特定元素的搜索算法。\n1. 首先，从有序数组的中间的元素开始搜索， 如果该元素正好是目标元素（即要查找的元素），则搜索过程结束，否则进行下一步。\n2. 如果目标元素大于或者小于中间元素， 则在数组大于或小于中间元素的那一半区域查找，然后重复第一步的操作。\n3. 如果某一步数组为空，则表示找不到目标元素。 \n\n```\nfunction search(arr,key){\n    var low = 0;\n    var high = arr.length-1;\n    while(low <= high){\n        var mid = parseInt((low+high)/2);\n        if(key == arr[mid]){\n            return mid;\n        }else if(key < arr[mid]){\n            high = mid-1;\n        }else if(key > arr[mid]){\n            low = mid+1;\n        }else{\n            return -1;\n        }\n    }\n}\n\nconsole.log(search([0,1,2,3,5,6,7],5));//4\nconsole.log(search([0,1,2,3,5,6,7],4));//undefined\n```\n","slug":"算法/算法：二分查找","published":1,"updated":"2022-07-22T08:27:10.381Z","layout":"post","photos":[],"link":"","_id":"cl5wb2ynu00ezcj380irkst5f","content":"<p>二分法查找，也称折半查找，是一种在有序数组中查找特定元素的搜索算法。</p>\n<ol>\n<li>首先，从有序数组的中间的元素开始搜索， 如果该元素正好是目标元素（即要查找的元素），则搜索过程结束，否则进行下一步。</li>\n<li>如果目标元素大于或者小于中间元素， 则在数组大于或小于中间元素的那一半区域查找，然后重复第一步的操作。</li>\n<li>如果某一步数组为空，则表示找不到目标元素。 </li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function search(arr,key)&#123;</span><br><span class=\"line\">    var low = 0;</span><br><span class=\"line\">    var high = arr.length-1;</span><br><span class=\"line\">    while(low &lt;= high)&#123;</span><br><span class=\"line\">        var mid = parseInt((low+high)/2);</span><br><span class=\"line\">        if(key == arr[mid])&#123;</span><br><span class=\"line\">            return mid;</span><br><span class=\"line\">        &#125;else if(key &lt; arr[mid])&#123;</span><br><span class=\"line\">            high = mid-1;</span><br><span class=\"line\">        &#125;else if(key &gt; arr[mid])&#123;</span><br><span class=\"line\">            low = mid+1;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            return -1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(search([0,1,2,3,5,6,7],5));//4</span><br><span class=\"line\">console.log(search([0,1,2,3,5,6,7],4));//undefined</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>二分法查找，也称折半查找，是一种在有序数组中查找特定元素的搜索算法。</p>\n<ol>\n<li>首先，从有序数组的中间的元素开始搜索， 如果该元素正好是目标元素（即要查找的元素），则搜索过程结束，否则进行下一步。</li>\n<li>如果目标元素大于或者小于中间元素， 则在数组大于或小于中间元素的那一半区域查找，然后重复第一步的操作。</li>\n<li>如果某一步数组为空，则表示找不到目标元素。 </li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function search(arr,key)&#123;</span><br><span class=\"line\">    var low = 0;</span><br><span class=\"line\">    var high = arr.length-1;</span><br><span class=\"line\">    while(low &lt;= high)&#123;</span><br><span class=\"line\">        var mid = parseInt((low+high)/2);</span><br><span class=\"line\">        if(key == arr[mid])&#123;</span><br><span class=\"line\">            return mid;</span><br><span class=\"line\">        &#125;else if(key &lt; arr[mid])&#123;</span><br><span class=\"line\">            high = mid-1;</span><br><span class=\"line\">        &#125;else if(key &gt; arr[mid])&#123;</span><br><span class=\"line\">            low = mid+1;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            return -1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(search([0,1,2,3,5,6,7],5));//4</span><br><span class=\"line\">console.log(search([0,1,2,3,5,6,7],4));//undefined</span><br></pre></td></tr></table></figure>\n"},{"title":"算法：如何找出单链表中的倒数第k个元素","date":"2019-04-24T16:00:00.000Z","comments":1,"_content":"\n1. 首先遍历一遍单链表，求出整个单链表的长度n，然后将倒数第k个，转换为正数第n-k个，接下来遍历一次就可以得到结果。\n\n\n2. 优化：设置两个指针p1和p2，p1在p2前，两者相差k-1个节点，当p1指向null时，p2刚好指向目标元素。\n","source":"_posts/算法/算法：如何找出单链表中的倒数第k个元素.md","raw":"---\ntitle: 算法：如何找出单链表中的倒数第k个元素\ndate: 2019-04-25\ntags: [算法]\ncategories: 算法\ncomments: true\n---\n\n1. 首先遍历一遍单链表，求出整个单链表的长度n，然后将倒数第k个，转换为正数第n-k个，接下来遍历一次就可以得到结果。\n\n\n2. 优化：设置两个指针p1和p2，p1在p2前，两者相差k-1个节点，当p1指向null时，p2刚好指向目标元素。\n","slug":"算法/算法：如何找出单链表中的倒数第k个元素","published":1,"updated":"2022-07-22T08:27:10.406Z","layout":"post","photos":[],"link":"","_id":"cl5wb2ynv00f4cj38ewsyux5a","content":"<ol>\n<li>首先遍历一遍单链表，求出整个单链表的长度n，然后将倒数第k个，转换为正数第n-k个，接下来遍历一次就可以得到结果。</li>\n</ol>\n<ol start=\"2\">\n<li>优化：设置两个指针p1和p2，p1在p2前，两者相差k-1个节点，当p1指向null时，p2刚好指向目标元素。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>首先遍历一遍单链表，求出整个单链表的长度n，然后将倒数第k个，转换为正数第n-k个，接下来遍历一次就可以得到结果。</li>\n</ol>\n<ol start=\"2\">\n<li>优化：设置两个指针p1和p2，p1在p2前，两者相差k-1个节点，当p1指向null时，p2刚好指向目标元素。</li>\n</ol>\n"},{"title":"算法：多层数组转化为一层","date":"2020-01-13T16:00:00.000Z","comments":1,"_content":"\n### 题目\n给定一个数组，将多层数组转化为一层。\n\n注意，数组元素不一定是数字，有可能为对象或字符串。\n\n### 测试用例\n\n```\n1. ['1',[2,3],-1] // ['1',2,3,-1]\n2. ['1',[2,3],{a:-1}] // ['1',2,3,{a:-1}]\n```\n\n### 解法\n#### 思路\n- 遍历数组，取出元素放入新数组，若元素为数组则递归取出\n\n#### 算法\n\n```\n/**\n * @param {array} arr\n * @param {array} res\n * @return {array}\n */\nvar flatten = function (arr, res) {\n   for(let i in arr) {\n    if(arr[i] instanceof Array) {\n      test(arr[i],res)\n    } else {\n      res.push(arr[i]);\n    }\n  }\n  return res;\n}\n```","source":"_posts/算法/算法：多层数组转化为一层.md","raw":"---\ntitle: 算法：多层数组转化为一层\ndate: 2020-01-14\ntags: [算法]\ncategories: 算法\ncomments: true\n---\n\n### 题目\n给定一个数组，将多层数组转化为一层。\n\n注意，数组元素不一定是数字，有可能为对象或字符串。\n\n### 测试用例\n\n```\n1. ['1',[2,3],-1] // ['1',2,3,-1]\n2. ['1',[2,3],{a:-1}] // ['1',2,3,{a:-1}]\n```\n\n### 解法\n#### 思路\n- 遍历数组，取出元素放入新数组，若元素为数组则递归取出\n\n#### 算法\n\n```\n/**\n * @param {array} arr\n * @param {array} res\n * @return {array}\n */\nvar flatten = function (arr, res) {\n   for(let i in arr) {\n    if(arr[i] instanceof Array) {\n      test(arr[i],res)\n    } else {\n      res.push(arr[i]);\n    }\n  }\n  return res;\n}\n```","slug":"算法/算法：多层数组转化为一层","published":1,"updated":"2022-07-22T08:27:10.406Z","layout":"post","photos":[],"link":"","_id":"cl5wb2ynw00f7cj388703izmf","content":"<h3 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3><p>给定一个数组，将多层数组转化为一层。</p>\n<p>注意，数组元素不一定是数字，有可能为对象或字符串。</p>\n<h3 id=\"测试用例\"><a href=\"#测试用例\" class=\"headerlink\" title=\"测试用例\"></a>测试用例</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. [&apos;1&apos;,[2,3],-1] // [&apos;1&apos;,2,3,-1]</span><br><span class=\"line\">2. [&apos;1&apos;,[2,3],&#123;a:-1&#125;] // [&apos;1&apos;,2,3,&#123;a:-1&#125;]</span><br></pre></td></tr></table></figure>\n<h3 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h3><h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><ul>\n<li>遍历数组，取出元素放入新数组，若元素为数组则递归取出</li>\n</ul>\n<h4 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;array&#125; arr</span><br><span class=\"line\"> * @param &#123;array&#125; res</span><br><span class=\"line\"> * @return &#123;array&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var flatten = function (arr, res) &#123;</span><br><span class=\"line\">   for(let i in arr) &#123;</span><br><span class=\"line\">    if(arr[i] instanceof Array) &#123;</span><br><span class=\"line\">      test(arr[i],res)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      res.push(arr[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3><p>给定一个数组，将多层数组转化为一层。</p>\n<p>注意，数组元素不一定是数字，有可能为对象或字符串。</p>\n<h3 id=\"测试用例\"><a href=\"#测试用例\" class=\"headerlink\" title=\"测试用例\"></a>测试用例</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. [&apos;1&apos;,[2,3],-1] // [&apos;1&apos;,2,3,-1]</span><br><span class=\"line\">2. [&apos;1&apos;,[2,3],&#123;a:-1&#125;] // [&apos;1&apos;,2,3,&#123;a:-1&#125;]</span><br></pre></td></tr></table></figure>\n<h3 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h3><h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><ul>\n<li>遍历数组，取出元素放入新数组，若元素为数组则递归取出</li>\n</ul>\n<h4 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;array&#125; arr</span><br><span class=\"line\"> * @param &#123;array&#125; res</span><br><span class=\"line\"> * @return &#123;array&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var flatten = function (arr, res) &#123;</span><br><span class=\"line\">   for(let i in arr) &#123;</span><br><span class=\"line\">    if(arr[i] instanceof Array) &#123;</span><br><span class=\"line\">      test(arr[i],res)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      res.push(arr[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"算法：把十六进制的ip地址转换为十进制的","date":"2019-04-09T16:00:00.000Z","comments":1,"_content":"\n```\nfunction change(ip){\n  var temp = [];\n\tfor(var i=0;i<ip.length;i+=2){\n      temp.push(ip.substr(i,2))\n    }\n  return temp.map(function(value){\n    return parseInt(value,16);\n  }).join(\".\");\n}\nconsole.log(change(\"C0A80000\")); //\"192.168.0.0\"\n```\n拓展\n\n```\n在ip地址中，8位二进制取一个.\n且二进制的4位对应十六进制的1位\n因此\n8位二进制对应一个十进制整数\n2位十六进制对应一个十进制整数\n```\n","source":"_posts/算法/算法：把十六进制的ip地址转换为十进制的.md","raw":"---\ntitle: 算法：把十六进制的ip地址转换为十进制的\ndate: 2019-04-10\ntags: [算法]\ncategories: 算法\ncomments: true\n---\n\n```\nfunction change(ip){\n  var temp = [];\n\tfor(var i=0;i<ip.length;i+=2){\n      temp.push(ip.substr(i,2))\n    }\n  return temp.map(function(value){\n    return parseInt(value,16);\n  }).join(\".\");\n}\nconsole.log(change(\"C0A80000\")); //\"192.168.0.0\"\n```\n拓展\n\n```\n在ip地址中，8位二进制取一个.\n且二进制的4位对应十六进制的1位\n因此\n8位二进制对应一个十进制整数\n2位十六进制对应一个十进制整数\n```\n","slug":"算法/算法：把十六进制的ip地址转换为十进制的","published":1,"updated":"2022-07-22T08:27:10.405Z","layout":"post","photos":[],"link":"","_id":"cl5wb2ynx00fccj38k89u1wrl","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function change(ip)&#123;</span><br><span class=\"line\">  var temp = [];</span><br><span class=\"line\">\tfor(var i=0;i&lt;ip.length;i+=2)&#123;</span><br><span class=\"line\">      temp.push(ip.substr(i,2))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  return temp.map(function(value)&#123;</span><br><span class=\"line\">    return parseInt(value,16);</span><br><span class=\"line\">  &#125;).join(&quot;.&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(change(&quot;C0A80000&quot;)); //&quot;192.168.0.0&quot;</span><br></pre></td></tr></table></figure>\n<p>拓展</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在ip地址中，8位二进制取一个.</span><br><span class=\"line\">且二进制的4位对应十六进制的1位</span><br><span class=\"line\">因此</span><br><span class=\"line\">8位二进制对应一个十进制整数</span><br><span class=\"line\">2位十六进制对应一个十进制整数</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function change(ip)&#123;</span><br><span class=\"line\">  var temp = [];</span><br><span class=\"line\">\tfor(var i=0;i&lt;ip.length;i+=2)&#123;</span><br><span class=\"line\">      temp.push(ip.substr(i,2))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  return temp.map(function(value)&#123;</span><br><span class=\"line\">    return parseInt(value,16);</span><br><span class=\"line\">  &#125;).join(&quot;.&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(change(&quot;C0A80000&quot;)); //&quot;192.168.0.0&quot;</span><br></pre></td></tr></table></figure>\n<p>拓展</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在ip地址中，8位二进制取一个.</span><br><span class=\"line\">且二进制的4位对应十六进制的1位</span><br><span class=\"line\">因此</span><br><span class=\"line\">8位二进制对应一个十进制整数</span><br><span class=\"line\">2位十六进制对应一个十进制整数</span><br></pre></td></tr></table></figure>\n"},{"title":"算法：快速排序","date":"2019-04-08T16:00:00.000Z","comments":1,"_content":"\n排序分为交换排序、选择排序、插入排序、归并排序、基数排序   \n快速排序和冒泡排序数据交换排序\n\n首先，定义一个quickSort函数，它的参数是一个数组。\n\n```\nfunction quickSort(arr){\n    \n}\n```\n\n然后，检查数组的元素个数，如果小于等于1，就返回。\n\n```\nfunction quickSort(arr){\n    if(arr.length<=1){\n        return arr;\n    }\n}\n```\n\n接着，选择\"基准\"（pivot），并将其与原数组分离，再定义两个空数组，用来存放一左一右的两个子集。\n\n```\nfunction quickSort(arr){\n    if(arr.length<=1){\n        return arr;\n    }\n    var pivotIndex = Math.floor(arr.length/2);\n    var pivot = arr.splice(pivotIndex,1)[0];\n    var left = [];\n    var right = [];\n}\n```\n\n然后，开始遍历数组，小于\"基准\"的元素放入左边的子集，大于等于基准的元素放入右边的子集。\n\n```\nfunction quickSort(arr){\n    if(arr.length<=1){\n        return arr;\n    }\n    var pivotIndex = Math.floor(arr.length/2);\n    var pivot = arr.splice(pivotIndex,1)[0];\n    var left = [];\n    var right = [];\n    for(var i in arr){\n        if(arr[i] < pivot){\n            left.push(arr[i]);\n        }else{\n            right.push(arr[i]);\n        }\n    }\n}\n```\n\n最后，使用递归不断重复这个过程，就可以得到排序后的数组。\n```\nfunction quickSort(arr){\n    if(arr.length<=1){\n        return arr;\n    }\n    var pivotIndex = Math.floor(arr.length/2);\n    var pivot = arr.splice(pivotIndex,1)[0];\n    var left = [];\n    var right = [];\n    for(var i in arr){\n        if(arr[i] < pivot){\n            left.push(arr[i]);\n        }else{\n            right.push(arr[i]);\n        }\n    }\n    return quickSort(left).concat([pivot],quickSort(right));\n}\n```\n\n> 优化：选一个好的基准：随机选取三个数，排序取中\n\n> 时间复杂度：nlogn","source":"_posts/算法/算法：快速排序.md","raw":"---\ntitle: 算法：快速排序\ndate: 2019-04-09\ntags: [算法]\ncategories: 算法\ncomments: true\n---\n\n排序分为交换排序、选择排序、插入排序、归并排序、基数排序   \n快速排序和冒泡排序数据交换排序\n\n首先，定义一个quickSort函数，它的参数是一个数组。\n\n```\nfunction quickSort(arr){\n    \n}\n```\n\n然后，检查数组的元素个数，如果小于等于1，就返回。\n\n```\nfunction quickSort(arr){\n    if(arr.length<=1){\n        return arr;\n    }\n}\n```\n\n接着，选择\"基准\"（pivot），并将其与原数组分离，再定义两个空数组，用来存放一左一右的两个子集。\n\n```\nfunction quickSort(arr){\n    if(arr.length<=1){\n        return arr;\n    }\n    var pivotIndex = Math.floor(arr.length/2);\n    var pivot = arr.splice(pivotIndex,1)[0];\n    var left = [];\n    var right = [];\n}\n```\n\n然后，开始遍历数组，小于\"基准\"的元素放入左边的子集，大于等于基准的元素放入右边的子集。\n\n```\nfunction quickSort(arr){\n    if(arr.length<=1){\n        return arr;\n    }\n    var pivotIndex = Math.floor(arr.length/2);\n    var pivot = arr.splice(pivotIndex,1)[0];\n    var left = [];\n    var right = [];\n    for(var i in arr){\n        if(arr[i] < pivot){\n            left.push(arr[i]);\n        }else{\n            right.push(arr[i]);\n        }\n    }\n}\n```\n\n最后，使用递归不断重复这个过程，就可以得到排序后的数组。\n```\nfunction quickSort(arr){\n    if(arr.length<=1){\n        return arr;\n    }\n    var pivotIndex = Math.floor(arr.length/2);\n    var pivot = arr.splice(pivotIndex,1)[0];\n    var left = [];\n    var right = [];\n    for(var i in arr){\n        if(arr[i] < pivot){\n            left.push(arr[i]);\n        }else{\n            right.push(arr[i]);\n        }\n    }\n    return quickSort(left).concat([pivot],quickSort(right));\n}\n```\n\n> 优化：选一个好的基准：随机选取三个数，排序取中\n\n> 时间复杂度：nlogn","slug":"算法/算法：快速排序","published":1,"updated":"2022-07-22T08:27:10.406Z","layout":"post","photos":[],"link":"","_id":"cl5wb2yny00ffcj3822v4n2nn","content":"<p>排序分为交换排序、选择排序、插入排序、归并排序、基数排序<br>快速排序和冒泡排序数据交换排序</p>\n<p>首先，定义一个quickSort函数，它的参数是一个数组。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function quickSort(arr)&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后，检查数组的元素个数，如果小于等于1，就返回。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function quickSort(arr)&#123;</span><br><span class=\"line\">    if(arr.length&lt;=1)&#123;</span><br><span class=\"line\">        return arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接着，选择”基准”（pivot），并将其与原数组分离，再定义两个空数组，用来存放一左一右的两个子集。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function quickSort(arr)&#123;</span><br><span class=\"line\">    if(arr.length&lt;=1)&#123;</span><br><span class=\"line\">        return arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var pivotIndex = Math.floor(arr.length/2);</span><br><span class=\"line\">    var pivot = arr.splice(pivotIndex,1)[0];</span><br><span class=\"line\">    var left = [];</span><br><span class=\"line\">    var right = [];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后，开始遍历数组，小于”基准”的元素放入左边的子集，大于等于基准的元素放入右边的子集。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function quickSort(arr)&#123;</span><br><span class=\"line\">    if(arr.length&lt;=1)&#123;</span><br><span class=\"line\">        return arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var pivotIndex = Math.floor(arr.length/2);</span><br><span class=\"line\">    var pivot = arr.splice(pivotIndex,1)[0];</span><br><span class=\"line\">    var left = [];</span><br><span class=\"line\">    var right = [];</span><br><span class=\"line\">    for(var i in arr)&#123;</span><br><span class=\"line\">        if(arr[i] &lt; pivot)&#123;</span><br><span class=\"line\">            left.push(arr[i]);</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            right.push(arr[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后，使用递归不断重复这个过程，就可以得到排序后的数组。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function quickSort(arr)&#123;</span><br><span class=\"line\">    if(arr.length&lt;=1)&#123;</span><br><span class=\"line\">        return arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var pivotIndex = Math.floor(arr.length/2);</span><br><span class=\"line\">    var pivot = arr.splice(pivotIndex,1)[0];</span><br><span class=\"line\">    var left = [];</span><br><span class=\"line\">    var right = [];</span><br><span class=\"line\">    for(var i in arr)&#123;</span><br><span class=\"line\">        if(arr[i] &lt; pivot)&#123;</span><br><span class=\"line\">            left.push(arr[i]);</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            right.push(arr[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return quickSort(left).concat([pivot],quickSort(right));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>优化：选一个好的基准：随机选取三个数，排序取中</p>\n</blockquote>\n<blockquote>\n<p>时间复杂度：nlogn</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>排序分为交换排序、选择排序、插入排序、归并排序、基数排序<br>快速排序和冒泡排序数据交换排序</p>\n<p>首先，定义一个quickSort函数，它的参数是一个数组。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function quickSort(arr)&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后，检查数组的元素个数，如果小于等于1，就返回。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function quickSort(arr)&#123;</span><br><span class=\"line\">    if(arr.length&lt;=1)&#123;</span><br><span class=\"line\">        return arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接着，选择”基准”（pivot），并将其与原数组分离，再定义两个空数组，用来存放一左一右的两个子集。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function quickSort(arr)&#123;</span><br><span class=\"line\">    if(arr.length&lt;=1)&#123;</span><br><span class=\"line\">        return arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var pivotIndex = Math.floor(arr.length/2);</span><br><span class=\"line\">    var pivot = arr.splice(pivotIndex,1)[0];</span><br><span class=\"line\">    var left = [];</span><br><span class=\"line\">    var right = [];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后，开始遍历数组，小于”基准”的元素放入左边的子集，大于等于基准的元素放入右边的子集。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function quickSort(arr)&#123;</span><br><span class=\"line\">    if(arr.length&lt;=1)&#123;</span><br><span class=\"line\">        return arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var pivotIndex = Math.floor(arr.length/2);</span><br><span class=\"line\">    var pivot = arr.splice(pivotIndex,1)[0];</span><br><span class=\"line\">    var left = [];</span><br><span class=\"line\">    var right = [];</span><br><span class=\"line\">    for(var i in arr)&#123;</span><br><span class=\"line\">        if(arr[i] &lt; pivot)&#123;</span><br><span class=\"line\">            left.push(arr[i]);</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            right.push(arr[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后，使用递归不断重复这个过程，就可以得到排序后的数组。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function quickSort(arr)&#123;</span><br><span class=\"line\">    if(arr.length&lt;=1)&#123;</span><br><span class=\"line\">        return arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var pivotIndex = Math.floor(arr.length/2);</span><br><span class=\"line\">    var pivot = arr.splice(pivotIndex,1)[0];</span><br><span class=\"line\">    var left = [];</span><br><span class=\"line\">    var right = [];</span><br><span class=\"line\">    for(var i in arr)&#123;</span><br><span class=\"line\">        if(arr[i] &lt; pivot)&#123;</span><br><span class=\"line\">            left.push(arr[i]);</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            right.push(arr[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return quickSort(left).concat([pivot],quickSort(right));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>优化：选一个好的基准：随机选取三个数，排序取中</p>\n</blockquote>\n<blockquote>\n<p>时间复杂度：nlogn</p>\n</blockquote>\n"},{"title":"LeetCode：阶乘后的零","date":"2020-10-15T16:00:00.000Z","comments":1,"_content":"\n### 阶乘后的零\n给定一个整数 n，返回 n! 结果尾数中零的数量。\n\n### 测试用例\n\n```\n1. 3 // 0\n2. 6 // 1\n```\n\n### 解法一\n#### 思路\n- 3! = 3 * 2 * 1\n- 6! = 6 * 5 * 4 * 3 * 2 * 1\n- 10! = （5 * 2）* 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1\n- 每一个5都可以找到偶数配对，就相当于一个5可以产生一个0。\n- 找出阶乘中含有多少个因子5就可以了\n\n#### 算法\n\n```\n/**\n * @param {number} n\n * @return {number}\n */\nvar trailingZeroes = function(n) {\n    let count = 0;\n    for(let i = 5; i <= n; i++){\n        let temp = i;\n        while(temp % 5 === 0) {\n            count ++;\n            temp /=  5\n        }\n    }\n    return count;\n};\n```\n\n### 解法二\n#### 思路\n- 5 的因子一定是每隔 5 个数出现一次\n- 25 = 5 * 5, 125 = 5 * 5 * 5\n- 每隔 5 个数，出现一个 5，每隔 25 个数，出现 2 个 5，每隔 125 个数，出现 3 个 5...\n- 因此找出现了多少次五个数，当这个次数大于5时，证明n大于25，有多一个5，以此类推，125同理。\n- count = n / 5 + n / 25 + n / 125 ...\n\n#### 算法\n\n```\n/**\n * @param {number} n\n * @return {number}\n */\nvar trailingZeroes = function(n) {\n    let count = 0;\n    while (n > 0) {\n        n = Math.floor(n / 5);\n        count += n;\n    }\n    return count;\n};\n```","source":"_posts/算法/LeetCode：阶乘后的零.md","raw":"---\ntitle: LeetCode：阶乘后的零\ndate: 2020-10-16\ntags: [算法]\ncategories: 算法\ncomments: true\n---\n\n### 阶乘后的零\n给定一个整数 n，返回 n! 结果尾数中零的数量。\n\n### 测试用例\n\n```\n1. 3 // 0\n2. 6 // 1\n```\n\n### 解法一\n#### 思路\n- 3! = 3 * 2 * 1\n- 6! = 6 * 5 * 4 * 3 * 2 * 1\n- 10! = （5 * 2）* 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1\n- 每一个5都可以找到偶数配对，就相当于一个5可以产生一个0。\n- 找出阶乘中含有多少个因子5就可以了\n\n#### 算法\n\n```\n/**\n * @param {number} n\n * @return {number}\n */\nvar trailingZeroes = function(n) {\n    let count = 0;\n    for(let i = 5; i <= n; i++){\n        let temp = i;\n        while(temp % 5 === 0) {\n            count ++;\n            temp /=  5\n        }\n    }\n    return count;\n};\n```\n\n### 解法二\n#### 思路\n- 5 的因子一定是每隔 5 个数出现一次\n- 25 = 5 * 5, 125 = 5 * 5 * 5\n- 每隔 5 个数，出现一个 5，每隔 25 个数，出现 2 个 5，每隔 125 个数，出现 3 个 5...\n- 因此找出现了多少次五个数，当这个次数大于5时，证明n大于25，有多一个5，以此类推，125同理。\n- count = n / 5 + n / 25 + n / 125 ...\n\n#### 算法\n\n```\n/**\n * @param {number} n\n * @return {number}\n */\nvar trailingZeroes = function(n) {\n    let count = 0;\n    while (n > 0) {\n        n = Math.floor(n / 5);\n        count += n;\n    }\n    return count;\n};\n```","slug":"算法/LeetCode：阶乘后的零","published":1,"updated":"2022-07-22T08:27:10.573Z","layout":"post","photos":[],"link":"","_id":"cl5wb2yo000fjcj38m1untasr","content":"<h3 id=\"阶乘后的零\"><a href=\"#阶乘后的零\" class=\"headerlink\" title=\"阶乘后的零\"></a>阶乘后的零</h3><p>给定一个整数 n，返回 n! 结果尾数中零的数量。</p>\n<h3 id=\"测试用例\"><a href=\"#测试用例\" class=\"headerlink\" title=\"测试用例\"></a>测试用例</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 3 // 0</span><br><span class=\"line\">2. 6 // 1</span><br></pre></td></tr></table></figure>\n<h3 id=\"解法一\"><a href=\"#解法一\" class=\"headerlink\" title=\"解法一\"></a>解法一</h3><h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><ul>\n<li>3! = 3 <em> 2 </em> 1</li>\n<li>6! = 6 <em> 5 </em> 4 <em> 3 </em> 2 * 1</li>\n<li>10! = （5 <em> 2）</em> 8 <em> 7 </em> 6 <em> 5 </em> 4 <em> 3 </em> 2 * 1</li>\n<li>每一个5都可以找到偶数配对，就相当于一个5可以产生一个0。</li>\n<li>找出阶乘中含有多少个因子5就可以了</li>\n</ul>\n<h4 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;number&#125; n</span><br><span class=\"line\"> * @return &#123;number&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var trailingZeroes = function(n) &#123;</span><br><span class=\"line\">    let count = 0;</span><br><span class=\"line\">    for(let i = 5; i &lt;= n; i++)&#123;</span><br><span class=\"line\">        let temp = i;</span><br><span class=\"line\">        while(temp % 5 === 0) &#123;</span><br><span class=\"line\">            count ++;</span><br><span class=\"line\">            temp /=  5</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return count;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"解法二\"><a href=\"#解法二\" class=\"headerlink\" title=\"解法二\"></a>解法二</h3><h4 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h4><ul>\n<li>5 的因子一定是每隔 5 个数出现一次</li>\n<li>25 = 5 <em> 5, 125 = 5 </em> 5 * 5</li>\n<li>每隔 5 个数，出现一个 5，每隔 25 个数，出现 2 个 5，每隔 125 个数，出现 3 个 5…</li>\n<li>因此找出现了多少次五个数，当这个次数大于5时，证明n大于25，有多一个5，以此类推，125同理。</li>\n<li>count = n / 5 + n / 25 + n / 125 …</li>\n</ul>\n<h4 id=\"算法-1\"><a href=\"#算法-1\" class=\"headerlink\" title=\"算法\"></a>算法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;number&#125; n</span><br><span class=\"line\"> * @return &#123;number&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var trailingZeroes = function(n) &#123;</span><br><span class=\"line\">    let count = 0;</span><br><span class=\"line\">    while (n &gt; 0) &#123;</span><br><span class=\"line\">        n = Math.floor(n / 5);</span><br><span class=\"line\">        count += n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return count;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"阶乘后的零\"><a href=\"#阶乘后的零\" class=\"headerlink\" title=\"阶乘后的零\"></a>阶乘后的零</h3><p>给定一个整数 n，返回 n! 结果尾数中零的数量。</p>\n<h3 id=\"测试用例\"><a href=\"#测试用例\" class=\"headerlink\" title=\"测试用例\"></a>测试用例</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 3 // 0</span><br><span class=\"line\">2. 6 // 1</span><br></pre></td></tr></table></figure>\n<h3 id=\"解法一\"><a href=\"#解法一\" class=\"headerlink\" title=\"解法一\"></a>解法一</h3><h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><ul>\n<li>3! = 3 <em> 2 </em> 1</li>\n<li>6! = 6 <em> 5 </em> 4 <em> 3 </em> 2 * 1</li>\n<li>10! = （5 <em> 2）</em> 8 <em> 7 </em> 6 <em> 5 </em> 4 <em> 3 </em> 2 * 1</li>\n<li>每一个5都可以找到偶数配对，就相当于一个5可以产生一个0。</li>\n<li>找出阶乘中含有多少个因子5就可以了</li>\n</ul>\n<h4 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;number&#125; n</span><br><span class=\"line\"> * @return &#123;number&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var trailingZeroes = function(n) &#123;</span><br><span class=\"line\">    let count = 0;</span><br><span class=\"line\">    for(let i = 5; i &lt;= n; i++)&#123;</span><br><span class=\"line\">        let temp = i;</span><br><span class=\"line\">        while(temp % 5 === 0) &#123;</span><br><span class=\"line\">            count ++;</span><br><span class=\"line\">            temp /=  5</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return count;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"解法二\"><a href=\"#解法二\" class=\"headerlink\" title=\"解法二\"></a>解法二</h3><h4 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h4><ul>\n<li>5 的因子一定是每隔 5 个数出现一次</li>\n<li>25 = 5 <em> 5, 125 = 5 </em> 5 * 5</li>\n<li>每隔 5 个数，出现一个 5，每隔 25 个数，出现 2 个 5，每隔 125 个数，出现 3 个 5…</li>\n<li>因此找出现了多少次五个数，当这个次数大于5时，证明n大于25，有多一个5，以此类推，125同理。</li>\n<li>count = n / 5 + n / 25 + n / 125 …</li>\n</ul>\n<h4 id=\"算法-1\"><a href=\"#算法-1\" class=\"headerlink\" title=\"算法\"></a>算法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;number&#125; n</span><br><span class=\"line\"> * @return &#123;number&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var trailingZeroes = function(n) &#123;</span><br><span class=\"line\">    let count = 0;</span><br><span class=\"line\">    while (n &gt; 0) &#123;</span><br><span class=\"line\">        n = Math.floor(n / 5);</span><br><span class=\"line\">        count += n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return count;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"算法：青蛙跳台阶和斐波那契数列","date":"2020-03-16T16:00:00.000Z","comments":1,"_content":"\n### 简单\n一次跳一层或两层，求跳上一个n级的台阶总共有多少种跳法。     \n因为n级台阶，第一步有n种跳法：跳1级、跳2级    \n跳1级，剩下n-1级，则剩下跳法是f(n-1)    \n跳2级，剩下n-2级，则剩下跳法是f(n-2)   \n\nf(0)=0    \nf(1)=1    \nf(2)=2   \nf(n)=f(n-1)+f(n-2)\n\n```\nfunction jump(n){\n    if(n==0){\n        return 0;\n    }else if(n==1){\n        return 1;\n    }else if(n==2){\n        return 2;\n    }else{\n        return jump(n-1)+jump(n-2);\n    }\n}\n```\n### 复杂\n一次可以跳上1级台阶，也可以跳上2级……也可以跳上n级。求跳上一个n级的台阶总共有多少种跳法。     \n因为n级台阶，第一步有n种跳法：跳1级、跳2级、到跳n级     \n跳1级，剩下n-1级，则剩下跳法是f(n-1)    \n跳2级，剩下n-2级，则剩下跳法是f(n-2)    \n所以f(n)=f(n-1)+f(n-2)+...+f(1)    \n因为f(n-1)=f(n-2)+f(n-3)+...+f(1)    \n所以f(n)=2*f(n-1) \n\n```\nfunction jumpII(number)\n{\n    if(number == 0){\n        return 0;\n    }else if(number == 1){\n        return 1;\n    }\n    return 2*jumpII(number-1)\n}\n```\n\n\n### 斐波那契数列\n斐波那契数列，又称黄金分割数列、因数学家列昂纳多·斐波那契以兔子繁殖为例子而引入，故又称为“兔子数列”，指的是这样一个数列：1、1、2、3、5、8、13、21、34、……\n#### 性能优化之缓存\n- 缓存: 存储数据的容器(cache)\n- 在js中, 可以使用数组或者是对象进行存储数据,用键存储值,这样就可以实现既能存值也能取值\n\n#### 用缓存的基本思路\n1. 创建一个空对象，作为缓存的容器。\n2. 首先去缓存容器中查看缓存中是否有对应的数据，如果有，直接取出来使用。\n3. 如果没有，就先计算结果，然后把结果存储到缓存容器中，方便下次复用。\n```\nvar cache = { };\nvar count = 0;\nfunction fib(n){\n    count++;\n    if(n === 1 || n === 2){\n        return 1;\n    }\n    if(cache[n]){\n        return cache[n];\n    }else{\n        var ret = fib(n - 1) + fib(n - 2);\n        cache[n] = ret;\n        return ret;\n    }\n}\n\nconsole.log(fib(10));\nconsole.log(\"fib函数调用的次数 \" + count);\n```\n#### 总结\n- 缓存: 存数据(该案例中,用键存月份,值存的对数)\n- 在js中,缓存中如何表示, 对象 || 数组\n\n","source":"_posts/算法/算法：青蛙跳台阶和斐波那契数列.md","raw":"---\ntitle: 算法：青蛙跳台阶和斐波那契数列\ndate: 2020-03-17\ntags: [算法]\ncategories: 算法\ncomments: true\n---\n\n### 简单\n一次跳一层或两层，求跳上一个n级的台阶总共有多少种跳法。     \n因为n级台阶，第一步有n种跳法：跳1级、跳2级    \n跳1级，剩下n-1级，则剩下跳法是f(n-1)    \n跳2级，剩下n-2级，则剩下跳法是f(n-2)   \n\nf(0)=0    \nf(1)=1    \nf(2)=2   \nf(n)=f(n-1)+f(n-2)\n\n```\nfunction jump(n){\n    if(n==0){\n        return 0;\n    }else if(n==1){\n        return 1;\n    }else if(n==2){\n        return 2;\n    }else{\n        return jump(n-1)+jump(n-2);\n    }\n}\n```\n### 复杂\n一次可以跳上1级台阶，也可以跳上2级……也可以跳上n级。求跳上一个n级的台阶总共有多少种跳法。     \n因为n级台阶，第一步有n种跳法：跳1级、跳2级、到跳n级     \n跳1级，剩下n-1级，则剩下跳法是f(n-1)    \n跳2级，剩下n-2级，则剩下跳法是f(n-2)    \n所以f(n)=f(n-1)+f(n-2)+...+f(1)    \n因为f(n-1)=f(n-2)+f(n-3)+...+f(1)    \n所以f(n)=2*f(n-1) \n\n```\nfunction jumpII(number)\n{\n    if(number == 0){\n        return 0;\n    }else if(number == 1){\n        return 1;\n    }\n    return 2*jumpII(number-1)\n}\n```\n\n\n### 斐波那契数列\n斐波那契数列，又称黄金分割数列、因数学家列昂纳多·斐波那契以兔子繁殖为例子而引入，故又称为“兔子数列”，指的是这样一个数列：1、1、2、3、5、8、13、21、34、……\n#### 性能优化之缓存\n- 缓存: 存储数据的容器(cache)\n- 在js中, 可以使用数组或者是对象进行存储数据,用键存储值,这样就可以实现既能存值也能取值\n\n#### 用缓存的基本思路\n1. 创建一个空对象，作为缓存的容器。\n2. 首先去缓存容器中查看缓存中是否有对应的数据，如果有，直接取出来使用。\n3. 如果没有，就先计算结果，然后把结果存储到缓存容器中，方便下次复用。\n```\nvar cache = { };\nvar count = 0;\nfunction fib(n){\n    count++;\n    if(n === 1 || n === 2){\n        return 1;\n    }\n    if(cache[n]){\n        return cache[n];\n    }else{\n        var ret = fib(n - 1) + fib(n - 2);\n        cache[n] = ret;\n        return ret;\n    }\n}\n\nconsole.log(fib(10));\nconsole.log(\"fib函数调用的次数 \" + count);\n```\n#### 总结\n- 缓存: 存数据(该案例中,用键存月份,值存的对数)\n- 在js中,缓存中如何表示, 对象 || 数组\n\n","slug":"算法/算法：青蛙跳台阶和斐波那契数列","published":1,"updated":"2022-07-22T08:27:10.424Z","layout":"post","photos":[],"link":"","_id":"cl5wb2yo000fmcj38hjkv93cr","content":"<h3 id=\"简单\"><a href=\"#简单\" class=\"headerlink\" title=\"简单\"></a>简单</h3><p>一次跳一层或两层，求跳上一个n级的台阶总共有多少种跳法。<br>因为n级台阶，第一步有n种跳法：跳1级、跳2级<br>跳1级，剩下n-1级，则剩下跳法是f(n-1)<br>跳2级，剩下n-2级，则剩下跳法是f(n-2)   </p>\n<p>f(0)=0<br>f(1)=1<br>f(2)=2<br>f(n)=f(n-1)+f(n-2)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function jump(n)&#123;</span><br><span class=\"line\">    if(n==0)&#123;</span><br><span class=\"line\">        return 0;</span><br><span class=\"line\">    &#125;else if(n==1)&#123;</span><br><span class=\"line\">        return 1;</span><br><span class=\"line\">    &#125;else if(n==2)&#123;</span><br><span class=\"line\">        return 2;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        return jump(n-1)+jump(n-2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"复杂\"><a href=\"#复杂\" class=\"headerlink\" title=\"复杂\"></a>复杂</h3><p>一次可以跳上1级台阶，也可以跳上2级……也可以跳上n级。求跳上一个n级的台阶总共有多少种跳法。<br>因为n级台阶，第一步有n种跳法：跳1级、跳2级、到跳n级<br>跳1级，剩下n-1级，则剩下跳法是f(n-1)<br>跳2级，剩下n-2级，则剩下跳法是f(n-2)<br>所以f(n)=f(n-1)+f(n-2)+…+f(1)<br>因为f(n-1)=f(n-2)+f(n-3)+…+f(1)<br>所以f(n)=2*f(n-1) </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function jumpII(number)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if(number == 0)&#123;</span><br><span class=\"line\">        return 0;</span><br><span class=\"line\">    &#125;else if(number == 1)&#123;</span><br><span class=\"line\">        return 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 2*jumpII(number-1)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"斐波那契数列\"><a href=\"#斐波那契数列\" class=\"headerlink\" title=\"斐波那契数列\"></a>斐波那契数列</h3><p>斐波那契数列，又称黄金分割数列、因数学家列昂纳多·斐波那契以兔子繁殖为例子而引入，故又称为“兔子数列”，指的是这样一个数列：1、1、2、3、5、8、13、21、34、……</p>\n<h4 id=\"性能优化之缓存\"><a href=\"#性能优化之缓存\" class=\"headerlink\" title=\"性能优化之缓存\"></a>性能优化之缓存</h4><ul>\n<li>缓存: 存储数据的容器(cache)</li>\n<li>在js中, 可以使用数组或者是对象进行存储数据,用键存储值,这样就可以实现既能存值也能取值</li>\n</ul>\n<h4 id=\"用缓存的基本思路\"><a href=\"#用缓存的基本思路\" class=\"headerlink\" title=\"用缓存的基本思路\"></a>用缓存的基本思路</h4><ol>\n<li>创建一个空对象，作为缓存的容器。</li>\n<li>首先去缓存容器中查看缓存中是否有对应的数据，如果有，直接取出来使用。</li>\n<li>如果没有，就先计算结果，然后把结果存储到缓存容器中，方便下次复用。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var cache = &#123; &#125;;</span><br><span class=\"line\">var count = 0;</span><br><span class=\"line\">function fib(n)&#123;</span><br><span class=\"line\">    count++;</span><br><span class=\"line\">    if(n === 1 || n === 2)&#123;</span><br><span class=\"line\">        return 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(cache[n])&#123;</span><br><span class=\"line\">        return cache[n];</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        var ret = fib(n - 1) + fib(n - 2);</span><br><span class=\"line\">        cache[n] = ret;</span><br><span class=\"line\">        return ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(fib(10));</span><br><span class=\"line\">console.log(&quot;fib函数调用的次数 &quot; + count);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ul>\n<li>缓存: 存数据(该案例中,用键存月份,值存的对数)</li>\n<li>在js中,缓存中如何表示, 对象 || 数组</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"简单\"><a href=\"#简单\" class=\"headerlink\" title=\"简单\"></a>简单</h3><p>一次跳一层或两层，求跳上一个n级的台阶总共有多少种跳法。<br>因为n级台阶，第一步有n种跳法：跳1级、跳2级<br>跳1级，剩下n-1级，则剩下跳法是f(n-1)<br>跳2级，剩下n-2级，则剩下跳法是f(n-2)   </p>\n<p>f(0)=0<br>f(1)=1<br>f(2)=2<br>f(n)=f(n-1)+f(n-2)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function jump(n)&#123;</span><br><span class=\"line\">    if(n==0)&#123;</span><br><span class=\"line\">        return 0;</span><br><span class=\"line\">    &#125;else if(n==1)&#123;</span><br><span class=\"line\">        return 1;</span><br><span class=\"line\">    &#125;else if(n==2)&#123;</span><br><span class=\"line\">        return 2;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        return jump(n-1)+jump(n-2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"复杂\"><a href=\"#复杂\" class=\"headerlink\" title=\"复杂\"></a>复杂</h3><p>一次可以跳上1级台阶，也可以跳上2级……也可以跳上n级。求跳上一个n级的台阶总共有多少种跳法。<br>因为n级台阶，第一步有n种跳法：跳1级、跳2级、到跳n级<br>跳1级，剩下n-1级，则剩下跳法是f(n-1)<br>跳2级，剩下n-2级，则剩下跳法是f(n-2)<br>所以f(n)=f(n-1)+f(n-2)+…+f(1)<br>因为f(n-1)=f(n-2)+f(n-3)+…+f(1)<br>所以f(n)=2*f(n-1) </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function jumpII(number)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if(number == 0)&#123;</span><br><span class=\"line\">        return 0;</span><br><span class=\"line\">    &#125;else if(number == 1)&#123;</span><br><span class=\"line\">        return 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 2*jumpII(number-1)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"斐波那契数列\"><a href=\"#斐波那契数列\" class=\"headerlink\" title=\"斐波那契数列\"></a>斐波那契数列</h3><p>斐波那契数列，又称黄金分割数列、因数学家列昂纳多·斐波那契以兔子繁殖为例子而引入，故又称为“兔子数列”，指的是这样一个数列：1、1、2、3、5、8、13、21、34、……</p>\n<h4 id=\"性能优化之缓存\"><a href=\"#性能优化之缓存\" class=\"headerlink\" title=\"性能优化之缓存\"></a>性能优化之缓存</h4><ul>\n<li>缓存: 存储数据的容器(cache)</li>\n<li>在js中, 可以使用数组或者是对象进行存储数据,用键存储值,这样就可以实现既能存值也能取值</li>\n</ul>\n<h4 id=\"用缓存的基本思路\"><a href=\"#用缓存的基本思路\" class=\"headerlink\" title=\"用缓存的基本思路\"></a>用缓存的基本思路</h4><ol>\n<li>创建一个空对象，作为缓存的容器。</li>\n<li>首先去缓存容器中查看缓存中是否有对应的数据，如果有，直接取出来使用。</li>\n<li>如果没有，就先计算结果，然后把结果存储到缓存容器中，方便下次复用。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var cache = &#123; &#125;;</span><br><span class=\"line\">var count = 0;</span><br><span class=\"line\">function fib(n)&#123;</span><br><span class=\"line\">    count++;</span><br><span class=\"line\">    if(n === 1 || n === 2)&#123;</span><br><span class=\"line\">        return 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(cache[n])&#123;</span><br><span class=\"line\">        return cache[n];</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        var ret = fib(n - 1) + fib(n - 2);</span><br><span class=\"line\">        cache[n] = ret;</span><br><span class=\"line\">        return ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(fib(10));</span><br><span class=\"line\">console.log(&quot;fib函数调用的次数 &quot; + count);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ul>\n<li>缓存: 存数据(该案例中,用键存月份,值存的对数)</li>\n<li>在js中,缓存中如何表示, 对象 || 数组</li>\n</ul>\n"},{"title":"算法：实现给数字添加千分位符的方法","date":"2019-03-15T16:00:00.000Z","comments":1,"_content":"\n### toLocaleString方法\n\n```\nconst num = 12345678;\nnum.toLocaleString();\n```\n\ntoLacalString：返回这个数字在特定语言环境下的表示字符串。\n\n在没有指定区域的基本使用时，返回使用默认的语言环境和默认选项格式化的字符串。\n\n### 正则表达式\n\n```\nconst num = 12345678;\nvar reg=/\\d{1,3}(?=(\\d{3})+$)/g;\nnum.replace(reg,\"$&,\");\n\n1. 正则表达式 \\d{1,3}(?=(\\d{3})+$)  表示前面有1~3个数字，后面的至少由一组3个数字结尾。\n2. ?=表示正向引用，可以作为匹配的条件，但匹配到的内容不获取，并且作为下一次查询的开始。\n3. $& 表示与正则表达式相匹配的内容。\n```\n","source":"_posts/算法/算法：实现给数字添加千分位符的方法.md","raw":"---\ntitle: 算法：实现给数字添加千分位符的方法\ndate: 2019-03-16\ntags: [算法]\ncategories: 算法\ncomments: true\n---\n\n### toLocaleString方法\n\n```\nconst num = 12345678;\nnum.toLocaleString();\n```\n\ntoLacalString：返回这个数字在特定语言环境下的表示字符串。\n\n在没有指定区域的基本使用时，返回使用默认的语言环境和默认选项格式化的字符串。\n\n### 正则表达式\n\n```\nconst num = 12345678;\nvar reg=/\\d{1,3}(?=(\\d{3})+$)/g;\nnum.replace(reg,\"$&,\");\n\n1. 正则表达式 \\d{1,3}(?=(\\d{3})+$)  表示前面有1~3个数字，后面的至少由一组3个数字结尾。\n2. ?=表示正向引用，可以作为匹配的条件，但匹配到的内容不获取，并且作为下一次查询的开始。\n3. $& 表示与正则表达式相匹配的内容。\n```\n","slug":"算法/算法：实现给数字添加千分位符的方法","published":1,"updated":"2022-07-22T09:50:38.865Z","layout":"post","photos":[],"link":"","_id":"cl5wb2yo100focj38h0xzzwut","content":"<h3 id=\"toLocaleString方法\"><a href=\"#toLocaleString方法\" class=\"headerlink\" title=\"toLocaleString方法\"></a>toLocaleString方法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const num = 12345678;</span><br><span class=\"line\">num.toLocaleString();</span><br></pre></td></tr></table></figure>\n<p>toLacalString：返回这个数字在特定语言环境下的表示字符串。</p>\n<p>在没有指定区域的基本使用时，返回使用默认的语言环境和默认选项格式化的字符串。</p>\n<h3 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const num = 12345678;</span><br><span class=\"line\">var reg=/\\d&#123;1,3&#125;(?=(\\d&#123;3&#125;)+$)/g;</span><br><span class=\"line\">num.replace(reg,&quot;$&amp;,&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">1. 正则表达式 \\d&#123;1,3&#125;(?=(\\d&#123;3&#125;)+$)  表示前面有1~3个数字，后面的至少由一组3个数字结尾。</span><br><span class=\"line\">2. ?=表示正向引用，可以作为匹配的条件，但匹配到的内容不获取，并且作为下一次查询的开始。</span><br><span class=\"line\">3. $&amp; 表示与正则表达式相匹配的内容。</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"toLocaleString方法\"><a href=\"#toLocaleString方法\" class=\"headerlink\" title=\"toLocaleString方法\"></a>toLocaleString方法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const num = 12345678;</span><br><span class=\"line\">num.toLocaleString();</span><br></pre></td></tr></table></figure>\n<p>toLacalString：返回这个数字在特定语言环境下的表示字符串。</p>\n<p>在没有指定区域的基本使用时，返回使用默认的语言环境和默认选项格式化的字符串。</p>\n<h3 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const num = 12345678;</span><br><span class=\"line\">var reg=/\\d&#123;1,3&#125;(?=(\\d&#123;3&#125;)+$)/g;</span><br><span class=\"line\">num.replace(reg,&quot;$&amp;,&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">1. 正则表达式 \\d&#123;1,3&#125;(?=(\\d&#123;3&#125;)+$)  表示前面有1~3个数字，后面的至少由一组3个数字结尾。</span><br><span class=\"line\">2. ?=表示正向引用，可以作为匹配的条件，但匹配到的内容不获取，并且作为下一次查询的开始。</span><br><span class=\"line\">3. $&amp; 表示与正则表达式相匹配的内容。</span><br></pre></td></tr></table></figure>\n"},{"title":"计网：TCP","date":"2020-05-13T16:00:00.000Z","comments":1,"_content":"\n\n### TCP和UDP\n- 都是运输层协议\n- tcp有连接，可靠：数据包校验、对失序数据包重排序、丢弃重复数据、应答机制、超时重传、流量控制。\n- udp无连接，快。只是传输数据，不管服务器是否收到。\n\n### TCP拥塞控制\n防止过多数据注入到网络中，这样可以使网络中的路由器或链路不致过载。\n- 慢开始\n\n把初始拥塞窗口cwnd设置为1或2个发送方的最大报文段（SMSS），由小到大逐渐增大发送窗口。每经过一个传输轮次，cwnd加倍。\n\n把拥塞窗口允许发送的报文段都连续发送出去，收到对已发送的最后一个字节的确认，为一个传输轮次，时间为一个往返时间。\n\n- 拥塞避免\n\n让拥塞窗口缓慢增大，没经过一个往返时间RTT就加1\n\n- 快重传\n\n让发送方尽早知道发生了个别报文段丢失\n\n- 快恢复\n\n发送方知道丢失报文段，则不启动慢开始，用快恢复，调整门限值cwnd/2.\n\n#### TCP建立连接——三次握手\n1. 客户端发送连接请求报文，将SYN位置设为1\n2. 服务器端收到报文后回复ACK+SYN报文。\n3. 客户端接收到报文后也向服务器端发送ACK报文，这个报文发送完毕后，完成了三次握手。\n> 通过三次握手确认双方收发功能都正常，四次也可以但是显得比较多余。\n\n#### TCP释放连接——四次挥手（断开连接）\n1. 客户端向服务器传送断开的请求包。客户端进入FIN_WAIT_1状态。\n2. 服务器端确定收到断开的请求，回复ACK报文。客户端进入FIN_WAIT_2状态。\n3. 服务器端向客户端FIN报文，请求关闭连接。服务器端进入LAST_ACK状态。\n4. 客户端收到FIN报文后，回复ACK报文。客户端进入TIME_WAIT状态。服务器端收到ACK报文就会关闭连接（不然一直处于LAST_ACK状态），客户端没有收到服务器端的回复，证明服务器端已关闭连接，客户端也可以关闭连接了。\n","source":"_posts/计网/计网：TCP.md","raw":"---\ntitle: 计网：TCP\ndate: 2020-05-14\ntags: [计网]\ncategories: 计网\ncomments: true\n---\n\n\n### TCP和UDP\n- 都是运输层协议\n- tcp有连接，可靠：数据包校验、对失序数据包重排序、丢弃重复数据、应答机制、超时重传、流量控制。\n- udp无连接，快。只是传输数据，不管服务器是否收到。\n\n### TCP拥塞控制\n防止过多数据注入到网络中，这样可以使网络中的路由器或链路不致过载。\n- 慢开始\n\n把初始拥塞窗口cwnd设置为1或2个发送方的最大报文段（SMSS），由小到大逐渐增大发送窗口。每经过一个传输轮次，cwnd加倍。\n\n把拥塞窗口允许发送的报文段都连续发送出去，收到对已发送的最后一个字节的确认，为一个传输轮次，时间为一个往返时间。\n\n- 拥塞避免\n\n让拥塞窗口缓慢增大，没经过一个往返时间RTT就加1\n\n- 快重传\n\n让发送方尽早知道发生了个别报文段丢失\n\n- 快恢复\n\n发送方知道丢失报文段，则不启动慢开始，用快恢复，调整门限值cwnd/2.\n\n#### TCP建立连接——三次握手\n1. 客户端发送连接请求报文，将SYN位置设为1\n2. 服务器端收到报文后回复ACK+SYN报文。\n3. 客户端接收到报文后也向服务器端发送ACK报文，这个报文发送完毕后，完成了三次握手。\n> 通过三次握手确认双方收发功能都正常，四次也可以但是显得比较多余。\n\n#### TCP释放连接——四次挥手（断开连接）\n1. 客户端向服务器传送断开的请求包。客户端进入FIN_WAIT_1状态。\n2. 服务器端确定收到断开的请求，回复ACK报文。客户端进入FIN_WAIT_2状态。\n3. 服务器端向客户端FIN报文，请求关闭连接。服务器端进入LAST_ACK状态。\n4. 客户端收到FIN报文后，回复ACK报文。客户端进入TIME_WAIT状态。服务器端收到ACK报文就会关闭连接（不然一直处于LAST_ACK状态），客户端没有收到服务器端的回复，证明服务器端已关闭连接，客户端也可以关闭连接了。\n","slug":"计网/计网：TCP","published":1,"updated":"2022-07-22T07:59:02.298Z","layout":"post","photos":[],"link":"","_id":"cl5wb2yo300fscj38rc1w5poz","content":"<h3 id=\"TCP和UDP\"><a href=\"#TCP和UDP\" class=\"headerlink\" title=\"TCP和UDP\"></a>TCP和UDP</h3><ul>\n<li>都是运输层协议</li>\n<li>tcp有连接，可靠：数据包校验、对失序数据包重排序、丢弃重复数据、应答机制、超时重传、流量控制。</li>\n<li>udp无连接，快。只是传输数据，不管服务器是否收到。</li>\n</ul>\n<h3 id=\"TCP拥塞控制\"><a href=\"#TCP拥塞控制\" class=\"headerlink\" title=\"TCP拥塞控制\"></a>TCP拥塞控制</h3><p>防止过多数据注入到网络中，这样可以使网络中的路由器或链路不致过载。</p>\n<ul>\n<li>慢开始</li>\n</ul>\n<p>把初始拥塞窗口cwnd设置为1或2个发送方的最大报文段（SMSS），由小到大逐渐增大发送窗口。每经过一个传输轮次，cwnd加倍。</p>\n<p>把拥塞窗口允许发送的报文段都连续发送出去，收到对已发送的最后一个字节的确认，为一个传输轮次，时间为一个往返时间。</p>\n<ul>\n<li>拥塞避免</li>\n</ul>\n<p>让拥塞窗口缓慢增大，没经过一个往返时间RTT就加1</p>\n<ul>\n<li>快重传</li>\n</ul>\n<p>让发送方尽早知道发生了个别报文段丢失</p>\n<ul>\n<li>快恢复</li>\n</ul>\n<p>发送方知道丢失报文段，则不启动慢开始，用快恢复，调整门限值cwnd/2.</p>\n<h4 id=\"TCP建立连接——三次握手\"><a href=\"#TCP建立连接——三次握手\" class=\"headerlink\" title=\"TCP建立连接——三次握手\"></a>TCP建立连接——三次握手</h4><ol>\n<li>客户端发送连接请求报文，将SYN位置设为1</li>\n<li>服务器端收到报文后回复ACK+SYN报文。</li>\n<li>客户端接收到报文后也向服务器端发送ACK报文，这个报文发送完毕后，完成了三次握手。<blockquote>\n<p>通过三次握手确认双方收发功能都正常，四次也可以但是显得比较多余。</p>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"TCP释放连接——四次挥手（断开连接）\"><a href=\"#TCP释放连接——四次挥手（断开连接）\" class=\"headerlink\" title=\"TCP释放连接——四次挥手（断开连接）\"></a>TCP释放连接——四次挥手（断开连接）</h4><ol>\n<li>客户端向服务器传送断开的请求包。客户端进入FIN_WAIT_1状态。</li>\n<li>服务器端确定收到断开的请求，回复ACK报文。客户端进入FIN_WAIT_2状态。</li>\n<li>服务器端向客户端FIN报文，请求关闭连接。服务器端进入LAST_ACK状态。</li>\n<li>客户端收到FIN报文后，回复ACK报文。客户端进入TIME_WAIT状态。服务器端收到ACK报文就会关闭连接（不然一直处于LAST_ACK状态），客户端没有收到服务器端的回复，证明服务器端已关闭连接，客户端也可以关闭连接了。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"TCP和UDP\"><a href=\"#TCP和UDP\" class=\"headerlink\" title=\"TCP和UDP\"></a>TCP和UDP</h3><ul>\n<li>都是运输层协议</li>\n<li>tcp有连接，可靠：数据包校验、对失序数据包重排序、丢弃重复数据、应答机制、超时重传、流量控制。</li>\n<li>udp无连接，快。只是传输数据，不管服务器是否收到。</li>\n</ul>\n<h3 id=\"TCP拥塞控制\"><a href=\"#TCP拥塞控制\" class=\"headerlink\" title=\"TCP拥塞控制\"></a>TCP拥塞控制</h3><p>防止过多数据注入到网络中，这样可以使网络中的路由器或链路不致过载。</p>\n<ul>\n<li>慢开始</li>\n</ul>\n<p>把初始拥塞窗口cwnd设置为1或2个发送方的最大报文段（SMSS），由小到大逐渐增大发送窗口。每经过一个传输轮次，cwnd加倍。</p>\n<p>把拥塞窗口允许发送的报文段都连续发送出去，收到对已发送的最后一个字节的确认，为一个传输轮次，时间为一个往返时间。</p>\n<ul>\n<li>拥塞避免</li>\n</ul>\n<p>让拥塞窗口缓慢增大，没经过一个往返时间RTT就加1</p>\n<ul>\n<li>快重传</li>\n</ul>\n<p>让发送方尽早知道发生了个别报文段丢失</p>\n<ul>\n<li>快恢复</li>\n</ul>\n<p>发送方知道丢失报文段，则不启动慢开始，用快恢复，调整门限值cwnd/2.</p>\n<h4 id=\"TCP建立连接——三次握手\"><a href=\"#TCP建立连接——三次握手\" class=\"headerlink\" title=\"TCP建立连接——三次握手\"></a>TCP建立连接——三次握手</h4><ol>\n<li>客户端发送连接请求报文，将SYN位置设为1</li>\n<li>服务器端收到报文后回复ACK+SYN报文。</li>\n<li>客户端接收到报文后也向服务器端发送ACK报文，这个报文发送完毕后，完成了三次握手。<blockquote>\n<p>通过三次握手确认双方收发功能都正常，四次也可以但是显得比较多余。</p>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"TCP释放连接——四次挥手（断开连接）\"><a href=\"#TCP释放连接——四次挥手（断开连接）\" class=\"headerlink\" title=\"TCP释放连接——四次挥手（断开连接）\"></a>TCP释放连接——四次挥手（断开连接）</h4><ol>\n<li>客户端向服务器传送断开的请求包。客户端进入FIN_WAIT_1状态。</li>\n<li>服务器端确定收到断开的请求，回复ACK报文。客户端进入FIN_WAIT_2状态。</li>\n<li>服务器端向客户端FIN报文，请求关闭连接。服务器端进入LAST_ACK状态。</li>\n<li>客户端收到FIN报文后，回复ACK报文。客户端进入TIME_WAIT状态。服务器端收到ACK报文就会关闭连接（不然一直处于LAST_ACK状态），客户端没有收到服务器端的回复，证明服务器端已关闭连接，客户端也可以关闭连接了。</li>\n</ol>\n"},{"title":"算法：n数之和","date":"2020-08-09T16:00:00.000Z","comments":1,"_content":"\n## 两数之和为0\n### 题目\n给定一个不重复的数字数组，找出该数组中两个数之和等于0的所有情况。\n\n### 测试用例\n\n```\n1. [1,2,3,-1] // [[1,-1]]\n2. [1,2,3,-3,-1] // [[1,1],[3,-3]]\n```\n\n### 解法\n#### 思路\n- 数组长度少于2则直接返回\n- 取数组首元素，与剩余元素比较是否相加为0，若为0取该值，拼接为数组，否则undefined\n- 递归剩余元素，将得到的返回值拼接，对于undefined的值不拼接\n\n#### 算法\n\n```\n/**\n * @param {array} arr\n * @return {array}\n */\nvar addUpToZero = function (arr) {\n    if(arr.length < 2) {\n        return;\n    }\n    var left = arr.splice(0,1)[0];\n    var right, res;\n    for(let i in arr) {\n    if(left + arr[i] === 0) {\n        right = arr.splice(i,1)[0];\n    }\n    }\n    if(right) {\n        res = [left, right];\n    }\n    var next = test(arr);\n    if(res && next){\n        return [res].concat(next);\n    } else if (res) {\n        return [res];\n    } else if (next) {\n        return next;\n    }\n}\n```\n\n## 两数之和为target\n### 题目\n给定一个已按照升序排列的有序数组，找到两个数使得它们相加之和等于目标数。\n\n函数应该返回这两个下标值 index1 和 index2，其中 index1必须小于index2。\n\n- 返回的下标值（index1 和 index2）不是从零开始的。\n- 你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。\n\n\n### 测试用例\n\n```\n1. [2,7,11,15],9 // [1,2]\n```\n\n### 解法\n#### 思路\n- 双指针法，一个指向头，一个指向尾\n- 判断和是否为target，是则返回\n- 否则，若sum小于target，则指向头的指针往前移动；若大于，则尾部移动\n\n#### 算法\n\n```\n/**\n * @param {number[]} numbers\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(numbers, target) {\n    let i = 0, j = numbers.length -1;\n    while(i < j) {\n        const sum = numbers[i] + numbers[j];\n        if (sum === target) {\n            return [i + 1, j + 1];\n        } else if (sum < target) {\n            i++;\n        } else {\n            j--;\n        }\n    }\n};\n```\n\n## n数之和为target\n### 题目\n给定一个无序数组，判断该数组中能否实现n个数之和等于target的情况。\n\n### 测试用例\n\n```\n1. [1,2,3,4],2,7 // true\n```\n\n### 解法\n#### 思路\n\n\n#### 算法\n\n```\n function getResult(arr,n,target){\n    if(n==0&&target==0){\n        return true;\n    }\n    if(n<0){\n        return false;\n    }\n    if(n>0){\n        for(var i in arr){\n            var temp = arr.slice(i+1,arr.length);\n            return getResult(temp,n-1,target-arr[i]) || getResult(temp,n,target);\n        }\n    }\n}\n\nconsole.log(getResult([1,2,3,4],2,7)); //true\n```\n","source":"_posts/算法/算法：n数之和.md","raw":"---\ntitle: 算法：n数之和\ndate: 2020-08-10\ntags: [算法]\ncategories: 算法\ncomments: true\n---\n\n## 两数之和为0\n### 题目\n给定一个不重复的数字数组，找出该数组中两个数之和等于0的所有情况。\n\n### 测试用例\n\n```\n1. [1,2,3,-1] // [[1,-1]]\n2. [1,2,3,-3,-1] // [[1,1],[3,-3]]\n```\n\n### 解法\n#### 思路\n- 数组长度少于2则直接返回\n- 取数组首元素，与剩余元素比较是否相加为0，若为0取该值，拼接为数组，否则undefined\n- 递归剩余元素，将得到的返回值拼接，对于undefined的值不拼接\n\n#### 算法\n\n```\n/**\n * @param {array} arr\n * @return {array}\n */\nvar addUpToZero = function (arr) {\n    if(arr.length < 2) {\n        return;\n    }\n    var left = arr.splice(0,1)[0];\n    var right, res;\n    for(let i in arr) {\n    if(left + arr[i] === 0) {\n        right = arr.splice(i,1)[0];\n    }\n    }\n    if(right) {\n        res = [left, right];\n    }\n    var next = test(arr);\n    if(res && next){\n        return [res].concat(next);\n    } else if (res) {\n        return [res];\n    } else if (next) {\n        return next;\n    }\n}\n```\n\n## 两数之和为target\n### 题目\n给定一个已按照升序排列的有序数组，找到两个数使得它们相加之和等于目标数。\n\n函数应该返回这两个下标值 index1 和 index2，其中 index1必须小于index2。\n\n- 返回的下标值（index1 和 index2）不是从零开始的。\n- 你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。\n\n\n### 测试用例\n\n```\n1. [2,7,11,15],9 // [1,2]\n```\n\n### 解法\n#### 思路\n- 双指针法，一个指向头，一个指向尾\n- 判断和是否为target，是则返回\n- 否则，若sum小于target，则指向头的指针往前移动；若大于，则尾部移动\n\n#### 算法\n\n```\n/**\n * @param {number[]} numbers\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(numbers, target) {\n    let i = 0, j = numbers.length -1;\n    while(i < j) {\n        const sum = numbers[i] + numbers[j];\n        if (sum === target) {\n            return [i + 1, j + 1];\n        } else if (sum < target) {\n            i++;\n        } else {\n            j--;\n        }\n    }\n};\n```\n\n## n数之和为target\n### 题目\n给定一个无序数组，判断该数组中能否实现n个数之和等于target的情况。\n\n### 测试用例\n\n```\n1. [1,2,3,4],2,7 // true\n```\n\n### 解法\n#### 思路\n\n\n#### 算法\n\n```\n function getResult(arr,n,target){\n    if(n==0&&target==0){\n        return true;\n    }\n    if(n<0){\n        return false;\n    }\n    if(n>0){\n        for(var i in arr){\n            var temp = arr.slice(i+1,arr.length);\n            return getResult(temp,n-1,target-arr[i]) || getResult(temp,n,target);\n        }\n    }\n}\n\nconsole.log(getResult([1,2,3,4],2,7)); //true\n```\n","slug":"算法/算法：n数之和","published":1,"updated":"2022-07-22T08:27:10.406Z","layout":"post","photos":[],"link":"","_id":"cl5wb2yo400fucj386b7fa48t","content":"<h2 id=\"两数之和为0\"><a href=\"#两数之和为0\" class=\"headerlink\" title=\"两数之和为0\"></a>两数之和为0</h2><h3 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3><p>给定一个不重复的数字数组，找出该数组中两个数之和等于0的所有情况。</p>\n<h3 id=\"测试用例\"><a href=\"#测试用例\" class=\"headerlink\" title=\"测试用例\"></a>测试用例</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. [1,2,3,-1] // [[1,-1]]</span><br><span class=\"line\">2. [1,2,3,-3,-1] // [[1,1],[3,-3]]</span><br></pre></td></tr></table></figure>\n<h3 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h3><h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><ul>\n<li>数组长度少于2则直接返回</li>\n<li>取数组首元素，与剩余元素比较是否相加为0，若为0取该值，拼接为数组，否则undefined</li>\n<li>递归剩余元素，将得到的返回值拼接，对于undefined的值不拼接</li>\n</ul>\n<h4 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;array&#125; arr</span><br><span class=\"line\"> * @return &#123;array&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var addUpToZero = function (arr) &#123;</span><br><span class=\"line\">    if(arr.length &lt; 2) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var left = arr.splice(0,1)[0];</span><br><span class=\"line\">    var right, res;</span><br><span class=\"line\">    for(let i in arr) &#123;</span><br><span class=\"line\">    if(left + arr[i] === 0) &#123;</span><br><span class=\"line\">        right = arr.splice(i,1)[0];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(right) &#123;</span><br><span class=\"line\">        res = [left, right];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var next = test(arr);</span><br><span class=\"line\">    if(res &amp;&amp; next)&#123;</span><br><span class=\"line\">        return [res].concat(next);</span><br><span class=\"line\">    &#125; else if (res) &#123;</span><br><span class=\"line\">        return [res];</span><br><span class=\"line\">    &#125; else if (next) &#123;</span><br><span class=\"line\">        return next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"两数之和为target\"><a href=\"#两数之和为target\" class=\"headerlink\" title=\"两数之和为target\"></a>两数之和为target</h2><h3 id=\"题目-1\"><a href=\"#题目-1\" class=\"headerlink\" title=\"题目\"></a>题目</h3><p>给定一个已按照升序排列的有序数组，找到两个数使得它们相加之和等于目标数。</p>\n<p>函数应该返回这两个下标值 index1 和 index2，其中 index1必须小于index2。</p>\n<ul>\n<li>返回的下标值（index1 和 index2）不是从零开始的。</li>\n<li>你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。</li>\n</ul>\n<h3 id=\"测试用例-1\"><a href=\"#测试用例-1\" class=\"headerlink\" title=\"测试用例\"></a>测试用例</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. [2,7,11,15],9 // [1,2]</span><br></pre></td></tr></table></figure>\n<h3 id=\"解法-1\"><a href=\"#解法-1\" class=\"headerlink\" title=\"解法\"></a>解法</h3><h4 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h4><ul>\n<li>双指针法，一个指向头，一个指向尾</li>\n<li>判断和是否为target，是则返回</li>\n<li>否则，若sum小于target，则指向头的指针往前移动；若大于，则尾部移动</li>\n</ul>\n<h4 id=\"算法-1\"><a href=\"#算法-1\" class=\"headerlink\" title=\"算法\"></a>算法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;number[]&#125; numbers</span><br><span class=\"line\"> * @param &#123;number&#125; target</span><br><span class=\"line\"> * @return &#123;number[]&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var twoSum = function(numbers, target) &#123;</span><br><span class=\"line\">    let i = 0, j = numbers.length -1;</span><br><span class=\"line\">    while(i &lt; j) &#123;</span><br><span class=\"line\">        const sum = numbers[i] + numbers[j];</span><br><span class=\"line\">        if (sum === target) &#123;</span><br><span class=\"line\">            return [i + 1, j + 1];</span><br><span class=\"line\">        &#125; else if (sum &lt; target) &#123;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            j--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"n数之和为target\"><a href=\"#n数之和为target\" class=\"headerlink\" title=\"n数之和为target\"></a>n数之和为target</h2><h3 id=\"题目-2\"><a href=\"#题目-2\" class=\"headerlink\" title=\"题目\"></a>题目</h3><p>给定一个无序数组，判断该数组中能否实现n个数之和等于target的情况。</p>\n<h3 id=\"测试用例-2\"><a href=\"#测试用例-2\" class=\"headerlink\" title=\"测试用例\"></a>测试用例</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. [1,2,3,4],2,7 // true</span><br></pre></td></tr></table></figure>\n<h3 id=\"解法-2\"><a href=\"#解法-2\" class=\"headerlink\" title=\"解法\"></a>解法</h3><h4 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h4><h4 id=\"算法-2\"><a href=\"#算法-2\" class=\"headerlink\" title=\"算法\"></a>算法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> function getResult(arr,n,target)&#123;</span><br><span class=\"line\">    if(n==0&amp;&amp;target==0)&#123;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(n&lt;0)&#123;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(n&gt;0)&#123;</span><br><span class=\"line\">        for(var i in arr)&#123;</span><br><span class=\"line\">            var temp = arr.slice(i+1,arr.length);</span><br><span class=\"line\">            return getResult(temp,n-1,target-arr[i]) || getResult(temp,n,target);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(getResult([1,2,3,4],2,7)); //true</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"两数之和为0\"><a href=\"#两数之和为0\" class=\"headerlink\" title=\"两数之和为0\"></a>两数之和为0</h2><h3 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3><p>给定一个不重复的数字数组，找出该数组中两个数之和等于0的所有情况。</p>\n<h3 id=\"测试用例\"><a href=\"#测试用例\" class=\"headerlink\" title=\"测试用例\"></a>测试用例</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. [1,2,3,-1] // [[1,-1]]</span><br><span class=\"line\">2. [1,2,3,-3,-1] // [[1,1],[3,-3]]</span><br></pre></td></tr></table></figure>\n<h3 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h3><h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><ul>\n<li>数组长度少于2则直接返回</li>\n<li>取数组首元素，与剩余元素比较是否相加为0，若为0取该值，拼接为数组，否则undefined</li>\n<li>递归剩余元素，将得到的返回值拼接，对于undefined的值不拼接</li>\n</ul>\n<h4 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;array&#125; arr</span><br><span class=\"line\"> * @return &#123;array&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var addUpToZero = function (arr) &#123;</span><br><span class=\"line\">    if(arr.length &lt; 2) &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var left = arr.splice(0,1)[0];</span><br><span class=\"line\">    var right, res;</span><br><span class=\"line\">    for(let i in arr) &#123;</span><br><span class=\"line\">    if(left + arr[i] === 0) &#123;</span><br><span class=\"line\">        right = arr.splice(i,1)[0];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(right) &#123;</span><br><span class=\"line\">        res = [left, right];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var next = test(arr);</span><br><span class=\"line\">    if(res &amp;&amp; next)&#123;</span><br><span class=\"line\">        return [res].concat(next);</span><br><span class=\"line\">    &#125; else if (res) &#123;</span><br><span class=\"line\">        return [res];</span><br><span class=\"line\">    &#125; else if (next) &#123;</span><br><span class=\"line\">        return next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"两数之和为target\"><a href=\"#两数之和为target\" class=\"headerlink\" title=\"两数之和为target\"></a>两数之和为target</h2><h3 id=\"题目-1\"><a href=\"#题目-1\" class=\"headerlink\" title=\"题目\"></a>题目</h3><p>给定一个已按照升序排列的有序数组，找到两个数使得它们相加之和等于目标数。</p>\n<p>函数应该返回这两个下标值 index1 和 index2，其中 index1必须小于index2。</p>\n<ul>\n<li>返回的下标值（index1 和 index2）不是从零开始的。</li>\n<li>你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。</li>\n</ul>\n<h3 id=\"测试用例-1\"><a href=\"#测试用例-1\" class=\"headerlink\" title=\"测试用例\"></a>测试用例</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. [2,7,11,15],9 // [1,2]</span><br></pre></td></tr></table></figure>\n<h3 id=\"解法-1\"><a href=\"#解法-1\" class=\"headerlink\" title=\"解法\"></a>解法</h3><h4 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h4><ul>\n<li>双指针法，一个指向头，一个指向尾</li>\n<li>判断和是否为target，是则返回</li>\n<li>否则，若sum小于target，则指向头的指针往前移动；若大于，则尾部移动</li>\n</ul>\n<h4 id=\"算法-1\"><a href=\"#算法-1\" class=\"headerlink\" title=\"算法\"></a>算法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @param &#123;number[]&#125; numbers</span><br><span class=\"line\"> * @param &#123;number&#125; target</span><br><span class=\"line\"> * @return &#123;number[]&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">var twoSum = function(numbers, target) &#123;</span><br><span class=\"line\">    let i = 0, j = numbers.length -1;</span><br><span class=\"line\">    while(i &lt; j) &#123;</span><br><span class=\"line\">        const sum = numbers[i] + numbers[j];</span><br><span class=\"line\">        if (sum === target) &#123;</span><br><span class=\"line\">            return [i + 1, j + 1];</span><br><span class=\"line\">        &#125; else if (sum &lt; target) &#123;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            j--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"n数之和为target\"><a href=\"#n数之和为target\" class=\"headerlink\" title=\"n数之和为target\"></a>n数之和为target</h2><h3 id=\"题目-2\"><a href=\"#题目-2\" class=\"headerlink\" title=\"题目\"></a>题目</h3><p>给定一个无序数组，判断该数组中能否实现n个数之和等于target的情况。</p>\n<h3 id=\"测试用例-2\"><a href=\"#测试用例-2\" class=\"headerlink\" title=\"测试用例\"></a>测试用例</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. [1,2,3,4],2,7 // true</span><br></pre></td></tr></table></figure>\n<h3 id=\"解法-2\"><a href=\"#解法-2\" class=\"headerlink\" title=\"解法\"></a>解法</h3><h4 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h4><h4 id=\"算法-2\"><a href=\"#算法-2\" class=\"headerlink\" title=\"算法\"></a>算法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> function getResult(arr,n,target)&#123;</span><br><span class=\"line\">    if(n==0&amp;&amp;target==0)&#123;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(n&lt;0)&#123;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(n&gt;0)&#123;</span><br><span class=\"line\">        for(var i in arr)&#123;</span><br><span class=\"line\">            var temp = arr.slice(i+1,arr.length);</span><br><span class=\"line\">            return getResult(temp,n-1,target-arr[i]) || getResult(temp,n,target);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(getResult([1,2,3,4],2,7)); //true</span><br></pre></td></tr></table></figure>\n"},{"title":"计网：cdn","date":"2019-11-15T16:00:00.000Z","comments":1,"_content":"\n\n### 是什么\n内容分发网络。使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。\n### cdn缓存\n\n用户浏览器和服务器端之间加入cdn\n\n用户在浏览网站的时候，向服务器请求到资源后，cdn会在本地保存网站中的图片或者js、css等其他文件的副本，通过http响应头中的cache-control字段设置数据缓存时间，这样用户再次访问该网站的时候，浏览器就不用再下载全部的文件，减少了下载量意味着提高了页面加载的速度。\n\n再次浏览网站时，客户端浏览器会先向CDN边缘节点发起请求，CDN边缘节点会检测用户请求数据的缓存是否过期，如果没有过期，则直接响应用户请求，此时一个http请求结束；如果数据已经过期，那么CDN还需要向源站发出回源请求,来拉取最新的数据。","source":"_posts/计网/计网：cdn.md","raw":"---\ntitle: 计网：cdn\ndate: 2019-11-16\ntags: [计网]\ncategories: 计网\ncomments: true\n---\n\n\n### 是什么\n内容分发网络。使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。\n### cdn缓存\n\n用户浏览器和服务器端之间加入cdn\n\n用户在浏览网站的时候，向服务器请求到资源后，cdn会在本地保存网站中的图片或者js、css等其他文件的副本，通过http响应头中的cache-control字段设置数据缓存时间，这样用户再次访问该网站的时候，浏览器就不用再下载全部的文件，减少了下载量意味着提高了页面加载的速度。\n\n再次浏览网站时，客户端浏览器会先向CDN边缘节点发起请求，CDN边缘节点会检测用户请求数据的缓存是否过期，如果没有过期，则直接响应用户请求，此时一个http请求结束；如果数据已经过期，那么CDN还需要向源站发出回源请求,来拉取最新的数据。","slug":"计网/计网：cdn","published":1,"updated":"2022-07-22T07:58:28.552Z","layout":"post","photos":[],"link":"","_id":"cl5wb2yo500fzcj380cj8zv65","content":"<h3 id=\"是什么\"><a href=\"#是什么\" class=\"headerlink\" title=\"是什么\"></a>是什么</h3><p>内容分发网络。使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。</p>\n<h3 id=\"cdn缓存\"><a href=\"#cdn缓存\" class=\"headerlink\" title=\"cdn缓存\"></a>cdn缓存</h3><p>用户浏览器和服务器端之间加入cdn</p>\n<p>用户在浏览网站的时候，向服务器请求到资源后，cdn会在本地保存网站中的图片或者js、css等其他文件的副本，通过http响应头中的cache-control字段设置数据缓存时间，这样用户再次访问该网站的时候，浏览器就不用再下载全部的文件，减少了下载量意味着提高了页面加载的速度。</p>\n<p>再次浏览网站时，客户端浏览器会先向CDN边缘节点发起请求，CDN边缘节点会检测用户请求数据的缓存是否过期，如果没有过期，则直接响应用户请求，此时一个http请求结束；如果数据已经过期，那么CDN还需要向源站发出回源请求,来拉取最新的数据。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"是什么\"><a href=\"#是什么\" class=\"headerlink\" title=\"是什么\"></a>是什么</h3><p>内容分发网络。使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。</p>\n<h3 id=\"cdn缓存\"><a href=\"#cdn缓存\" class=\"headerlink\" title=\"cdn缓存\"></a>cdn缓存</h3><p>用户浏览器和服务器端之间加入cdn</p>\n<p>用户在浏览网站的时候，向服务器请求到资源后，cdn会在本地保存网站中的图片或者js、css等其他文件的副本，通过http响应头中的cache-control字段设置数据缓存时间，这样用户再次访问该网站的时候，浏览器就不用再下载全部的文件，减少了下载量意味着提高了页面加载的速度。</p>\n<p>再次浏览网站时，客户端浏览器会先向CDN边缘节点发起请求，CDN边缘节点会检测用户请求数据的缓存是否过期，如果没有过期，则直接响应用户请求，此时一个http请求结束；如果数据已经过期，那么CDN还需要向源站发出回源请求,来拉取最新的数据。</p>\n"},{"title":"计网：http报文结构","date":"2020-02-22T16:00:00.000Z","comments":1,"_content":"\n### http报文的产生\nHTTP通信过程包括客户端往服务器端发送请求以及服务器端给客户端返回响应两个过程。在这两个过程中就会产生请求报文和响应报文。\n\n### 什么是HTTP报文呢？\nHTTP报文是用于HTTP协议交互的信息，HTTP报文本身是由多行数据构成的字符串文本。客户端的HTTP报文叫做请求报文，服务器端的HTTP报文叫做响应报文。\n\n### 报文结构\n- HTTP报文由报文首部和报文主体构成，中间由一个空行分隔。\n- 报文首部是客户端或服务器端需处理的请求或响应的内容及属性， 可以传递额外的重要信息。\n- 报文首部包括请求行和请求头部。\n- 报文主体主要包含应被发送的数据。\n- 通常，不一定有报文主体。\n\n### http请求报文\n一个HTTP请求报文由请求行、请求头部、空行和请求数据4个部分构成。\n\n![image](https://img-blog.csdn.net/20180828215741663?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tvbmdtaW5fMTIz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n请求行数据格式由三个部分组成：请求方法、URI、HTTP协议版本，他们之间用空格分隔。\n```\n// 该部分位于数据首行，基本格式为：\nGET /index.html HTTP/1.1\n```\n该部分的请求方法字段给出了请求类型，URI给出请求的资源位置(/index.html)。HTTP中的请求类型包括:GET、POST、HEAD、PUT、DELETE。一般常用的为GET和POST方式。最后HTTP协议版本给出HTTP的版本号。\n\n### http响应报文\nHTTP响应报文由状态行（HTTP版本、状态码（数字和原因短语））、响应头部、空行和响应体4个部分构成。\n\n![image](https://img-blog.csdn.net/20180828215835558?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tvbmdtaW5fMTIz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n状态行主要给出响应HTTP协议的版本号、响应返回状态码、响应描述，同样是单行显示。格式为：\n```\nHTTP/1.1 200 OK\n```\n状态码告知从服务器端返回的请求的状态，一般由一个三位数组成,分别以整数1～5开头组成。\n\n### 报文首部\n#### 结构\n- 由首部字段名和字段值构成的，中间用冒号“:”分割。\n- 首部字段格式： 首部字段名:字段值。\n\n#### 类型\n- 通用首部字段：请求报文和响应报文两方都会使用的首部。\n- 请求首部字段：从客户端向服务器端发送请求报文时使用的首部。补充了请求的附加内容、客户端信息、响应内容相关优先级等信息。\n- 响应首部字段：从服务器端向客户端返回响应报文时使用的首部。补充了响应的附加内容，也会要求客户端附加额外的内容信息。\n- 实体首部字段：针对请求报文和响应报文的实体部分使用的首部。补充了资源内容更新时间等和实体有关的信息。\n\n\n","source":"_posts/计网/计网：http报文结构.md","raw":"---\ntitle: 计网：http报文结构\ndate: 2020-02-23\ntags: [计网]\ncategories: 计网\ncomments: true\n---\n\n### http报文的产生\nHTTP通信过程包括客户端往服务器端发送请求以及服务器端给客户端返回响应两个过程。在这两个过程中就会产生请求报文和响应报文。\n\n### 什么是HTTP报文呢？\nHTTP报文是用于HTTP协议交互的信息，HTTP报文本身是由多行数据构成的字符串文本。客户端的HTTP报文叫做请求报文，服务器端的HTTP报文叫做响应报文。\n\n### 报文结构\n- HTTP报文由报文首部和报文主体构成，中间由一个空行分隔。\n- 报文首部是客户端或服务器端需处理的请求或响应的内容及属性， 可以传递额外的重要信息。\n- 报文首部包括请求行和请求头部。\n- 报文主体主要包含应被发送的数据。\n- 通常，不一定有报文主体。\n\n### http请求报文\n一个HTTP请求报文由请求行、请求头部、空行和请求数据4个部分构成。\n\n![image](https://img-blog.csdn.net/20180828215741663?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tvbmdtaW5fMTIz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n请求行数据格式由三个部分组成：请求方法、URI、HTTP协议版本，他们之间用空格分隔。\n```\n// 该部分位于数据首行，基本格式为：\nGET /index.html HTTP/1.1\n```\n该部分的请求方法字段给出了请求类型，URI给出请求的资源位置(/index.html)。HTTP中的请求类型包括:GET、POST、HEAD、PUT、DELETE。一般常用的为GET和POST方式。最后HTTP协议版本给出HTTP的版本号。\n\n### http响应报文\nHTTP响应报文由状态行（HTTP版本、状态码（数字和原因短语））、响应头部、空行和响应体4个部分构成。\n\n![image](https://img-blog.csdn.net/20180828215835558?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tvbmdtaW5fMTIz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n状态行主要给出响应HTTP协议的版本号、响应返回状态码、响应描述，同样是单行显示。格式为：\n```\nHTTP/1.1 200 OK\n```\n状态码告知从服务器端返回的请求的状态，一般由一个三位数组成,分别以整数1～5开头组成。\n\n### 报文首部\n#### 结构\n- 由首部字段名和字段值构成的，中间用冒号“:”分割。\n- 首部字段格式： 首部字段名:字段值。\n\n#### 类型\n- 通用首部字段：请求报文和响应报文两方都会使用的首部。\n- 请求首部字段：从客户端向服务器端发送请求报文时使用的首部。补充了请求的附加内容、客户端信息、响应内容相关优先级等信息。\n- 响应首部字段：从服务器端向客户端返回响应报文时使用的首部。补充了响应的附加内容，也会要求客户端附加额外的内容信息。\n- 实体首部字段：针对请求报文和响应报文的实体部分使用的首部。补充了资源内容更新时间等和实体有关的信息。\n\n\n","slug":"计网/计网：http报文结构","published":1,"updated":"2022-07-22T07:57:49.793Z","layout":"post","photos":[],"link":"","_id":"cl5wb2yo600g2cj38por38w28","content":"<h3 id=\"http报文的产生\"><a href=\"#http报文的产生\" class=\"headerlink\" title=\"http报文的产生\"></a>http报文的产生</h3><p>HTTP通信过程包括客户端往服务器端发送请求以及服务器端给客户端返回响应两个过程。在这两个过程中就会产生请求报文和响应报文。</p>\n<h3 id=\"什么是HTTP报文呢？\"><a href=\"#什么是HTTP报文呢？\" class=\"headerlink\" title=\"什么是HTTP报文呢？\"></a>什么是HTTP报文呢？</h3><p>HTTP报文是用于HTTP协议交互的信息，HTTP报文本身是由多行数据构成的字符串文本。客户端的HTTP报文叫做请求报文，服务器端的HTTP报文叫做响应报文。</p>\n<h3 id=\"报文结构\"><a href=\"#报文结构\" class=\"headerlink\" title=\"报文结构\"></a>报文结构</h3><ul>\n<li>HTTP报文由报文首部和报文主体构成，中间由一个空行分隔。</li>\n<li>报文首部是客户端或服务器端需处理的请求或响应的内容及属性， 可以传递额外的重要信息。</li>\n<li>报文首部包括请求行和请求头部。</li>\n<li>报文主体主要包含应被发送的数据。</li>\n<li>通常，不一定有报文主体。</li>\n</ul>\n<h3 id=\"http请求报文\"><a href=\"#http请求报文\" class=\"headerlink\" title=\"http请求报文\"></a>http请求报文</h3><p>一个HTTP请求报文由请求行、请求头部、空行和请求数据4个部分构成。</p>\n<p><img src=\"https://img-blog.csdn.net/20180828215741663?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tvbmdtaW5fMTIz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"image\"></p>\n<p>请求行数据格式由三个部分组成：请求方法、URI、HTTP协议版本，他们之间用空格分隔。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 该部分位于数据首行，基本格式为：</span><br><span class=\"line\">GET /index.html HTTP/1.1</span><br></pre></td></tr></table></figure></p>\n<p>该部分的请求方法字段给出了请求类型，URI给出请求的资源位置(/index.html)。HTTP中的请求类型包括:GET、POST、HEAD、PUT、DELETE。一般常用的为GET和POST方式。最后HTTP协议版本给出HTTP的版本号。</p>\n<h3 id=\"http响应报文\"><a href=\"#http响应报文\" class=\"headerlink\" title=\"http响应报文\"></a>http响应报文</h3><p>HTTP响应报文由状态行（HTTP版本、状态码（数字和原因短语））、响应头部、空行和响应体4个部分构成。</p>\n<p><img src=\"https://img-blog.csdn.net/20180828215835558?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tvbmdtaW5fMTIz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"image\"></p>\n<p>状态行主要给出响应HTTP协议的版本号、响应返回状态码、响应描述，同样是单行显示。格式为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 200 OK</span><br></pre></td></tr></table></figure></p>\n<p>状态码告知从服务器端返回的请求的状态，一般由一个三位数组成,分别以整数1～5开头组成。</p>\n<h3 id=\"报文首部\"><a href=\"#报文首部\" class=\"headerlink\" title=\"报文首部\"></a>报文首部</h3><h4 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h4><ul>\n<li>由首部字段名和字段值构成的，中间用冒号“:”分割。</li>\n<li>首部字段格式： 首部字段名:字段值。</li>\n</ul>\n<h4 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h4><ul>\n<li>通用首部字段：请求报文和响应报文两方都会使用的首部。</li>\n<li>请求首部字段：从客户端向服务器端发送请求报文时使用的首部。补充了请求的附加内容、客户端信息、响应内容相关优先级等信息。</li>\n<li>响应首部字段：从服务器端向客户端返回响应报文时使用的首部。补充了响应的附加内容，也会要求客户端附加额外的内容信息。</li>\n<li>实体首部字段：针对请求报文和响应报文的实体部分使用的首部。补充了资源内容更新时间等和实体有关的信息。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"http报文的产生\"><a href=\"#http报文的产生\" class=\"headerlink\" title=\"http报文的产生\"></a>http报文的产生</h3><p>HTTP通信过程包括客户端往服务器端发送请求以及服务器端给客户端返回响应两个过程。在这两个过程中就会产生请求报文和响应报文。</p>\n<h3 id=\"什么是HTTP报文呢？\"><a href=\"#什么是HTTP报文呢？\" class=\"headerlink\" title=\"什么是HTTP报文呢？\"></a>什么是HTTP报文呢？</h3><p>HTTP报文是用于HTTP协议交互的信息，HTTP报文本身是由多行数据构成的字符串文本。客户端的HTTP报文叫做请求报文，服务器端的HTTP报文叫做响应报文。</p>\n<h3 id=\"报文结构\"><a href=\"#报文结构\" class=\"headerlink\" title=\"报文结构\"></a>报文结构</h3><ul>\n<li>HTTP报文由报文首部和报文主体构成，中间由一个空行分隔。</li>\n<li>报文首部是客户端或服务器端需处理的请求或响应的内容及属性， 可以传递额外的重要信息。</li>\n<li>报文首部包括请求行和请求头部。</li>\n<li>报文主体主要包含应被发送的数据。</li>\n<li>通常，不一定有报文主体。</li>\n</ul>\n<h3 id=\"http请求报文\"><a href=\"#http请求报文\" class=\"headerlink\" title=\"http请求报文\"></a>http请求报文</h3><p>一个HTTP请求报文由请求行、请求头部、空行和请求数据4个部分构成。</p>\n<p><img src=\"https://img-blog.csdn.net/20180828215741663?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tvbmdtaW5fMTIz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"image\"></p>\n<p>请求行数据格式由三个部分组成：请求方法、URI、HTTP协议版本，他们之间用空格分隔。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 该部分位于数据首行，基本格式为：</span><br><span class=\"line\">GET /index.html HTTP/1.1</span><br></pre></td></tr></table></figure></p>\n<p>该部分的请求方法字段给出了请求类型，URI给出请求的资源位置(/index.html)。HTTP中的请求类型包括:GET、POST、HEAD、PUT、DELETE。一般常用的为GET和POST方式。最后HTTP协议版本给出HTTP的版本号。</p>\n<h3 id=\"http响应报文\"><a href=\"#http响应报文\" class=\"headerlink\" title=\"http响应报文\"></a>http响应报文</h3><p>HTTP响应报文由状态行（HTTP版本、状态码（数字和原因短语））、响应头部、空行和响应体4个部分构成。</p>\n<p><img src=\"https://img-blog.csdn.net/20180828215835558?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tvbmdtaW5fMTIz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"image\"></p>\n<p>状态行主要给出响应HTTP协议的版本号、响应返回状态码、响应描述，同样是单行显示。格式为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 200 OK</span><br></pre></td></tr></table></figure></p>\n<p>状态码告知从服务器端返回的请求的状态，一般由一个三位数组成,分别以整数1～5开头组成。</p>\n<h3 id=\"报文首部\"><a href=\"#报文首部\" class=\"headerlink\" title=\"报文首部\"></a>报文首部</h3><h4 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h4><ul>\n<li>由首部字段名和字段值构成的，中间用冒号“:”分割。</li>\n<li>首部字段格式： 首部字段名:字段值。</li>\n</ul>\n<h4 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h4><ul>\n<li>通用首部字段：请求报文和响应报文两方都会使用的首部。</li>\n<li>请求首部字段：从客户端向服务器端发送请求报文时使用的首部。补充了请求的附加内容、客户端信息、响应内容相关优先级等信息。</li>\n<li>响应首部字段：从服务器端向客户端返回响应报文时使用的首部。补充了响应的附加内容，也会要求客户端附加额外的内容信息。</li>\n<li>实体首部字段：针对请求报文和响应报文的实体部分使用的首部。补充了资源内容更新时间等和实体有关的信息。</li>\n</ul>\n"},{"title":"计网：http和https","date":"2020-05-13T16:00:00.000Z","comments":1,"_content":"\n\n### 关于https\n用处：\n- 建立一个信息安全通道，来保证数据传输的安全。\n- 确认网站的真实性，防止钓鱼网站。\n\nhttps就是在http下加入了ssl层，从而保护了交换数据隐私和完整性，提供了对网站服务器身份认证的功能，简单来说就是安全版的http。\n\n### http和https的区别\n- 同属于应用层的协议\n- http协议是运行在tcp之上的，所有传输的内容都是未加密的，也就是明文的。https协议是运行在SSL\\TLS之上的，而SSL\\TLS协议运行在tcp之上，在http和tcp之间，所有传输的内容都经过加密的，比http更安全。（加密采用对称加密，而密钥的传输利用非对称加密）\n- http默认使用端口80。https默认使用端口443。\n\n### https的工作原理\n1. 使用HTTPS的url访问服务器，客户端向服务器端请求建立SSL连接。（可以说TLS为SSL的新版本）\n2. 服务器收到客户端请求后，会将网站的证书信息（证书包含公钥）传送一份给客户端。\n3. 客户端浏览器和服务器端协商信息加密的等级。\n4. 客户端浏览器根据协商好的安全等级，建立会话密钥，然后利用网站的公钥加密会话密钥，并传送给服务器。\n5. 服务器利用私钥解密会话密钥，并利用会话密钥加密与客户端之间的通信。\n\n非对称密码解密速度比较慢，但比较安全；对称密码解密速度比较快。所以用对称密码加密数据，非对称密码加密对称密钥。\n\n非对称加密算法中私钥是基于不同的算法生成不同的随机数，私钥通过一定的加密算法推导出公钥，但私钥到公钥的推导过程是单向的，也就是说公钥无法反推导出私钥。","source":"_posts/计网/计网：http和https.md","raw":"---\ntitle: 计网：http和https\ndate: 2020-05-14\ntags: [计网]\ncategories: 计网\ncomments: true\n---\n\n\n### 关于https\n用处：\n- 建立一个信息安全通道，来保证数据传输的安全。\n- 确认网站的真实性，防止钓鱼网站。\n\nhttps就是在http下加入了ssl层，从而保护了交换数据隐私和完整性，提供了对网站服务器身份认证的功能，简单来说就是安全版的http。\n\n### http和https的区别\n- 同属于应用层的协议\n- http协议是运行在tcp之上的，所有传输的内容都是未加密的，也就是明文的。https协议是运行在SSL\\TLS之上的，而SSL\\TLS协议运行在tcp之上，在http和tcp之间，所有传输的内容都经过加密的，比http更安全。（加密采用对称加密，而密钥的传输利用非对称加密）\n- http默认使用端口80。https默认使用端口443。\n\n### https的工作原理\n1. 使用HTTPS的url访问服务器，客户端向服务器端请求建立SSL连接。（可以说TLS为SSL的新版本）\n2. 服务器收到客户端请求后，会将网站的证书信息（证书包含公钥）传送一份给客户端。\n3. 客户端浏览器和服务器端协商信息加密的等级。\n4. 客户端浏览器根据协商好的安全等级，建立会话密钥，然后利用网站的公钥加密会话密钥，并传送给服务器。\n5. 服务器利用私钥解密会话密钥，并利用会话密钥加密与客户端之间的通信。\n\n非对称密码解密速度比较慢，但比较安全；对称密码解密速度比较快。所以用对称密码加密数据，非对称密码加密对称密钥。\n\n非对称加密算法中私钥是基于不同的算法生成不同的随机数，私钥通过一定的加密算法推导出公钥，但私钥到公钥的推导过程是单向的，也就是说公钥无法反推导出私钥。","slug":"计网/计网：http和https","published":1,"updated":"2022-07-22T07:55:52.641Z","layout":"post","photos":[],"link":"","_id":"cl5wb2yo800g7cj38eye9ruzh","content":"<h3 id=\"关于https\"><a href=\"#关于https\" class=\"headerlink\" title=\"关于https\"></a>关于https</h3><p>用处：</p>\n<ul>\n<li>建立一个信息安全通道，来保证数据传输的安全。</li>\n<li>确认网站的真实性，防止钓鱼网站。</li>\n</ul>\n<p>https就是在http下加入了ssl层，从而保护了交换数据隐私和完整性，提供了对网站服务器身份认证的功能，简单来说就是安全版的http。</p>\n<h3 id=\"http和https的区别\"><a href=\"#http和https的区别\" class=\"headerlink\" title=\"http和https的区别\"></a>http和https的区别</h3><ul>\n<li>同属于应用层的协议</li>\n<li>http协议是运行在tcp之上的，所有传输的内容都是未加密的，也就是明文的。https协议是运行在SSL\\TLS之上的，而SSL\\TLS协议运行在tcp之上，在http和tcp之间，所有传输的内容都经过加密的，比http更安全。（加密采用对称加密，而密钥的传输利用非对称加密）</li>\n<li>http默认使用端口80。https默认使用端口443。</li>\n</ul>\n<h3 id=\"https的工作原理\"><a href=\"#https的工作原理\" class=\"headerlink\" title=\"https的工作原理\"></a>https的工作原理</h3><ol>\n<li>使用HTTPS的url访问服务器，客户端向服务器端请求建立SSL连接。（可以说TLS为SSL的新版本）</li>\n<li>服务器收到客户端请求后，会将网站的证书信息（证书包含公钥）传送一份给客户端。</li>\n<li>客户端浏览器和服务器端协商信息加密的等级。</li>\n<li>客户端浏览器根据协商好的安全等级，建立会话密钥，然后利用网站的公钥加密会话密钥，并传送给服务器。</li>\n<li>服务器利用私钥解密会话密钥，并利用会话密钥加密与客户端之间的通信。</li>\n</ol>\n<p>非对称密码解密速度比较慢，但比较安全；对称密码解密速度比较快。所以用对称密码加密数据，非对称密码加密对称密钥。</p>\n<p>非对称加密算法中私钥是基于不同的算法生成不同的随机数，私钥通过一定的加密算法推导出公钥，但私钥到公钥的推导过程是单向的，也就是说公钥无法反推导出私钥。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"关于https\"><a href=\"#关于https\" class=\"headerlink\" title=\"关于https\"></a>关于https</h3><p>用处：</p>\n<ul>\n<li>建立一个信息安全通道，来保证数据传输的安全。</li>\n<li>确认网站的真实性，防止钓鱼网站。</li>\n</ul>\n<p>https就是在http下加入了ssl层，从而保护了交换数据隐私和完整性，提供了对网站服务器身份认证的功能，简单来说就是安全版的http。</p>\n<h3 id=\"http和https的区别\"><a href=\"#http和https的区别\" class=\"headerlink\" title=\"http和https的区别\"></a>http和https的区别</h3><ul>\n<li>同属于应用层的协议</li>\n<li>http协议是运行在tcp之上的，所有传输的内容都是未加密的，也就是明文的。https协议是运行在SSL\\TLS之上的，而SSL\\TLS协议运行在tcp之上，在http和tcp之间，所有传输的内容都经过加密的，比http更安全。（加密采用对称加密，而密钥的传输利用非对称加密）</li>\n<li>http默认使用端口80。https默认使用端口443。</li>\n</ul>\n<h3 id=\"https的工作原理\"><a href=\"#https的工作原理\" class=\"headerlink\" title=\"https的工作原理\"></a>https的工作原理</h3><ol>\n<li>使用HTTPS的url访问服务器，客户端向服务器端请求建立SSL连接。（可以说TLS为SSL的新版本）</li>\n<li>服务器收到客户端请求后，会将网站的证书信息（证书包含公钥）传送一份给客户端。</li>\n<li>客户端浏览器和服务器端协商信息加密的等级。</li>\n<li>客户端浏览器根据协商好的安全等级，建立会话密钥，然后利用网站的公钥加密会话密钥，并传送给服务器。</li>\n<li>服务器利用私钥解密会话密钥，并利用会话密钥加密与客户端之间的通信。</li>\n</ol>\n<p>非对称密码解密速度比较慢，但比较安全；对称密码解密速度比较快。所以用对称密码加密数据，非对称密码加密对称密钥。</p>\n<p>非对称加密算法中私钥是基于不同的算法生成不同的随机数，私钥通过一定的加密算法推导出公钥，但私钥到公钥的推导过程是单向的，也就是说公钥无法反推导出私钥。</p>\n"},{"title":"计网：DNS查询过程","date":"2019-04-21T16:00:00.000Z","comments":1,"_content":"\n迭代+递归\n\n1. 在DNS解析器缓存中查找某主机的ip地址\n2. 向其本地域名服务器进行递归查找。\n3. 本地域名服务器查不到，就向根域名服务器进行迭代查询。\n4. 根域名服务器告诉本地域名服务器，下一步该向顶级域名服务器查找。\n5. 本地域名服务器向顶级域名服务器查找。\n6. 顶级域名服务器告诉本地域名服务器，下一步该向权限域名服务器查找。\n7. 权限域名服务器返回目标主机的ip地址。\n8. 本地域名服务器就把ip地址告诉目标主机。\n\n","source":"_posts/计网/计网：DNS查询过程.md","raw":"---\ntitle: 计网：DNS查询过程\ndate: 2019-04-22\ntags: [计网]\ncategories: 计网\ncomments: true\n---\n\n迭代+递归\n\n1. 在DNS解析器缓存中查找某主机的ip地址\n2. 向其本地域名服务器进行递归查找。\n3. 本地域名服务器查不到，就向根域名服务器进行迭代查询。\n4. 根域名服务器告诉本地域名服务器，下一步该向顶级域名服务器查找。\n5. 本地域名服务器向顶级域名服务器查找。\n6. 顶级域名服务器告诉本地域名服务器，下一步该向权限域名服务器查找。\n7. 权限域名服务器返回目标主机的ip地址。\n8. 本地域名服务器就把ip地址告诉目标主机。\n\n","slug":"计网/计网：DNS查询过程","published":1,"updated":"2022-07-22T07:56:49.117Z","layout":"post","photos":[],"link":"","_id":"cl5wb2yo800gacj38xlri6mh2","content":"<p>迭代+递归</p>\n<ol>\n<li>在DNS解析器缓存中查找某主机的ip地址</li>\n<li>向其本地域名服务器进行递归查找。</li>\n<li>本地域名服务器查不到，就向根域名服务器进行迭代查询。</li>\n<li>根域名服务器告诉本地域名服务器，下一步该向顶级域名服务器查找。</li>\n<li>本地域名服务器向顶级域名服务器查找。</li>\n<li>顶级域名服务器告诉本地域名服务器，下一步该向权限域名服务器查找。</li>\n<li>权限域名服务器返回目标主机的ip地址。</li>\n<li>本地域名服务器就把ip地址告诉目标主机。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>迭代+递归</p>\n<ol>\n<li>在DNS解析器缓存中查找某主机的ip地址</li>\n<li>向其本地域名服务器进行递归查找。</li>\n<li>本地域名服务器查不到，就向根域名服务器进行迭代查询。</li>\n<li>根域名服务器告诉本地域名服务器，下一步该向顶级域名服务器查找。</li>\n<li>本地域名服务器向顶级域名服务器查找。</li>\n<li>顶级域名服务器告诉本地域名服务器，下一步该向权限域名服务器查找。</li>\n<li>权限域名服务器返回目标主机的ip地址。</li>\n<li>本地域名服务器就把ip地址告诉目标主机。</li>\n</ol>\n"},{"title":"计网：http的header字段","date":"2019-04-11T16:00:00.000Z","comments":1,"_content":"\n\nhttp头 = 通用头 + 请求头 + 响应头\n### 通用头(General)\n通用头域包含请求和响应消息都支持的头域，提供了与报文相关的最基本的信息。\n\n![image](https://img-blog.csdn.net/20170919180331072?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDQyOTQyNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\nheader | 含义\n---|---\nRequest URL  | 请求的URL\nRequest Method  | 请求的方法 \nStatus Code  | HTTP 状态码\nRemote Address  | 远程IP地址 \nReferrer Policy  | 记录了是从哪个链接跳来的\n\n### 响应头(Response Headers)\n\nheader  | 含义 | 示例\n---|---|---\nAccept-Ranges | 表明服务器是否支持指定范围请求及哪种类型的分段请求 | Accept-Ranges: bytes\nAge |  \t从原始服务器到代理缓存形成的估算时间（以秒计，非负） | Age: 12\nAllow |\t对某网络资源的有效的请求行为，不允许则返回405 | Allow: GET, HEAD\nCache-Control |\t告诉所有的缓存机制是否可以缓存及哪种类型 |\tCache-Control: no-cache\nContent-Encoding |\tweb服务器支持的返回内容压缩编码类型。 |\tContent-Encoding: gzip\nContent-Language  |\t响应体的语言 |\tContent-Language: en,zh\nContent-Length | 响应体的长度 |\tContent-Length: 348\nContent-Location |\t请求资源可替代的备用的另一地址 |\tContent-Location: /index.htm\nContent-MD5  |\t返回资源的MD5校验值 |\tContent-MD5: Q2hlY2sgSW50ZWdyaXR5IQ==\nContent-Range |\t在整个返回体中本部分的字节位置 | \tContent-Range: bytes 21010-47021/47022\nContent-Type  |\t返回内容的MIME类型 |\tContent-Type: text/html; charset=utf-8\nDate |\t原始服务器消息发出的时间 |\tDate: Tue, 15 Nov 2010 08:12:31 GMT\nETag |\t请求变量的实体标签的当前值 |\tETag: “737060cd8c284d8af7ad3082f209582d”\nExpires |\t响应过期的日期和时间 |\tExpires: Thu, 01 Dec 2010 16:00:00 GMT\nLast-Modified |\t请求资源的最后修改时间 |\tLast-Modified: Tue, 15 Nov 2010 12:45:26 GMT\nLocation |\t用来重定向接收方到非请求URL的位置来完成请求或标识新的资源 |\tLocation: http://www.zcmhi.com/archives/94.html\nPragma |\t包括实现特定的指令，它可应用到响应链上的任何接收方 |\tPragma: no-cache\nProxy-Authenticate |\t它指出认证方案和可应用到代理的该URL上的参数 |\tProxy-Authenticate: Basic\nrefresh |\t应用于重定向或一个新的资源被创造，在5秒之后重定向（由网景提出，被大部分浏览器支持） \t|Refresh: 5; url=http://www.zcmhi.com/archives/94.html\nRetry-After |\t如果实体暂时不可取，通知客户端在指定时间之后再次尝试 |\tRetry-After: 120\nServer |\tweb服务器软件名称 |\tServer: Apache/1.3.27 (Unix) (Red-Hat/Linux)\nSet-Cookie \t| 设置Http Cookie |\tSet-Cookie: UserID=JohnDoe; Max-Age=3600; Version=1\nTrailer  |\t指出头域在分块传输编码的尾部存在 |\tTrailer: Max-Forwards\nTransfer-Encoding |\t文件传输编码 |\tTransfer-Encoding:chunked\nVary |\t告诉下游代理是使用缓存响应还是从原始服务器请求 |\tVary: *\nVia |\t告知代理客户端响应是通过哪里发送的 |\tVia: 1.0 fred, 1.1 nowhere.com (Apache/1.1)\nWarning |\t警告实体可能存在的问题 |\tWarning: 199 Miscellaneous warning\nWWW-Authenticate |\t表明客户端请求实体应该使用的授权方案 |\tWWW-Authenticate: Basic\n\n### 请求头(Request Headers)\n\nheader  | 含义 | 示例\n---|---|---\nAccept |\t指定客户端能够接收的内容类型 |\tAccept: text/plain, text/html\nAccept-Charset |\t浏览器可以接受的字符编码集。 |\tAccept-Charset: iso-8859-5\nAccept-Encoding |\t指定浏览器可以支持的web服务器返回内容压缩编码类型。 |\tAccept-Encoding: compress, gzip\nAccept-Language |\t浏览器可接受的语言 |\tAccept-Language: en,zh\nAccept-Ranges |\t可以请求网页实体的一个或者多个子范围字段 |\tAccept-Ranges: bytes\nAuthorization |\tHTTP授权的授权证书 |\tAuthorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\nCache-Control |\t指定请求和响应遵循的缓存机制 |\tCache-Control: no-cache\nConnection |\t表示是否需要持久连接。（HTTP 1.1默认进行持久连接） |\tConnection: close\nCookie |\tHTTP请求发送时，会把保存在该请求域名下的所有cookie值一起发送给web服务器。 |\tCookie: $Version=1; Skin=new;\nContent-Length |\t请求的内容长度 |\tContent-Length: 348\nContent-Type |\t请求的与实体对应的MIME信息 |\tContent-Type: application/x-www-form-urlencoded\nDate |\t请求发送的日期和时间 |\tDate: Tue, 15 Nov 2010 08:12:31 GMT\nExpect |\t请求的特定的服务器行为 |\tExpect: 100-continue\nFrom |\t发出请求的用户的Email |\tFrom: user@email.com\nHost |\t指定请求的服务器的域名和端口号 |\tHost: www.zcmhi.com\nIf-Match |\t只有请求内容与实体相匹配才有效 |\tIf-Match: “737060cd8c284d8af7ad3082f209582d”\nIf-Modified-Since |\t如果请求的部分在指定时间之后被修改则请求成功，未被修改则返回304代码 |\tIf-Modified-Since: Sat, 29 Oct 2010 19:43:31 GMT\nIf-None-Match |\t如果内容未改变返回304代码，参数为服务器先前发送的Etag，与服务器回应的Etag比较判断是否改变 |\tIf-None-Match: “737060cd8c284d8af7ad3082f209582d”\nIf-Range |\t如果实体未改变，服务器发送客户端丢失的部分，否则发送整个实体。参数也为Etag |\tIf-Range: “737060cd8c284d8af7ad3082f209582d”\nIf-Unmodified-Since |\t只在实体在指定时间之后未被修改才请求成功 |\tIf-Unmodified-Since: Sat, 29 Oct 2010 19:43:31 GMT\nMax-Forwards |\t限制信息通过代理和网关传送的时间 |\tMax-Forwards: 10\nPragma |\t用来包含实现特定的指令 | \tPragma: no-cache\nProxy-Authorization |\t连接到代理的授权证书 |\tProxy-Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\nRange |\t只请求实体的一部分，指定范围 |\tRange: bytes=500-999\nReferer |\t先前网页的地址，当前请求网页紧随其后,即来路 |\tReferer: http://www.zcmhi.com/archives/71.html\nTE |\t客户端愿意接受的传输编码，并通知服务器接受接受尾加头信息 |\tTE: trailers,deflate;q=0.5\nUpgrade |\t向服务器指定某种传输协议以便服务器进行转换（如果支持） |\tUpgrade: HTTP/2.0, SHTTP/1.3, IRC/6.9, RTA/x11\nUser-Agent |\tUser-Agent的内容包含发出请求的用户信息 |\tUser-Agent: Mozilla/5.0 (Linux; X11)\nVia |\t通知中间网关或代理服务器地址，通信协议| \tVia: 1.0 fred, 1.1 nowhere.com (Apache/1.1)\nWarning |\t关于消息实体的警告信息 |\tWarn: 199 Miscellaneous warning","source":"_posts/计网/计网：http的header字段.md","raw":"---\ntitle: 计网：http的header字段\ndate: 2019-04-12\ntags: [计网]\ncategories: 计网\ncomments: true\n---\n\n\nhttp头 = 通用头 + 请求头 + 响应头\n### 通用头(General)\n通用头域包含请求和响应消息都支持的头域，提供了与报文相关的最基本的信息。\n\n![image](https://img-blog.csdn.net/20170919180331072?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDQyOTQyNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\nheader | 含义\n---|---\nRequest URL  | 请求的URL\nRequest Method  | 请求的方法 \nStatus Code  | HTTP 状态码\nRemote Address  | 远程IP地址 \nReferrer Policy  | 记录了是从哪个链接跳来的\n\n### 响应头(Response Headers)\n\nheader  | 含义 | 示例\n---|---|---\nAccept-Ranges | 表明服务器是否支持指定范围请求及哪种类型的分段请求 | Accept-Ranges: bytes\nAge |  \t从原始服务器到代理缓存形成的估算时间（以秒计，非负） | Age: 12\nAllow |\t对某网络资源的有效的请求行为，不允许则返回405 | Allow: GET, HEAD\nCache-Control |\t告诉所有的缓存机制是否可以缓存及哪种类型 |\tCache-Control: no-cache\nContent-Encoding |\tweb服务器支持的返回内容压缩编码类型。 |\tContent-Encoding: gzip\nContent-Language  |\t响应体的语言 |\tContent-Language: en,zh\nContent-Length | 响应体的长度 |\tContent-Length: 348\nContent-Location |\t请求资源可替代的备用的另一地址 |\tContent-Location: /index.htm\nContent-MD5  |\t返回资源的MD5校验值 |\tContent-MD5: Q2hlY2sgSW50ZWdyaXR5IQ==\nContent-Range |\t在整个返回体中本部分的字节位置 | \tContent-Range: bytes 21010-47021/47022\nContent-Type  |\t返回内容的MIME类型 |\tContent-Type: text/html; charset=utf-8\nDate |\t原始服务器消息发出的时间 |\tDate: Tue, 15 Nov 2010 08:12:31 GMT\nETag |\t请求变量的实体标签的当前值 |\tETag: “737060cd8c284d8af7ad3082f209582d”\nExpires |\t响应过期的日期和时间 |\tExpires: Thu, 01 Dec 2010 16:00:00 GMT\nLast-Modified |\t请求资源的最后修改时间 |\tLast-Modified: Tue, 15 Nov 2010 12:45:26 GMT\nLocation |\t用来重定向接收方到非请求URL的位置来完成请求或标识新的资源 |\tLocation: http://www.zcmhi.com/archives/94.html\nPragma |\t包括实现特定的指令，它可应用到响应链上的任何接收方 |\tPragma: no-cache\nProxy-Authenticate |\t它指出认证方案和可应用到代理的该URL上的参数 |\tProxy-Authenticate: Basic\nrefresh |\t应用于重定向或一个新的资源被创造，在5秒之后重定向（由网景提出，被大部分浏览器支持） \t|Refresh: 5; url=http://www.zcmhi.com/archives/94.html\nRetry-After |\t如果实体暂时不可取，通知客户端在指定时间之后再次尝试 |\tRetry-After: 120\nServer |\tweb服务器软件名称 |\tServer: Apache/1.3.27 (Unix) (Red-Hat/Linux)\nSet-Cookie \t| 设置Http Cookie |\tSet-Cookie: UserID=JohnDoe; Max-Age=3600; Version=1\nTrailer  |\t指出头域在分块传输编码的尾部存在 |\tTrailer: Max-Forwards\nTransfer-Encoding |\t文件传输编码 |\tTransfer-Encoding:chunked\nVary |\t告诉下游代理是使用缓存响应还是从原始服务器请求 |\tVary: *\nVia |\t告知代理客户端响应是通过哪里发送的 |\tVia: 1.0 fred, 1.1 nowhere.com (Apache/1.1)\nWarning |\t警告实体可能存在的问题 |\tWarning: 199 Miscellaneous warning\nWWW-Authenticate |\t表明客户端请求实体应该使用的授权方案 |\tWWW-Authenticate: Basic\n\n### 请求头(Request Headers)\n\nheader  | 含义 | 示例\n---|---|---\nAccept |\t指定客户端能够接收的内容类型 |\tAccept: text/plain, text/html\nAccept-Charset |\t浏览器可以接受的字符编码集。 |\tAccept-Charset: iso-8859-5\nAccept-Encoding |\t指定浏览器可以支持的web服务器返回内容压缩编码类型。 |\tAccept-Encoding: compress, gzip\nAccept-Language |\t浏览器可接受的语言 |\tAccept-Language: en,zh\nAccept-Ranges |\t可以请求网页实体的一个或者多个子范围字段 |\tAccept-Ranges: bytes\nAuthorization |\tHTTP授权的授权证书 |\tAuthorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\nCache-Control |\t指定请求和响应遵循的缓存机制 |\tCache-Control: no-cache\nConnection |\t表示是否需要持久连接。（HTTP 1.1默认进行持久连接） |\tConnection: close\nCookie |\tHTTP请求发送时，会把保存在该请求域名下的所有cookie值一起发送给web服务器。 |\tCookie: $Version=1; Skin=new;\nContent-Length |\t请求的内容长度 |\tContent-Length: 348\nContent-Type |\t请求的与实体对应的MIME信息 |\tContent-Type: application/x-www-form-urlencoded\nDate |\t请求发送的日期和时间 |\tDate: Tue, 15 Nov 2010 08:12:31 GMT\nExpect |\t请求的特定的服务器行为 |\tExpect: 100-continue\nFrom |\t发出请求的用户的Email |\tFrom: user@email.com\nHost |\t指定请求的服务器的域名和端口号 |\tHost: www.zcmhi.com\nIf-Match |\t只有请求内容与实体相匹配才有效 |\tIf-Match: “737060cd8c284d8af7ad3082f209582d”\nIf-Modified-Since |\t如果请求的部分在指定时间之后被修改则请求成功，未被修改则返回304代码 |\tIf-Modified-Since: Sat, 29 Oct 2010 19:43:31 GMT\nIf-None-Match |\t如果内容未改变返回304代码，参数为服务器先前发送的Etag，与服务器回应的Etag比较判断是否改变 |\tIf-None-Match: “737060cd8c284d8af7ad3082f209582d”\nIf-Range |\t如果实体未改变，服务器发送客户端丢失的部分，否则发送整个实体。参数也为Etag |\tIf-Range: “737060cd8c284d8af7ad3082f209582d”\nIf-Unmodified-Since |\t只在实体在指定时间之后未被修改才请求成功 |\tIf-Unmodified-Since: Sat, 29 Oct 2010 19:43:31 GMT\nMax-Forwards |\t限制信息通过代理和网关传送的时间 |\tMax-Forwards: 10\nPragma |\t用来包含实现特定的指令 | \tPragma: no-cache\nProxy-Authorization |\t连接到代理的授权证书 |\tProxy-Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\nRange |\t只请求实体的一部分，指定范围 |\tRange: bytes=500-999\nReferer |\t先前网页的地址，当前请求网页紧随其后,即来路 |\tReferer: http://www.zcmhi.com/archives/71.html\nTE |\t客户端愿意接受的传输编码，并通知服务器接受接受尾加头信息 |\tTE: trailers,deflate;q=0.5\nUpgrade |\t向服务器指定某种传输协议以便服务器进行转换（如果支持） |\tUpgrade: HTTP/2.0, SHTTP/1.3, IRC/6.9, RTA/x11\nUser-Agent |\tUser-Agent的内容包含发出请求的用户信息 |\tUser-Agent: Mozilla/5.0 (Linux; X11)\nVia |\t通知中间网关或代理服务器地址，通信协议| \tVia: 1.0 fred, 1.1 nowhere.com (Apache/1.1)\nWarning |\t关于消息实体的警告信息 |\tWarn: 199 Miscellaneous warning","slug":"计网/计网：http的header字段","published":1,"updated":"2022-07-22T07:57:36.134Z","layout":"post","photos":[],"link":"","_id":"cl5wb2yoa00gfcj38z11gorh0","content":"<p>http头 = 通用头 + 请求头 + 响应头</p>\n<h3 id=\"通用头-General\"><a href=\"#通用头-General\" class=\"headerlink\" title=\"通用头(General)\"></a>通用头(General)</h3><p>通用头域包含请求和响应消息都支持的头域，提供了与报文相关的最基本的信息。</p>\n<p><img src=\"https://img-blog.csdn.net/20170919180331072?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDQyOTQyNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"image\"></p>\n<table>\n<thead>\n<tr>\n<th>header</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Request URL</td>\n<td>请求的URL</td>\n</tr>\n<tr>\n<td>Request Method</td>\n<td>请求的方法 </td>\n</tr>\n<tr>\n<td>Status Code</td>\n<td>HTTP 状态码</td>\n</tr>\n<tr>\n<td>Remote Address</td>\n<td>远程IP地址 </td>\n</tr>\n<tr>\n<td>Referrer Policy</td>\n<td>记录了是从哪个链接跳来的</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"响应头-Response-Headers\"><a href=\"#响应头-Response-Headers\" class=\"headerlink\" title=\"响应头(Response Headers)\"></a>响应头(Response Headers)</h3><table>\n<thead>\n<tr>\n<th>header</th>\n<th>含义</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Accept-Ranges</td>\n<td>表明服务器是否支持指定范围请求及哪种类型的分段请求</td>\n<td>Accept-Ranges: bytes</td>\n</tr>\n<tr>\n<td>Age</td>\n<td>从原始服务器到代理缓存形成的估算时间（以秒计，非负）</td>\n<td>Age: 12</td>\n</tr>\n<tr>\n<td>Allow</td>\n<td>对某网络资源的有效的请求行为，不允许则返回405</td>\n<td>Allow: GET, HEAD</td>\n</tr>\n<tr>\n<td>Cache-Control</td>\n<td>告诉所有的缓存机制是否可以缓存及哪种类型</td>\n<td>Cache-Control: no-cache</td>\n</tr>\n<tr>\n<td>Content-Encoding</td>\n<td>web服务器支持的返回内容压缩编码类型。</td>\n<td>Content-Encoding: gzip</td>\n</tr>\n<tr>\n<td>Content-Language</td>\n<td>响应体的语言</td>\n<td>Content-Language: en,zh</td>\n</tr>\n<tr>\n<td>Content-Length</td>\n<td>响应体的长度</td>\n<td>Content-Length: 348</td>\n</tr>\n<tr>\n<td>Content-Location</td>\n<td>请求资源可替代的备用的另一地址</td>\n<td>Content-Location: /index.htm</td>\n</tr>\n<tr>\n<td>Content-MD5</td>\n<td>返回资源的MD5校验值</td>\n<td>Content-MD5: Q2hlY2sgSW50ZWdyaXR5IQ==</td>\n</tr>\n<tr>\n<td>Content-Range</td>\n<td>在整个返回体中本部分的字节位置</td>\n<td>Content-Range: bytes 21010-47021/47022</td>\n</tr>\n<tr>\n<td>Content-Type</td>\n<td>返回内容的MIME类型</td>\n<td>Content-Type: text/html; charset=utf-8</td>\n</tr>\n<tr>\n<td>Date</td>\n<td>原始服务器消息发出的时间</td>\n<td>Date: Tue, 15 Nov 2010 08:12:31 GMT</td>\n</tr>\n<tr>\n<td>ETag</td>\n<td>请求变量的实体标签的当前值</td>\n<td>ETag: “737060cd8c284d8af7ad3082f209582d”</td>\n</tr>\n<tr>\n<td>Expires</td>\n<td>响应过期的日期和时间</td>\n<td>Expires: Thu, 01 Dec 2010 16:00:00 GMT</td>\n</tr>\n<tr>\n<td>Last-Modified</td>\n<td>请求资源的最后修改时间</td>\n<td>Last-Modified: Tue, 15 Nov 2010 12:45:26 GMT</td>\n</tr>\n<tr>\n<td>Location</td>\n<td>用来重定向接收方到非请求URL的位置来完成请求或标识新的资源</td>\n<td>Location: <a href=\"http://www.zcmhi.com/archives/94.html\" target=\"_blank\" rel=\"noopener\">http://www.zcmhi.com/archives/94.html</a></td>\n</tr>\n<tr>\n<td>Pragma</td>\n<td>包括实现特定的指令，它可应用到响应链上的任何接收方</td>\n<td>Pragma: no-cache</td>\n</tr>\n<tr>\n<td>Proxy-Authenticate</td>\n<td>它指出认证方案和可应用到代理的该URL上的参数</td>\n<td>Proxy-Authenticate: Basic</td>\n</tr>\n<tr>\n<td>refresh</td>\n<td>应用于重定向或一个新的资源被创造，在5秒之后重定向（由网景提出，被大部分浏览器支持）</td>\n<td>Refresh: 5; url=<a href=\"http://www.zcmhi.com/archives/94.html\" target=\"_blank\" rel=\"noopener\">http://www.zcmhi.com/archives/94.html</a></td>\n</tr>\n<tr>\n<td>Retry-After</td>\n<td>如果实体暂时不可取，通知客户端在指定时间之后再次尝试</td>\n<td>Retry-After: 120</td>\n</tr>\n<tr>\n<td>Server</td>\n<td>web服务器软件名称</td>\n<td>Server: Apache/1.3.27 (Unix) (Red-Hat/Linux)</td>\n</tr>\n<tr>\n<td>Set-Cookie</td>\n<td>设置Http Cookie</td>\n<td>Set-Cookie: UserID=JohnDoe; Max-Age=3600; Version=1</td>\n</tr>\n<tr>\n<td>Trailer</td>\n<td>指出头域在分块传输编码的尾部存在</td>\n<td>Trailer: Max-Forwards</td>\n</tr>\n<tr>\n<td>Transfer-Encoding</td>\n<td>文件传输编码</td>\n<td>Transfer-Encoding:chunked</td>\n</tr>\n<tr>\n<td>Vary</td>\n<td>告诉下游代理是使用缓存响应还是从原始服务器请求</td>\n<td>Vary: *</td>\n</tr>\n<tr>\n<td>Via</td>\n<td>告知代理客户端响应是通过哪里发送的</td>\n<td>Via: 1.0 fred, 1.1 nowhere.com (Apache/1.1)</td>\n</tr>\n<tr>\n<td>Warning</td>\n<td>警告实体可能存在的问题</td>\n<td>Warning: 199 Miscellaneous warning</td>\n</tr>\n<tr>\n<td>WWW-Authenticate</td>\n<td>表明客户端请求实体应该使用的授权方案</td>\n<td>WWW-Authenticate: Basic</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"请求头-Request-Headers\"><a href=\"#请求头-Request-Headers\" class=\"headerlink\" title=\"请求头(Request Headers)\"></a>请求头(Request Headers)</h3><table>\n<thead>\n<tr>\n<th>header</th>\n<th>含义</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Accept</td>\n<td>指定客户端能够接收的内容类型</td>\n<td>Accept: text/plain, text/html</td>\n</tr>\n<tr>\n<td>Accept-Charset</td>\n<td>浏览器可以接受的字符编码集。</td>\n<td>Accept-Charset: iso-8859-5</td>\n</tr>\n<tr>\n<td>Accept-Encoding</td>\n<td>指定浏览器可以支持的web服务器返回内容压缩编码类型。</td>\n<td>Accept-Encoding: compress, gzip</td>\n</tr>\n<tr>\n<td>Accept-Language</td>\n<td>浏览器可接受的语言</td>\n<td>Accept-Language: en,zh</td>\n</tr>\n<tr>\n<td>Accept-Ranges</td>\n<td>可以请求网页实体的一个或者多个子范围字段</td>\n<td>Accept-Ranges: bytes</td>\n</tr>\n<tr>\n<td>Authorization</td>\n<td>HTTP授权的授权证书</td>\n<td>Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==</td>\n</tr>\n<tr>\n<td>Cache-Control</td>\n<td>指定请求和响应遵循的缓存机制</td>\n<td>Cache-Control: no-cache</td>\n</tr>\n<tr>\n<td>Connection</td>\n<td>表示是否需要持久连接。（HTTP 1.1默认进行持久连接）</td>\n<td>Connection: close</td>\n</tr>\n<tr>\n<td>Cookie</td>\n<td>HTTP请求发送时，会把保存在该请求域名下的所有cookie值一起发送给web服务器。</td>\n<td>Cookie: $Version=1; Skin=new;</td>\n</tr>\n<tr>\n<td>Content-Length</td>\n<td>请求的内容长度</td>\n<td>Content-Length: 348</td>\n</tr>\n<tr>\n<td>Content-Type</td>\n<td>请求的与实体对应的MIME信息</td>\n<td>Content-Type: application/x-www-form-urlencoded</td>\n</tr>\n<tr>\n<td>Date</td>\n<td>请求发送的日期和时间</td>\n<td>Date: Tue, 15 Nov 2010 08:12:31 GMT</td>\n</tr>\n<tr>\n<td>Expect</td>\n<td>请求的特定的服务器行为</td>\n<td>Expect: 100-continue</td>\n</tr>\n<tr>\n<td>From</td>\n<td>发出请求的用户的Email</td>\n<td>From: <a href=\"mailto:user@email.com\" target=\"_blank\" rel=\"noopener\">user@email.com</a></td>\n</tr>\n<tr>\n<td>Host</td>\n<td>指定请求的服务器的域名和端口号</td>\n<td>Host: <a href=\"http://www.zcmhi.com\" target=\"_blank\" rel=\"noopener\">www.zcmhi.com</a></td>\n</tr>\n<tr>\n<td>If-Match</td>\n<td>只有请求内容与实体相匹配才有效</td>\n<td>If-Match: “737060cd8c284d8af7ad3082f209582d”</td>\n</tr>\n<tr>\n<td>If-Modified-Since</td>\n<td>如果请求的部分在指定时间之后被修改则请求成功，未被修改则返回304代码</td>\n<td>If-Modified-Since: Sat, 29 Oct 2010 19:43:31 GMT</td>\n</tr>\n<tr>\n<td>If-None-Match</td>\n<td>如果内容未改变返回304代码，参数为服务器先前发送的Etag，与服务器回应的Etag比较判断是否改变</td>\n<td>If-None-Match: “737060cd8c284d8af7ad3082f209582d”</td>\n</tr>\n<tr>\n<td>If-Range</td>\n<td>如果实体未改变，服务器发送客户端丢失的部分，否则发送整个实体。参数也为Etag</td>\n<td>If-Range: “737060cd8c284d8af7ad3082f209582d”</td>\n</tr>\n<tr>\n<td>If-Unmodified-Since</td>\n<td>只在实体在指定时间之后未被修改才请求成功</td>\n<td>If-Unmodified-Since: Sat, 29 Oct 2010 19:43:31 GMT</td>\n</tr>\n<tr>\n<td>Max-Forwards</td>\n<td>限制信息通过代理和网关传送的时间</td>\n<td>Max-Forwards: 10</td>\n</tr>\n<tr>\n<td>Pragma</td>\n<td>用来包含实现特定的指令</td>\n<td>Pragma: no-cache</td>\n</tr>\n<tr>\n<td>Proxy-Authorization</td>\n<td>连接到代理的授权证书</td>\n<td>Proxy-Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==</td>\n</tr>\n<tr>\n<td>Range</td>\n<td>只请求实体的一部分，指定范围</td>\n<td>Range: bytes=500-999</td>\n</tr>\n<tr>\n<td>Referer</td>\n<td>先前网页的地址，当前请求网页紧随其后,即来路</td>\n<td>Referer: <a href=\"http://www.zcmhi.com/archives/71.html\" target=\"_blank\" rel=\"noopener\">http://www.zcmhi.com/archives/71.html</a></td>\n</tr>\n<tr>\n<td>TE</td>\n<td>客户端愿意接受的传输编码，并通知服务器接受接受尾加头信息</td>\n<td>TE: trailers,deflate;q=0.5</td>\n</tr>\n<tr>\n<td>Upgrade</td>\n<td>向服务器指定某种传输协议以便服务器进行转换（如果支持）</td>\n<td>Upgrade: HTTP/2.0, SHTTP/1.3, IRC/6.9, RTA/x11</td>\n</tr>\n<tr>\n<td>User-Agent</td>\n<td>User-Agent的内容包含发出请求的用户信息</td>\n<td>User-Agent: Mozilla/5.0 (Linux; X11)</td>\n</tr>\n<tr>\n<td>Via</td>\n<td>通知中间网关或代理服务器地址，通信协议</td>\n<td>Via: 1.0 fred, 1.1 nowhere.com (Apache/1.1)</td>\n</tr>\n<tr>\n<td>Warning</td>\n<td>关于消息实体的警告信息</td>\n<td>Warn: 199 Miscellaneous warning</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<p>http头 = 通用头 + 请求头 + 响应头</p>\n<h3 id=\"通用头-General\"><a href=\"#通用头-General\" class=\"headerlink\" title=\"通用头(General)\"></a>通用头(General)</h3><p>通用头域包含请求和响应消息都支持的头域，提供了与报文相关的最基本的信息。</p>\n<p><img src=\"https://img-blog.csdn.net/20170919180331072?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDQyOTQyNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"image\"></p>\n<table>\n<thead>\n<tr>\n<th>header</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Request URL</td>\n<td>请求的URL</td>\n</tr>\n<tr>\n<td>Request Method</td>\n<td>请求的方法 </td>\n</tr>\n<tr>\n<td>Status Code</td>\n<td>HTTP 状态码</td>\n</tr>\n<tr>\n<td>Remote Address</td>\n<td>远程IP地址 </td>\n</tr>\n<tr>\n<td>Referrer Policy</td>\n<td>记录了是从哪个链接跳来的</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"响应头-Response-Headers\"><a href=\"#响应头-Response-Headers\" class=\"headerlink\" title=\"响应头(Response Headers)\"></a>响应头(Response Headers)</h3><table>\n<thead>\n<tr>\n<th>header</th>\n<th>含义</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Accept-Ranges</td>\n<td>表明服务器是否支持指定范围请求及哪种类型的分段请求</td>\n<td>Accept-Ranges: bytes</td>\n</tr>\n<tr>\n<td>Age</td>\n<td>从原始服务器到代理缓存形成的估算时间（以秒计，非负）</td>\n<td>Age: 12</td>\n</tr>\n<tr>\n<td>Allow</td>\n<td>对某网络资源的有效的请求行为，不允许则返回405</td>\n<td>Allow: GET, HEAD</td>\n</tr>\n<tr>\n<td>Cache-Control</td>\n<td>告诉所有的缓存机制是否可以缓存及哪种类型</td>\n<td>Cache-Control: no-cache</td>\n</tr>\n<tr>\n<td>Content-Encoding</td>\n<td>web服务器支持的返回内容压缩编码类型。</td>\n<td>Content-Encoding: gzip</td>\n</tr>\n<tr>\n<td>Content-Language</td>\n<td>响应体的语言</td>\n<td>Content-Language: en,zh</td>\n</tr>\n<tr>\n<td>Content-Length</td>\n<td>响应体的长度</td>\n<td>Content-Length: 348</td>\n</tr>\n<tr>\n<td>Content-Location</td>\n<td>请求资源可替代的备用的另一地址</td>\n<td>Content-Location: /index.htm</td>\n</tr>\n<tr>\n<td>Content-MD5</td>\n<td>返回资源的MD5校验值</td>\n<td>Content-MD5: Q2hlY2sgSW50ZWdyaXR5IQ==</td>\n</tr>\n<tr>\n<td>Content-Range</td>\n<td>在整个返回体中本部分的字节位置</td>\n<td>Content-Range: bytes 21010-47021/47022</td>\n</tr>\n<tr>\n<td>Content-Type</td>\n<td>返回内容的MIME类型</td>\n<td>Content-Type: text/html; charset=utf-8</td>\n</tr>\n<tr>\n<td>Date</td>\n<td>原始服务器消息发出的时间</td>\n<td>Date: Tue, 15 Nov 2010 08:12:31 GMT</td>\n</tr>\n<tr>\n<td>ETag</td>\n<td>请求变量的实体标签的当前值</td>\n<td>ETag: “737060cd8c284d8af7ad3082f209582d”</td>\n</tr>\n<tr>\n<td>Expires</td>\n<td>响应过期的日期和时间</td>\n<td>Expires: Thu, 01 Dec 2010 16:00:00 GMT</td>\n</tr>\n<tr>\n<td>Last-Modified</td>\n<td>请求资源的最后修改时间</td>\n<td>Last-Modified: Tue, 15 Nov 2010 12:45:26 GMT</td>\n</tr>\n<tr>\n<td>Location</td>\n<td>用来重定向接收方到非请求URL的位置来完成请求或标识新的资源</td>\n<td>Location: <a href=\"http://www.zcmhi.com/archives/94.html\" target=\"_blank\" rel=\"noopener\">http://www.zcmhi.com/archives/94.html</a></td>\n</tr>\n<tr>\n<td>Pragma</td>\n<td>包括实现特定的指令，它可应用到响应链上的任何接收方</td>\n<td>Pragma: no-cache</td>\n</tr>\n<tr>\n<td>Proxy-Authenticate</td>\n<td>它指出认证方案和可应用到代理的该URL上的参数</td>\n<td>Proxy-Authenticate: Basic</td>\n</tr>\n<tr>\n<td>refresh</td>\n<td>应用于重定向或一个新的资源被创造，在5秒之后重定向（由网景提出，被大部分浏览器支持）</td>\n<td>Refresh: 5; url=<a href=\"http://www.zcmhi.com/archives/94.html\" target=\"_blank\" rel=\"noopener\">http://www.zcmhi.com/archives/94.html</a></td>\n</tr>\n<tr>\n<td>Retry-After</td>\n<td>如果实体暂时不可取，通知客户端在指定时间之后再次尝试</td>\n<td>Retry-After: 120</td>\n</tr>\n<tr>\n<td>Server</td>\n<td>web服务器软件名称</td>\n<td>Server: Apache/1.3.27 (Unix) (Red-Hat/Linux)</td>\n</tr>\n<tr>\n<td>Set-Cookie</td>\n<td>设置Http Cookie</td>\n<td>Set-Cookie: UserID=JohnDoe; Max-Age=3600; Version=1</td>\n</tr>\n<tr>\n<td>Trailer</td>\n<td>指出头域在分块传输编码的尾部存在</td>\n<td>Trailer: Max-Forwards</td>\n</tr>\n<tr>\n<td>Transfer-Encoding</td>\n<td>文件传输编码</td>\n<td>Transfer-Encoding:chunked</td>\n</tr>\n<tr>\n<td>Vary</td>\n<td>告诉下游代理是使用缓存响应还是从原始服务器请求</td>\n<td>Vary: *</td>\n</tr>\n<tr>\n<td>Via</td>\n<td>告知代理客户端响应是通过哪里发送的</td>\n<td>Via: 1.0 fred, 1.1 nowhere.com (Apache/1.1)</td>\n</tr>\n<tr>\n<td>Warning</td>\n<td>警告实体可能存在的问题</td>\n<td>Warning: 199 Miscellaneous warning</td>\n</tr>\n<tr>\n<td>WWW-Authenticate</td>\n<td>表明客户端请求实体应该使用的授权方案</td>\n<td>WWW-Authenticate: Basic</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"请求头-Request-Headers\"><a href=\"#请求头-Request-Headers\" class=\"headerlink\" title=\"请求头(Request Headers)\"></a>请求头(Request Headers)</h3><table>\n<thead>\n<tr>\n<th>header</th>\n<th>含义</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Accept</td>\n<td>指定客户端能够接收的内容类型</td>\n<td>Accept: text/plain, text/html</td>\n</tr>\n<tr>\n<td>Accept-Charset</td>\n<td>浏览器可以接受的字符编码集。</td>\n<td>Accept-Charset: iso-8859-5</td>\n</tr>\n<tr>\n<td>Accept-Encoding</td>\n<td>指定浏览器可以支持的web服务器返回内容压缩编码类型。</td>\n<td>Accept-Encoding: compress, gzip</td>\n</tr>\n<tr>\n<td>Accept-Language</td>\n<td>浏览器可接受的语言</td>\n<td>Accept-Language: en,zh</td>\n</tr>\n<tr>\n<td>Accept-Ranges</td>\n<td>可以请求网页实体的一个或者多个子范围字段</td>\n<td>Accept-Ranges: bytes</td>\n</tr>\n<tr>\n<td>Authorization</td>\n<td>HTTP授权的授权证书</td>\n<td>Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==</td>\n</tr>\n<tr>\n<td>Cache-Control</td>\n<td>指定请求和响应遵循的缓存机制</td>\n<td>Cache-Control: no-cache</td>\n</tr>\n<tr>\n<td>Connection</td>\n<td>表示是否需要持久连接。（HTTP 1.1默认进行持久连接）</td>\n<td>Connection: close</td>\n</tr>\n<tr>\n<td>Cookie</td>\n<td>HTTP请求发送时，会把保存在该请求域名下的所有cookie值一起发送给web服务器。</td>\n<td>Cookie: $Version=1; Skin=new;</td>\n</tr>\n<tr>\n<td>Content-Length</td>\n<td>请求的内容长度</td>\n<td>Content-Length: 348</td>\n</tr>\n<tr>\n<td>Content-Type</td>\n<td>请求的与实体对应的MIME信息</td>\n<td>Content-Type: application/x-www-form-urlencoded</td>\n</tr>\n<tr>\n<td>Date</td>\n<td>请求发送的日期和时间</td>\n<td>Date: Tue, 15 Nov 2010 08:12:31 GMT</td>\n</tr>\n<tr>\n<td>Expect</td>\n<td>请求的特定的服务器行为</td>\n<td>Expect: 100-continue</td>\n</tr>\n<tr>\n<td>From</td>\n<td>发出请求的用户的Email</td>\n<td>From: <a href=\"mailto:user@email.com\" target=\"_blank\" rel=\"noopener\">user@email.com</a></td>\n</tr>\n<tr>\n<td>Host</td>\n<td>指定请求的服务器的域名和端口号</td>\n<td>Host: <a href=\"http://www.zcmhi.com\" target=\"_blank\" rel=\"noopener\">www.zcmhi.com</a></td>\n</tr>\n<tr>\n<td>If-Match</td>\n<td>只有请求内容与实体相匹配才有效</td>\n<td>If-Match: “737060cd8c284d8af7ad3082f209582d”</td>\n</tr>\n<tr>\n<td>If-Modified-Since</td>\n<td>如果请求的部分在指定时间之后被修改则请求成功，未被修改则返回304代码</td>\n<td>If-Modified-Since: Sat, 29 Oct 2010 19:43:31 GMT</td>\n</tr>\n<tr>\n<td>If-None-Match</td>\n<td>如果内容未改变返回304代码，参数为服务器先前发送的Etag，与服务器回应的Etag比较判断是否改变</td>\n<td>If-None-Match: “737060cd8c284d8af7ad3082f209582d”</td>\n</tr>\n<tr>\n<td>If-Range</td>\n<td>如果实体未改变，服务器发送客户端丢失的部分，否则发送整个实体。参数也为Etag</td>\n<td>If-Range: “737060cd8c284d8af7ad3082f209582d”</td>\n</tr>\n<tr>\n<td>If-Unmodified-Since</td>\n<td>只在实体在指定时间之后未被修改才请求成功</td>\n<td>If-Unmodified-Since: Sat, 29 Oct 2010 19:43:31 GMT</td>\n</tr>\n<tr>\n<td>Max-Forwards</td>\n<td>限制信息通过代理和网关传送的时间</td>\n<td>Max-Forwards: 10</td>\n</tr>\n<tr>\n<td>Pragma</td>\n<td>用来包含实现特定的指令</td>\n<td>Pragma: no-cache</td>\n</tr>\n<tr>\n<td>Proxy-Authorization</td>\n<td>连接到代理的授权证书</td>\n<td>Proxy-Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==</td>\n</tr>\n<tr>\n<td>Range</td>\n<td>只请求实体的一部分，指定范围</td>\n<td>Range: bytes=500-999</td>\n</tr>\n<tr>\n<td>Referer</td>\n<td>先前网页的地址，当前请求网页紧随其后,即来路</td>\n<td>Referer: <a href=\"http://www.zcmhi.com/archives/71.html\" target=\"_blank\" rel=\"noopener\">http://www.zcmhi.com/archives/71.html</a></td>\n</tr>\n<tr>\n<td>TE</td>\n<td>客户端愿意接受的传输编码，并通知服务器接受接受尾加头信息</td>\n<td>TE: trailers,deflate;q=0.5</td>\n</tr>\n<tr>\n<td>Upgrade</td>\n<td>向服务器指定某种传输协议以便服务器进行转换（如果支持）</td>\n<td>Upgrade: HTTP/2.0, SHTTP/1.3, IRC/6.9, RTA/x11</td>\n</tr>\n<tr>\n<td>User-Agent</td>\n<td>User-Agent的内容包含发出请求的用户信息</td>\n<td>User-Agent: Mozilla/5.0 (Linux; X11)</td>\n</tr>\n<tr>\n<td>Via</td>\n<td>通知中间网关或代理服务器地址，通信协议</td>\n<td>Via: 1.0 fred, 1.1 nowhere.com (Apache/1.1)</td>\n</tr>\n<tr>\n<td>Warning</td>\n<td>关于消息实体的警告信息</td>\n<td>Warn: 199 Miscellaneous warning</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"计网：计算机网络体系结构","date":"2019-04-11T16:00:00.000Z","comments":1,"_content":"\n\n### TCP/IP体系结构\n#### 五层协议\n- 应用层（http，ftp）\n- 运输层（TCP，UDP）\n- 网络层（IP）\n- 数据链路层\n- 物理层\n\n#### 四层协议\n- 应用层（http，ftp）\n- 运输层（TCP，UDP）\n- 网际层IP\n- 网络接口层\n\n### OSI模型\n- 应用层（HTTP）\n- 表示层\n- 会话层（SSL\\TLS）\n- 运输层（TCP，UDP）\n- 网络层（IP）\n- 数据链路层\n- 物理层\n","source":"_posts/计网/计网：计算机网络体系结构.md","raw":"---\ntitle: 计网：计算机网络体系结构\ndate: 2019-04-12\ntags: [计网]\ncategories: 计网\ncomments: true\n---\n\n\n### TCP/IP体系结构\n#### 五层协议\n- 应用层（http，ftp）\n- 运输层（TCP，UDP）\n- 网络层（IP）\n- 数据链路层\n- 物理层\n\n#### 四层协议\n- 应用层（http，ftp）\n- 运输层（TCP，UDP）\n- 网际层IP\n- 网络接口层\n\n### OSI模型\n- 应用层（HTTP）\n- 表示层\n- 会话层（SSL\\TLS）\n- 运输层（TCP，UDP）\n- 网络层（IP）\n- 数据链路层\n- 物理层\n","slug":"计网/计网：计算机网络体系结构","published":1,"updated":"2022-07-22T07:58:17.658Z","layout":"post","photos":[],"link":"","_id":"cl5wb2yob00ghcj382pv4m3rg","content":"<h3 id=\"TCP-IP体系结构\"><a href=\"#TCP-IP体系结构\" class=\"headerlink\" title=\"TCP/IP体系结构\"></a>TCP/IP体系结构</h3><h4 id=\"五层协议\"><a href=\"#五层协议\" class=\"headerlink\" title=\"五层协议\"></a>五层协议</h4><ul>\n<li>应用层（http，ftp）</li>\n<li>运输层（TCP，UDP）</li>\n<li>网络层（IP）</li>\n<li>数据链路层</li>\n<li>物理层</li>\n</ul>\n<h4 id=\"四层协议\"><a href=\"#四层协议\" class=\"headerlink\" title=\"四层协议\"></a>四层协议</h4><ul>\n<li>应用层（http，ftp）</li>\n<li>运输层（TCP，UDP）</li>\n<li>网际层IP</li>\n<li>网络接口层</li>\n</ul>\n<h3 id=\"OSI模型\"><a href=\"#OSI模型\" class=\"headerlink\" title=\"OSI模型\"></a>OSI模型</h3><ul>\n<li>应用层（HTTP）</li>\n<li>表示层</li>\n<li>会话层（SSL\\TLS）</li>\n<li>运输层（TCP，UDP）</li>\n<li>网络层（IP）</li>\n<li>数据链路层</li>\n<li>物理层</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"TCP-IP体系结构\"><a href=\"#TCP-IP体系结构\" class=\"headerlink\" title=\"TCP/IP体系结构\"></a>TCP/IP体系结构</h3><h4 id=\"五层协议\"><a href=\"#五层协议\" class=\"headerlink\" title=\"五层协议\"></a>五层协议</h4><ul>\n<li>应用层（http，ftp）</li>\n<li>运输层（TCP，UDP）</li>\n<li>网络层（IP）</li>\n<li>数据链路层</li>\n<li>物理层</li>\n</ul>\n<h4 id=\"四层协议\"><a href=\"#四层协议\" class=\"headerlink\" title=\"四层协议\"></a>四层协议</h4><ul>\n<li>应用层（http，ftp）</li>\n<li>运输层（TCP，UDP）</li>\n<li>网际层IP</li>\n<li>网络接口层</li>\n</ul>\n<h3 id=\"OSI模型\"><a href=\"#OSI模型\" class=\"headerlink\" title=\"OSI模型\"></a>OSI模型</h3><ul>\n<li>应用层（HTTP）</li>\n<li>表示层</li>\n<li>会话层（SSL\\TLS）</li>\n<li>运输层（TCP，UDP）</li>\n<li>网络层（IP）</li>\n<li>数据链路层</li>\n<li>物理层</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cl5wb2yme00a6cj38tgrgo6mu","category_id":"cl5wb2ymg00abcj38vdw4bxxz","_id":"cl5wb2yms00becj38arq6ymqf"},{"post_id":"cl5wb2ymf00a9cj38sgjan4j9","category_id":"cl5wb2ymg00abcj38vdw4bxxz","_id":"cl5wb2ymu00bmcj38zp6p87zc"},{"post_id":"cl5wb2ymg00aecj38pwid6nvc","category_id":"cl5wb2ymg00abcj38vdw4bxxz","_id":"cl5wb2ymv00bpcj38dl4nnark"},{"post_id":"cl5wb2ymk00apcj38002ww6sz","category_id":"cl5wb2ymp00b1cj382kn36zcf","_id":"cl5wb2ymw00bucj38mv31ghtp"},{"post_id":"cl5wb2yml00ascj38hui4yiqq","category_id":"cl5wb2ymp00b1cj382kn36zcf","_id":"cl5wb2ymx00bxcj38dlf1sanw"},{"post_id":"cl5wb2ymn00axcj38aj2zu21b","category_id":"cl5wb2ymt00bicj385nuuo5a6","_id":"cl5wb2ymy00c1cj384q7fiet5"},{"post_id":"cl5wb2ymo00b0cj380g2ct679","category_id":"cl5wb2ymv00bqcj38afhofge8","_id":"cl5wb2ymz00c4cj38rq6wly6f"},{"post_id":"cl5wb2ymq00b5cj38hfumyoug","category_id":"cl5wb2ymx00bycj386yq10jaf","_id":"cl5wb2yn100cccj389xlg0737"},{"post_id":"cl5wb2ymq00b8cj38uaki1j4t","category_id":"cl5wb2ymt00bicj385nuuo5a6","_id":"cl5wb2yn300chcj38f8ah1x07"},{"post_id":"cl5wb2yms00bdcj38qf1tm5zm","category_id":"cl5wb2yn100cbcj386uwgapv7","_id":"cl5wb2yn400cncj38v6x1nylj"},{"post_id":"cl5wb2yms00bgcj38yd1mycln","category_id":"cl5wb2yn300cicj383jhajsmf","_id":"cl5wb2yn600ctcj38xjtuy9y4"},{"post_id":"cl5wb2yn500cqcj38r6eobbbb","category_id":"cl5wb2yn400cocj38p30exwqp","_id":"cl5wb2yn800d0cj38mayapw15"},{"post_id":"cl5wb2ymu00blcj38svn9gb81","category_id":"cl5wb2yn400cocj38p30exwqp","_id":"cl5wb2yna00d5cj38ixga4xpr"},{"post_id":"cl5wb2yn600cscj381rwcqqlu","category_id":"cl5wb2yn400cocj38p30exwqp","_id":"cl5wb2ynb00d8cj38bkfkdr34"},{"post_id":"cl5wb2yn700cxcj38mzl4u7hr","category_id":"cl5wb2yn400cocj38p30exwqp","_id":"cl5wb2ync00ddcj38bnqsk15h"},{"post_id":"cl5wb2ymu00bocj38ihyzigll","category_id":"cl5wb2yn400cocj38p30exwqp","_id":"cl5wb2ynd00dgcj38vju0qkxf"},{"post_id":"cl5wb2yn800czcj38dz86wbrb","category_id":"cl5wb2yn400cocj38p30exwqp","_id":"cl5wb2yne00dlcj385b9fz0d9"},{"post_id":"cl5wb2yn900d4cj38mg76w3ci","category_id":"cl5wb2yn400cocj38p30exwqp","_id":"cl5wb2yng00docj38g9iocwgx"},{"post_id":"cl5wb2ymv00btcj38fptby8mn","category_id":"cl5wb2yn400cocj38p30exwqp","_id":"cl5wb2ynh00dtcj38eoi7tpcw"},{"post_id":"cl5wb2yna00d7cj38rh4evagr","category_id":"cl5wb2yn400cocj38p30exwqp","_id":"cl5wb2yni00dwcj38mnhj0iii"},{"post_id":"cl5wb2ynb00dccj382juecedr","category_id":"cl5wb2yn400cocj38p30exwqp","_id":"cl5wb2ynk00e1cj38fgusid4h"},{"post_id":"cl5wb2ymw00bwcj38dscx6qjp","category_id":"cl5wb2yn400cocj38p30exwqp","_id":"cl5wb2ynl00e4cj38jftkimwn"},{"post_id":"cl5wb2ynd00dfcj386q5awx74","category_id":"cl5wb2yn400cocj38p30exwqp","_id":"cl5wb2ynn00e9cj38ttj8xofz"},{"post_id":"cl5wb2yne00dkcj38ac5zxikb","category_id":"cl5wb2yn400cocj38p30exwqp","_id":"cl5wb2yno00eccj38ytk30lny"},{"post_id":"cl5wb2ymx00c0cj38eiaonriv","category_id":"cl5wb2yn400cocj38p30exwqp","_id":"cl5wb2ynp00ehcj382o21knnq"},{"post_id":"cl5wb2ynf00dncj38ysu1y1m7","category_id":"cl5wb2yn400cocj38p30exwqp","_id":"cl5wb2ynq00ekcj38t1icuphh"},{"post_id":"cl5wb2yng00dscj38elosf6a7","category_id":"cl5wb2yn400cocj38p30exwqp","_id":"cl5wb2ynr00epcj38gcrd1xrg"},{"post_id":"cl5wb2ymy00c3cj385x5ug78u","category_id":"cl5wb2yn400cocj38p30exwqp","_id":"cl5wb2yns00escj38onh2347b"},{"post_id":"cl5wb2ymz00c5cj384gpqt2p2","category_id":"cl5wb2yn400cocj38p30exwqp","_id":"cl5wb2ynu00excj38usxknl78"},{"post_id":"cl5wb2ynk00e3cj38fo2bcaaw","category_id":"cl5wb2yn400cocj38p30exwqp","_id":"cl5wb2ynv00f0cj38wzy3gomb"},{"post_id":"cl5wb2yn000c9cj386tvnlnmf","category_id":"cl5wb2yn400cocj38p30exwqp","_id":"cl5wb2ynw00f5cj385mkevd8h"},{"post_id":"cl5wb2yn100cacj38g1wykm5x","category_id":"cl5wb2yn400cocj38p30exwqp","_id":"cl5wb2ynx00f8cj38t36swbat"},{"post_id":"cl5wb2yn200cfcj38s4frgqle","category_id":"cl5wb2yn400cocj38p30exwqp","_id":"cl5wb2yny00fdcj38140kyxwc"},{"post_id":"cl5wb2yn200cgcj387ohbdtxz","category_id":"cl5wb2yn400cocj38p30exwqp","_id":"cl5wb2ynz00fgcj38mj9h8gkx"},{"post_id":"cl5wb2yn300ckcj38ff04o1n6","category_id":"cl5wb2yn400cocj38p30exwqp","_id":"cl5wb2yo000fkcj38hc4wt6nc"},{"post_id":"cl5wb2yn400cmcj389e818l05","category_id":"cl5wb2yn400cocj38p30exwqp","_id":"cl5wb2yo100fncj38d0p8dqoy"},{"post_id":"cl5wb2yo000fmcj38hjkv93cr","category_id":"cl5wb2ynz00fhcj38tr4j0j2s","_id":"cl5wb2yo400fvcj38l9zbhsfb"},{"post_id":"cl5wb2ynh00dvcj38ylqj8gov","category_id":"cl5wb2ynz00fhcj38tr4j0j2s","_id":"cl5wb2yo600g0cj38nl37wwdn"},{"post_id":"cl5wb2yo100focj38h0xzzwut","category_id":"cl5wb2ynz00fhcj38tr4j0j2s","_id":"cl5wb2yo700g3cj380snho4cl"},{"post_id":"cl5wb2ynj00e0cj38tf84n437","category_id":"cl5wb2ynz00fhcj38tr4j0j2s","_id":"cl5wb2yo800g8cj38ub5h0hpx"},{"post_id":"cl5wb2yo400fucj386b7fa48t","category_id":"cl5wb2ynz00fhcj38tr4j0j2s","_id":"cl5wb2yo900gbcj38x26p09t6"},{"post_id":"cl5wb2ynm00e8cj389m8ydzgz","category_id":"cl5wb2ynz00fhcj38tr4j0j2s","_id":"cl5wb2yob00ggcj38m8nkzerb"},{"post_id":"cl5wb2ynn00ebcj38z0pc4qru","category_id":"cl5wb2ynz00fhcj38tr4j0j2s","_id":"cl5wb2yoc00gjcj38evmc2ku5"},{"post_id":"cl5wb2yno00egcj38gm3fggnp","category_id":"cl5wb2ynz00fhcj38tr4j0j2s","_id":"cl5wb2yof00gncj38273nuvey"},{"post_id":"cl5wb2ynq00ejcj38t4bboubf","category_id":"cl5wb2ynz00fhcj38tr4j0j2s","_id":"cl5wb2yof00grcj387bspxua2"},{"post_id":"cl5wb2ynr00eocj38lydlxl2e","category_id":"cl5wb2ynz00fhcj38tr4j0j2s","_id":"cl5wb2yog00gvcj38f07ohaz0"},{"post_id":"cl5wb2yns00ercj38rds9wgh1","category_id":"cl5wb2ynz00fhcj38tr4j0j2s","_id":"cl5wb2yoh00gzcj38anh7amoy"},{"post_id":"cl5wb2ynt00ewcj38o9sbzpny","category_id":"cl5wb2ynz00fhcj38tr4j0j2s","_id":"cl5wb2yoi00h3cj38cvsm962c"},{"post_id":"cl5wb2ynu00ezcj380irkst5f","category_id":"cl5wb2ynz00fhcj38tr4j0j2s","_id":"cl5wb2yoi00h7cj38cqius98f"},{"post_id":"cl5wb2ynv00f4cj38ewsyux5a","category_id":"cl5wb2ynz00fhcj38tr4j0j2s","_id":"cl5wb2yok00hbcj38pjj3uade"},{"post_id":"cl5wb2ynw00f7cj388703izmf","category_id":"cl5wb2ynz00fhcj38tr4j0j2s","_id":"cl5wb2yol00hfcj38ctdu870n"},{"post_id":"cl5wb2ynx00fccj38k89u1wrl","category_id":"cl5wb2ynz00fhcj38tr4j0j2s","_id":"cl5wb2yom00hjcj38xss0xnwd"},{"post_id":"cl5wb2yny00ffcj3822v4n2nn","category_id":"cl5wb2ynz00fhcj38tr4j0j2s","_id":"cl5wb2yom00hncj38174dy7ug"},{"post_id":"cl5wb2yo000fjcj38m1untasr","category_id":"cl5wb2ynz00fhcj38tr4j0j2s","_id":"cl5wb2yon00hqcj38mi8myy1h"},{"post_id":"cl5wb2yo300fscj38rc1w5poz","category_id":"cl5wb2yom00hmcj388fd0hv1s","_id":"cl5wb2yoo00hvcj38vzffdqg7"},{"post_id":"cl5wb2yo500fzcj380cj8zv65","category_id":"cl5wb2yom00hmcj388fd0hv1s","_id":"cl5wb2yoo00hzcj38j6vdxood"},{"post_id":"cl5wb2yo600g2cj38por38w28","category_id":"cl5wb2yom00hmcj388fd0hv1s","_id":"cl5wb2yop00i3cj38zlxpw3i3"},{"post_id":"cl5wb2yo800g7cj38eye9ruzh","category_id":"cl5wb2yom00hmcj388fd0hv1s","_id":"cl5wb2yoq00i7cj386ox6jafq"},{"post_id":"cl5wb2yo800gacj38xlri6mh2","category_id":"cl5wb2yom00hmcj388fd0hv1s","_id":"cl5wb2yor00ibcj38o85jcibu"},{"post_id":"cl5wb2yoa00gfcj38z11gorh0","category_id":"cl5wb2yom00hmcj388fd0hv1s","_id":"cl5wb2yor00iecj38ym0c811f"},{"post_id":"cl5wb2yob00ghcj382pv4m3rg","category_id":"cl5wb2yom00hmcj388fd0hv1s","_id":"cl5wb2yos00igcj38berjy8y4"}],"PostTag":[{"post_id":"cl5wb2yme00a6cj38tgrgo6mu","tag_id":"cl5wb2ymg00accj38l76l7ubt","_id":"cl5wb2ymq00b7cj388qfqrqtr"},{"post_id":"cl5wb2ymf00a9cj38sgjan4j9","tag_id":"cl5wb2ymg00accj38l76l7ubt","_id":"cl5wb2yms00bfcj38atr8rnbg"},{"post_id":"cl5wb2ymg00aecj38pwid6nvc","tag_id":"cl5wb2ymg00accj38l76l7ubt","_id":"cl5wb2ymt00bkcj388aeh6drv"},{"post_id":"cl5wb2ymk00apcj38002ww6sz","tag_id":"cl5wb2ymp00b2cj381b3q5fei","_id":"cl5wb2ymu00bncj385x4ce40i"},{"post_id":"cl5wb2yml00ascj38hui4yiqq","tag_id":"cl5wb2ymp00b2cj381b3q5fei","_id":"cl5wb2ymv00bscj38vv64vd2p"},{"post_id":"cl5wb2ymn00axcj38aj2zu21b","tag_id":"cl5wb2ymt00bjcj38uofhdvqy","_id":"cl5wb2ymw00bvcj38n84ves9c"},{"post_id":"cl5wb2ymo00b0cj380g2ct679","tag_id":"cl5wb2ymv00brcj389uhwr89n","_id":"cl5wb2ymy00c2cj380bte6dfe"},{"post_id":"cl5wb2ymq00b5cj38hfumyoug","tag_id":"cl5wb2ymx00bzcj3810kustdd","_id":"cl5wb2yn000c8cj38v9ixp40i"},{"post_id":"cl5wb2ymq00b8cj38uaki1j4t","tag_id":"cl5wb2ymt00bjcj38uofhdvqy","_id":"cl5wb2yn100cecj382unitjgv"},{"post_id":"cl5wb2yms00bdcj38qf1tm5zm","tag_id":"cl5wb2yn100cdcj38vwmths0e","_id":"cl5wb2yn400clcj38pdguioib"},{"post_id":"cl5wb2yms00bgcj38yd1mycln","tag_id":"cl5wb2yn300cjcj381tohxss3","_id":"cl5wb2yn500crcj381z8qab5b"},{"post_id":"cl5wb2yn500cqcj38r6eobbbb","tag_id":"cl5wb2yn500cpcj38uydtah15","_id":"cl5wb2yn600cucj389icmjsb2"},{"post_id":"cl5wb2ymu00blcj38svn9gb81","tag_id":"cl5wb2yn500cpcj38uydtah15","_id":"cl5wb2yn800cycj386sjo1y65"},{"post_id":"cl5wb2yn600cscj381rwcqqlu","tag_id":"cl5wb2yn500cpcj38uydtah15","_id":"cl5wb2yn900d1cj38ymg9hiu7"},{"post_id":"cl5wb2yn700cxcj38mzl4u7hr","tag_id":"cl5wb2yn500cpcj38uydtah15","_id":"cl5wb2yna00d6cj38ydb9osn0"},{"post_id":"cl5wb2ymu00bocj38ihyzigll","tag_id":"cl5wb2yn500cpcj38uydtah15","_id":"cl5wb2ynb00d9cj38rdfanvn9"},{"post_id":"cl5wb2yn800czcj38dz86wbrb","tag_id":"cl5wb2yn500cpcj38uydtah15","_id":"cl5wb2ynd00decj3885s1icds"},{"post_id":"cl5wb2yn900d4cj38mg76w3ci","tag_id":"cl5wb2yn500cpcj38uydtah15","_id":"cl5wb2yne00dhcj387adn0z0m"},{"post_id":"cl5wb2ymv00btcj38fptby8mn","tag_id":"cl5wb2yn500cpcj38uydtah15","_id":"cl5wb2ynf00dmcj38kuo9g3q1"},{"post_id":"cl5wb2yna00d7cj38rh4evagr","tag_id":"cl5wb2yn500cpcj38uydtah15","_id":"cl5wb2yng00dpcj38mlbpmvos"},{"post_id":"cl5wb2ynb00dccj382juecedr","tag_id":"cl5wb2yn500cpcj38uydtah15","_id":"cl5wb2ynh00ducj38w7jtz6bv"},{"post_id":"cl5wb2ymw00bwcj38dscx6qjp","tag_id":"cl5wb2yn500cpcj38uydtah15","_id":"cl5wb2ynj00dxcj38jqgool8u"},{"post_id":"cl5wb2ynd00dfcj386q5awx74","tag_id":"cl5wb2yn500cpcj38uydtah15","_id":"cl5wb2ynk00e2cj38c852pfn5"},{"post_id":"cl5wb2yne00dkcj38ac5zxikb","tag_id":"cl5wb2yn500cpcj38uydtah15","_id":"cl5wb2ynl00e5cj383cj7f2bc"},{"post_id":"cl5wb2ymx00c0cj38eiaonriv","tag_id":"cl5wb2yn500cpcj38uydtah15","_id":"cl5wb2ynn00eacj387ye0b2hf"},{"post_id":"cl5wb2ynf00dncj38ysu1y1m7","tag_id":"cl5wb2yn500cpcj38uydtah15","_id":"cl5wb2yno00edcj38y2xfxcxw"},{"post_id":"cl5wb2yng00dscj38elosf6a7","tag_id":"cl5wb2yn500cpcj38uydtah15","_id":"cl5wb2ynp00eicj38tetl7k1f"},{"post_id":"cl5wb2ymy00c3cj385x5ug78u","tag_id":"cl5wb2yn500cpcj38uydtah15","_id":"cl5wb2ynq00elcj38fj87ds9b"},{"post_id":"cl5wb2ymz00c5cj384gpqt2p2","tag_id":"cl5wb2yn500cpcj38uydtah15","_id":"cl5wb2yns00eqcj385hdsrdpb"},{"post_id":"cl5wb2ynk00e3cj38fo2bcaaw","tag_id":"cl5wb2yn500cpcj38uydtah15","_id":"cl5wb2ynt00etcj380ybh7iyi"},{"post_id":"cl5wb2yn000c9cj386tvnlnmf","tag_id":"cl5wb2yn500cpcj38uydtah15","_id":"cl5wb2ynu00eycj383t0lhh3i"},{"post_id":"cl5wb2yn100cacj38g1wykm5x","tag_id":"cl5wb2yn500cpcj38uydtah15","_id":"cl5wb2ynv00f1cj38g24cbmei"},{"post_id":"cl5wb2yn200cfcj38s4frgqle","tag_id":"cl5wb2yn500cpcj38uydtah15","_id":"cl5wb2ynw00f6cj38olv9b8no"},{"post_id":"cl5wb2yn200cgcj387ohbdtxz","tag_id":"cl5wb2yn500cpcj38uydtah15","_id":"cl5wb2ynx00f9cj38yeavyg91"},{"post_id":"cl5wb2yn300ckcj38ff04o1n6","tag_id":"cl5wb2yn500cpcj38uydtah15","_id":"cl5wb2yny00fecj38d0apfauh"},{"post_id":"cl5wb2yn400cmcj389e818l05","tag_id":"cl5wb2yn500cpcj38uydtah15","_id":"cl5wb2yo000flcj38k2y19i9w"},{"post_id":"cl5wb2yo000fmcj38hjkv93cr","tag_id":"cl5wb2ynz00ficj38oq9erecr","_id":"cl5wb2yo300frcj38hibxjpzp"},{"post_id":"cl5wb2ynh00dvcj38ylqj8gov","tag_id":"cl5wb2ynz00ficj38oq9erecr","_id":"cl5wb2yo300ftcj384jdcmv8f"},{"post_id":"cl5wb2yo100focj38h0xzzwut","tag_id":"cl5wb2ynz00ficj38oq9erecr","_id":"cl5wb2yo500fycj38bcz1eb0e"},{"post_id":"cl5wb2ynj00e0cj38tf84n437","tag_id":"cl5wb2ynz00ficj38oq9erecr","_id":"cl5wb2yo600g1cj38zpljjnzg"},{"post_id":"cl5wb2yo400fucj386b7fa48t","tag_id":"cl5wb2ynz00ficj38oq9erecr","_id":"cl5wb2yo800g6cj3800j1ti31"},{"post_id":"cl5wb2ynm00e8cj389m8ydzgz","tag_id":"cl5wb2ynz00ficj38oq9erecr","_id":"cl5wb2yo800g9cj38zb62ats9"},{"post_id":"cl5wb2ynn00ebcj38z0pc4qru","tag_id":"cl5wb2ynz00ficj38oq9erecr","_id":"cl5wb2yoa00gecj38cvdfkzqd"},{"post_id":"cl5wb2yno00egcj38gm3fggnp","tag_id":"cl5wb2ynz00ficj38oq9erecr","_id":"cl5wb2yod00glcj38r87ercqt"},{"post_id":"cl5wb2ynq00ejcj38t4bboubf","tag_id":"cl5wb2ynz00ficj38oq9erecr","_id":"cl5wb2yof00gpcj38gst3pab3"},{"post_id":"cl5wb2ynr00eocj38lydlxl2e","tag_id":"cl5wb2ynz00ficj38oq9erecr","_id":"cl5wb2yog00gtcj38pilqdsej"},{"post_id":"cl5wb2yns00ercj38rds9wgh1","tag_id":"cl5wb2ynz00ficj38oq9erecr","_id":"cl5wb2yoh00gxcj38e3qiu89l"},{"post_id":"cl5wb2ynt00ewcj38o9sbzpny","tag_id":"cl5wb2ynz00ficj38oq9erecr","_id":"cl5wb2yoh00h1cj381ojz2scl"},{"post_id":"cl5wb2ynu00ezcj380irkst5f","tag_id":"cl5wb2ynz00ficj38oq9erecr","_id":"cl5wb2yoi00h5cj3874fvgbd1"},{"post_id":"cl5wb2ynv00f4cj38ewsyux5a","tag_id":"cl5wb2ynz00ficj38oq9erecr","_id":"cl5wb2yoj00h9cj38kl7zsu8j"},{"post_id":"cl5wb2ynw00f7cj388703izmf","tag_id":"cl5wb2ynz00ficj38oq9erecr","_id":"cl5wb2yol00hdcj38qomyznne"},{"post_id":"cl5wb2ynx00fccj38k89u1wrl","tag_id":"cl5wb2ynz00ficj38oq9erecr","_id":"cl5wb2yol00hhcj38tx215kyn"},{"post_id":"cl5wb2yny00ffcj3822v4n2nn","tag_id":"cl5wb2ynz00ficj38oq9erecr","_id":"cl5wb2yom00hlcj38zl2ygzcp"},{"post_id":"cl5wb2yo000fjcj38m1untasr","tag_id":"cl5wb2ynz00ficj38oq9erecr","_id":"cl5wb2yon00hpcj38vax9ms6u"},{"post_id":"cl5wb2yo300fscj38rc1w5poz","tag_id":"cl5wb2yom00hocj384ikhzi73","_id":"cl5wb2yon00htcj381795qsof"},{"post_id":"cl5wb2yo500fzcj380cj8zv65","tag_id":"cl5wb2yom00hocj384ikhzi73","_id":"cl5wb2yoo00hxcj38ejy1ylgp"},{"post_id":"cl5wb2yo600g2cj38por38w28","tag_id":"cl5wb2yom00hocj384ikhzi73","_id":"cl5wb2yop00i1cj38aeda3cgc"},{"post_id":"cl5wb2yo800g7cj38eye9ruzh","tag_id":"cl5wb2yom00hocj384ikhzi73","_id":"cl5wb2yoq00i5cj38y9o4z5nn"},{"post_id":"cl5wb2yo800gacj38xlri6mh2","tag_id":"cl5wb2yom00hocj384ikhzi73","_id":"cl5wb2yor00i9cj388uhczyhw"},{"post_id":"cl5wb2yoa00gfcj38z11gorh0","tag_id":"cl5wb2yom00hocj384ikhzi73","_id":"cl5wb2yor00idcj38xj96iw70"},{"post_id":"cl5wb2yob00ghcj382pv4m3rg","tag_id":"cl5wb2yom00hocj384ikhzi73","_id":"cl5wb2yos00ifcj38nnar4p62"}],"Tag":[{"name":"CSS","_id":"cl5wb2yid0006cj382i4449ck"},{"name":"Cocos","_id":"cl5wb2yj10018cj38k4561gmx"},{"name":"ES6","_id":"cl5wb2yja001xcj38co42dtd3"},{"name":"Git","_id":"cl5wb2yjj002mcj38vczwza1p"},{"name":"红宝书","_id":"cl5wb2yjy003ocj382tzp5146"},{"name":"npm","_id":"cl5wb2yk2003wcj38grhvghj3"},{"name":"JS","_id":"cl5wb2ykd004scj38hp1uglqn"},{"name":"React","_id":"cl5wb2yll007tcj38cq8dg9uc"},{"name":"Vue","_id":"cl5wb2ym6009fcj38uatb6abg"},{"name":"Electron","_id":"cl5wb2ymg00accj38l76l7ubt"},{"name":"博客搭建","_id":"cl5wb2ymp00b2cj381b3q5fei"},{"name":"安全","_id":"cl5wb2ymt00bjcj38uofhdvqy"},{"name":"demo","_id":"cl5wb2ymv00brcj389uhwr89n"},{"name":"操作系统","_id":"cl5wb2ymx00bzcj3810kustdd"},{"name":"数据结构","_id":"cl5wb2yn100cdcj38vwmths0e"},{"name":"数据类型","_id":"cl5wb2yn300cjcj381tohxss3"},{"name":"前端","_id":"cl5wb2yn500cpcj38uydtah15"},{"name":"算法","_id":"cl5wb2ynz00ficj38oq9erecr"},{"name":"计网","_id":"cl5wb2yom00hocj384ikhzi73"},{"name":"SDK","_id":"cl5wbchuh0003ml389dinul94"}]}}